// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: dictybase/stock/stock.proto

package stock

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StockId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the stock
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StockId) Reset() {
	*x = StockId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockId) ProtoMessage() {}

func (x *StockId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockId.ProtoReflect.Descriptor instead.
func (*StockId) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{0}
}

func (x *StockId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Definition of an individual strain
type Strain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Strain_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Strain) Reset() {
	*x = Strain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strain) ProtoMessage() {}

func (x *Strain) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strain.ProtoReflect.Descriptor instead.
func (*Strain) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{1}
}

func (x *Strain) GetData() *Strain_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition of an individual plasmid
type Plasmid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Plasmid_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Plasmid) Reset() {
	*x = Plasmid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plasmid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plasmid) ProtoMessage() {}

func (x *Plasmid) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plasmid.ProtoReflect.Descriptor instead.
func (*Plasmid) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{2}
}

func (x *Plasmid) GetData() *Plasmid_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition of various strain attributes
type StrainAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for creation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,8,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,9,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,11,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,12,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,13,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,14,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names []string `protobuf:"bytes,15,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *StrainAttributes) Reset() {
	*x = StrainAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainAttributes) ProtoMessage() {}

func (x *StrainAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainAttributes.ProtoReflect.Descriptor instead.
func (*StrainAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{3}
}

func (x *StrainAttributes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *StrainAttributes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *StrainAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *StrainAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *StrainAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *StrainAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *StrainAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *StrainAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *StrainAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *StrainAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *StrainAttributes) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *StrainAttributes) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *StrainAttributes) GetPlasmid() string {
	if x != nil {
		return x.Plasmid
	}
	return ""
}

func (x *StrainAttributes) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *StrainAttributes) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Definition of various stock attributes
type PlasmidAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for creation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,8,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,9,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,11,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,12,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PlasmidAttributes) Reset() {
	*x = PlasmidAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmidAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmidAttributes) ProtoMessage() {}

func (x *PlasmidAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmidAttributes.ProtoReflect.Descriptor instead.
func (*PlasmidAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{4}
}

func (x *PlasmidAttributes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PlasmidAttributes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PlasmidAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PlasmidAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PlasmidAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *PlasmidAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *PlasmidAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *PlasmidAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *PlasmidAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *PlasmidAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *PlasmidAttributes) GetImageMap() string {
	if x != nil {
		return x.ImageMap
	}
	return ""
}

func (x *PlasmidAttributes) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *PlasmidAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Definition for creating a new strain
type NewStrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewStrain_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewStrain) Reset() {
	*x = NewStrain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStrain) ProtoMessage() {}

func (x *NewStrain) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStrain.ProtoReflect.Descriptor instead.
func (*NewStrain) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{5}
}

func (x *NewStrain) GetData() *NewStrain_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition for creating a new plasmid
type NewPlasmid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewPlasmid_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewPlasmid) Reset() {
	*x = NewPlasmid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlasmid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlasmid) ProtoMessage() {}

func (x *NewPlasmid) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlasmid.ProtoReflect.Descriptor instead.
func (*NewPlasmid) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{6}
}

func (x *NewPlasmid) GetData() *NewPlasmid_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Defines attributes for creating a new strain
type NewStrainAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User who created stock entry
	CreatedBy string `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,4,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,8,rep,name=publications,proto3" json:"publications,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,9,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,10,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,11,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,12,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names []string `protobuf:"bytes,13,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *NewStrainAttributes) Reset() {
	*x = NewStrainAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStrainAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStrainAttributes) ProtoMessage() {}

func (x *NewStrainAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStrainAttributes.ProtoReflect.Descriptor instead.
func (*NewStrainAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{7}
}

func (x *NewStrainAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NewStrainAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *NewStrainAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NewStrainAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *NewStrainAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *NewStrainAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *NewStrainAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *NewStrainAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *NewStrainAttributes) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NewStrainAttributes) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *NewStrainAttributes) GetPlasmid() string {
	if x != nil {
		return x.Plasmid
	}
	return ""
}

func (x *NewStrainAttributes) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *NewStrainAttributes) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Defines attributes for creating a new plasmid
type NewPlasmidAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User who created stock entry
	CreatedBy string `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,4,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,8,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,9,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,10,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NewPlasmidAttributes) Reset() {
	*x = NewPlasmidAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlasmidAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlasmidAttributes) ProtoMessage() {}

func (x *NewPlasmidAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlasmidAttributes.ProtoReflect.Descriptor instead.
func (*NewPlasmidAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{8}
}

func (x *NewPlasmidAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NewPlasmidAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *NewPlasmidAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NewPlasmidAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *NewPlasmidAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *NewPlasmidAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *NewPlasmidAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *NewPlasmidAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *NewPlasmidAttributes) GetImageMap() string {
	if x != nil {
		return x.ImageMap
	}
	return ""
}

func (x *NewPlasmidAttributes) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *NewPlasmidAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Definition for loading an existing strain
type ExistingStrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ExistingStrain_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExistingStrain) Reset() {
	*x = ExistingStrain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingStrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingStrain) ProtoMessage() {}

func (x *ExistingStrain) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingStrain.ProtoReflect.Descriptor instead.
func (*ExistingStrain) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{9}
}

func (x *ExistingStrain) GetData() *ExistingStrain_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition for loading an existing plasmid
type ExistingPlasmid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ExistingPlasmid_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExistingPlasmid) Reset() {
	*x = ExistingPlasmid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingPlasmid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingPlasmid) ProtoMessage() {}

func (x *ExistingPlasmid) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingPlasmid.ProtoReflect.Descriptor instead.
func (*ExistingPlasmid) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{10}
}

func (x *ExistingPlasmid) GetData() *ExistingPlasmid_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Defines attributes for loading an existing strain
type ExistingStrainAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for creation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,7,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,8,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,9,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,11,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,12,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,13,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,14,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names []string `protobuf:"bytes,15,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ExistingStrainAttributes) Reset() {
	*x = ExistingStrainAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingStrainAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingStrainAttributes) ProtoMessage() {}

func (x *ExistingStrainAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingStrainAttributes.ProtoReflect.Descriptor instead.
func (*ExistingStrainAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{11}
}

func (x *ExistingStrainAttributes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExistingStrainAttributes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExistingStrainAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ExistingStrainAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ExistingStrainAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ExistingStrainAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *ExistingStrainAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *ExistingStrainAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *ExistingStrainAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *ExistingStrainAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *ExistingStrainAttributes) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ExistingStrainAttributes) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *ExistingStrainAttributes) GetPlasmid() string {
	if x != nil {
		return x.Plasmid
	}
	return ""
}

func (x *ExistingStrainAttributes) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ExistingStrainAttributes) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Defines attributes for loading an existing plasmid
type ExistingPlasmidAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for creation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,7,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,8,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,9,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,11,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,12,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExistingPlasmidAttributes) Reset() {
	*x = ExistingPlasmidAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingPlasmidAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingPlasmidAttributes) ProtoMessage() {}

func (x *ExistingPlasmidAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingPlasmidAttributes.ProtoReflect.Descriptor instead.
func (*ExistingPlasmidAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{12}
}

func (x *ExistingPlasmidAttributes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExistingPlasmidAttributes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExistingPlasmidAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *ExistingPlasmidAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *ExistingPlasmidAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *ExistingPlasmidAttributes) GetImageMap() string {
	if x != nil {
		return x.ImageMap
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *ExistingPlasmidAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Definition for creating a new strain
type StrainUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StrainUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StrainUpdate) Reset() {
	*x = StrainUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainUpdate) ProtoMessage() {}

func (x *StrainUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainUpdate.ProtoReflect.Descriptor instead.
func (*StrainUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{13}
}

func (x *StrainUpdate) GetData() *StrainUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition for creating a new plasmid
type PlasmidUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PlasmidUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PlasmidUpdate) Reset() {
	*x = PlasmidUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmidUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmidUpdate) ProtoMessage() {}

func (x *PlasmidUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmidUpdate.ProtoReflect.Descriptor instead.
func (*PlasmidUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{14}
}

func (x *PlasmidUpdate) GetData() *PlasmidUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Defines attributes for updating a strain
type StrainUpdateAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,1,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,3,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,7,rep,name=publications,proto3" json:"publications,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,9,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,10,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,11,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names []string `protobuf:"bytes,12,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *StrainUpdateAttributes) Reset() {
	*x = StrainUpdateAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainUpdateAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainUpdateAttributes) ProtoMessage() {}

func (x *StrainUpdateAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainUpdateAttributes.ProtoReflect.Descriptor instead.
func (*StrainUpdateAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{15}
}

func (x *StrainUpdateAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *StrainUpdateAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *StrainUpdateAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *StrainUpdateAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *StrainUpdateAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *StrainUpdateAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *StrainUpdateAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *StrainUpdateAttributes) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *StrainUpdateAttributes) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *StrainUpdateAttributes) GetPlasmid() string {
	if x != nil {
		return x.Plasmid
	}
	return ""
}

func (x *StrainUpdateAttributes) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *StrainUpdateAttributes) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Defines attributes for updating a plasmid
type PlasmidUpdateAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,1,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,3,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,7,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,8,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PlasmidUpdateAttributes) Reset() {
	*x = PlasmidUpdateAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmidUpdateAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmidUpdateAttributes) ProtoMessage() {}

func (x *PlasmidUpdateAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmidUpdateAttributes.ProtoReflect.Descriptor instead.
func (*PlasmidUpdateAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{16}
}

func (x *PlasmidUpdateAttributes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PlasmidUpdateAttributes) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *PlasmidUpdateAttributes) GetEditableSummary() string {
	if x != nil {
		return x.EditableSummary
	}
	return ""
}

func (x *PlasmidUpdateAttributes) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *PlasmidUpdateAttributes) GetGenes() []string {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *PlasmidUpdateAttributes) GetDbxrefs() []string {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *PlasmidUpdateAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *PlasmidUpdateAttributes) GetImageMap() string {
	if x != nil {
		return x.ImageMap
	}
	return ""
}

func (x *PlasmidUpdateAttributes) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *PlasmidUpdateAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List of strains
type StrainCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StrainCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta                    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *StrainCollection) Reset() {
	*x = StrainCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainCollection) ProtoMessage() {}

func (x *StrainCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainCollection.ProtoReflect.Descriptor instead.
func (*StrainCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{17}
}

func (x *StrainCollection) GetData() []*StrainCollection_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StrainCollection) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// List of plasmids
type PlasmidCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PlasmidCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta                     `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *PlasmidCollection) Reset() {
	*x = PlasmidCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmidCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmidCollection) ProtoMessage() {}

func (x *PlasmidCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmidCollection.ProtoReflect.Descriptor instead.
func (*PlasmidCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{18}
}

func (x *PlasmidCollection) GetData() []*PlasmidCollection_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PlasmidCollection) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// StockParameters defines fields for manipulating output of Stock collection
type StockParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the list (default is 0)
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request (default is 10)
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data return by the collection. To use
	// it, supply one or multiple allowed fields to filter followed
	// by a filter expression. It uses the following syntax...
	//        field_name operator expression
	//
	// The following fields of `StockAttributes` definition are allowed to
	// be used for filtering
	//   * depositor          - Depositor of the stock (string)
	//   * parent             - Parental strain (string) (currently not implemented)
	//   * plasmid            - Related plasmid for the strain (string)
	//   * species            - The species of the strain (string)
	//   * summary            - Summary of the stock (string)
	//   * name               - Name used for strain (string), searches in the "names" attribute
	//   * descriptor         - Descriptor for the strain (string), searches in the "label" attribute
	//   * plasmid_name       - Name used for plasmid (string)
	//   * created_at         - Date the stock was created (number), can be in the
	//                          following formats:
	//                          YYYY-MM-DD, YYYY-MM, YYYY
	//   * updated_at         - Date the stock was updated (number), can be in the
	//                          following formats:
	//                          YYYY-MM-DD, YYYY-MM, YYYY
	//
	// field_name - Any one of the allowed field_name of the `StockAttributes` definition.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded for http request.
	//
	//        Operators for strings
	//              =~   Contains substring
	//              !~   Not contains substring
	//              ===  Equals
	//              !=   Not equals
	//
	//        Operators for number
	//              ==  Equals
	//              >   Greater than
	//              <   Less than
	//              <=  Less than equal to
	//              >=  Greater than equal to
	//
	//        Operators for dates
	//              $==  Equals
	//              $>   Greater than
	//              $<   Less than
	//              $<=  Less than equal to
	//              $>=  Greater than equal to
	//
	//        Operators for items in arrays
	//              @=~   Contains substring
	//              @!~   Not contains substring (not implemented yet)
	//              @==   Equals
	//              @!=   Not equals
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded for http request.
	//
	//           filter: "created_at$>=2018-12-01"
	//           filter: "depositor===Costanza"
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	//
	//           filter: "depositor===Benes;created_at$>=2018-12-01"
	//
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *StockParameters) Reset() {
	*x = StockParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockParameters) ProtoMessage() {}

func (x *StockParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockParameters.ProtoReflect.Descriptor instead.
func (*StockParameters) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{19}
}

func (x *StockParameters) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *StockParameters) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StockParameters) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Metadata definition for traversing the collection
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the collection. Set the
	// cursor value parameter to the value of next_cursor to retrieve the next
	// set of collection using the same method
	NextCursor int64 `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Total number of records in the collection.
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{20}
}

func (x *Meta) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *Meta) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Meta) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Strain_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the strain
	Id         string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *StrainAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Strain_Data) Reset() {
	*x = Strain_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strain_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strain_Data) ProtoMessage() {}

func (x *Strain_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strain_Data.ProtoReflect.Descriptor instead.
func (*Strain_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Strain_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Strain_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Strain_Data) GetAttributes() *StrainAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Plasmid_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the plasmid
	Id         string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *PlasmidAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Plasmid_Data) Reset() {
	*x = Plasmid_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plasmid_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plasmid_Data) ProtoMessage() {}

func (x *Plasmid_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plasmid_Data.ProtoReflect.Descriptor instead.
func (*Plasmid_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Plasmid_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Plasmid_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plasmid_Data) GetAttributes() *PlasmidAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type NewStrain_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type       string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *NewStrainAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NewStrain_Data) Reset() {
	*x = NewStrain_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStrain_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStrain_Data) ProtoMessage() {}

func (x *NewStrain_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStrain_Data.ProtoReflect.Descriptor instead.
func (*NewStrain_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{5, 0}
}

func (x *NewStrain_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewStrain_Data) GetAttributes() *NewStrainAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type NewPlasmid_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type       string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *NewPlasmidAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NewPlasmid_Data) Reset() {
	*x = NewPlasmid_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlasmid_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlasmid_Data) ProtoMessage() {}

func (x *NewPlasmid_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlasmid_Data.ProtoReflect.Descriptor instead.
func (*NewPlasmid_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{6, 0}
}

func (x *NewPlasmid_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewPlasmid_Data) GetAttributes() *NewPlasmidAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ExistingStrain_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Existing strain ID
	Id         string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *ExistingStrainAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ExistingStrain_Data) Reset() {
	*x = ExistingStrain_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingStrain_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingStrain_Data) ProtoMessage() {}

func (x *ExistingStrain_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingStrain_Data.ProtoReflect.Descriptor instead.
func (*ExistingStrain_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ExistingStrain_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExistingStrain_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExistingStrain_Data) GetAttributes() *ExistingStrainAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ExistingPlasmid_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Existing plasmid ID
	Id         string                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *ExistingPlasmidAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ExistingPlasmid_Data) Reset() {
	*x = ExistingPlasmid_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistingPlasmid_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingPlasmid_Data) ProtoMessage() {}

func (x *ExistingPlasmid_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingPlasmid_Data.ProtoReflect.Descriptor instead.
func (*ExistingPlasmid_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ExistingPlasmid_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExistingPlasmid_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExistingPlasmid_Data) GetAttributes() *ExistingPlasmidAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type StrainUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique ID for strain
	Id         string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *StrainUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *StrainUpdate_Data) Reset() {
	*x = StrainUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainUpdate_Data) ProtoMessage() {}

func (x *StrainUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainUpdate_Data.ProtoReflect.Descriptor instead.
func (*StrainUpdate_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{13, 0}
}

func (x *StrainUpdate_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StrainUpdate_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StrainUpdate_Data) GetAttributes() *StrainUpdateAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type PlasmidUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique ID for plasmid
	Id         string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *PlasmidUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PlasmidUpdate_Data) Reset() {
	*x = PlasmidUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmidUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmidUpdate_Data) ProtoMessage() {}

func (x *PlasmidUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmidUpdate_Data.ProtoReflect.Descriptor instead.
func (*PlasmidUpdate_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{14, 0}
}

func (x *PlasmidUpdate_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlasmidUpdate_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlasmidUpdate_Data) GetAttributes() *PlasmidUpdateAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type StrainCollection_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the stock
	Id         string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *StrainAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *StrainCollection_Data) Reset() {
	*x = StrainCollection_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainCollection_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainCollection_Data) ProtoMessage() {}

func (x *StrainCollection_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainCollection_Data.ProtoReflect.Descriptor instead.
func (*StrainCollection_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{17, 0}
}

func (x *StrainCollection_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StrainCollection_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StrainCollection_Data) GetAttributes() *StrainAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type PlasmidCollection_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the stock
	Id         string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *PlasmidAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PlasmidCollection_Data) Reset() {
	*x = PlasmidCollection_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_stock_stock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmidCollection_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmidCollection_Data) ProtoMessage() {}

func (x *PlasmidCollection_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_stock_stock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmidCollection_Data.ProtoReflect.Descriptor instead.
func (*PlasmidCollection_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_stock_stock_proto_rawDescGZIP(), []int{18, 0}
}

func (x *PlasmidCollection_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlasmidCollection_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlasmidCollection_Data) GetAttributes() *PlasmidAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_dictybase_stock_stock_proto protoreflect.FileDescriptor

var file_dictybase_stock_stock_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6d, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x07,
	0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x6e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xa5, 0x04, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf3, 0x03, 0x0a, 0x11, 0x50,
	0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xaa, 0x01, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4e,
	0x65, 0x77, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x60, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4e, 0x65,
	0x77, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4e, 0x65, 0x77,
	0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x61, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4e, 0x65, 0x77,
	0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xaa, 0x03,
	0x0a, 0x13, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x14, 0x4e,
	0x65, 0x77, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x75, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x73, 0x6d, 0x69, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x76, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0xad, 0x04, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x73,
	0x6d, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0xf3, 0x03, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x73, 0x6d, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x7b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x7c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x73, 0x6d,
	0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x01,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x1a, 0x6d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0xf3, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x6e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x53, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x32, 0xc4, 0x06, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a,
	0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4e, 0x65,
	0x77, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x1a, 0x17, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x73,
	0x6d, 0x69, 0x64, 0x12, 0x1b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64,
	0x1a, 0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x17, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x22,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x1a, 0x17, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x1a,
	0x18, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x22, 0x00, 0x42, 0x6d, 0x0a, 0x13, 0x6f,
	0x72, 0x67, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x42, 0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x3b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0xf8, 0x01, 0x01, 0xa2,
	0x02, 0x08, 0x44, 0x49, 0x43, 0x54, 0x59, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dictybase_stock_stock_proto_rawDescOnce sync.Once
	file_dictybase_stock_stock_proto_rawDescData = file_dictybase_stock_stock_proto_rawDesc
)

func file_dictybase_stock_stock_proto_rawDescGZIP() []byte {
	file_dictybase_stock_stock_proto_rawDescOnce.Do(func() {
		file_dictybase_stock_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_dictybase_stock_stock_proto_rawDescData)
	})
	return file_dictybase_stock_stock_proto_rawDescData
}

var file_dictybase_stock_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_dictybase_stock_stock_proto_goTypes = []interface{}{
	(*StockId)(nil),                   // 0: dictybase.stock.StockId
	(*Strain)(nil),                    // 1: dictybase.stock.Strain
	(*Plasmid)(nil),                   // 2: dictybase.stock.Plasmid
	(*StrainAttributes)(nil),          // 3: dictybase.stock.StrainAttributes
	(*PlasmidAttributes)(nil),         // 4: dictybase.stock.PlasmidAttributes
	(*NewStrain)(nil),                 // 5: dictybase.stock.NewStrain
	(*NewPlasmid)(nil),                // 6: dictybase.stock.NewPlasmid
	(*NewStrainAttributes)(nil),       // 7: dictybase.stock.NewStrainAttributes
	(*NewPlasmidAttributes)(nil),      // 8: dictybase.stock.NewPlasmidAttributes
	(*ExistingStrain)(nil),            // 9: dictybase.stock.ExistingStrain
	(*ExistingPlasmid)(nil),           // 10: dictybase.stock.ExistingPlasmid
	(*ExistingStrainAttributes)(nil),  // 11: dictybase.stock.ExistingStrainAttributes
	(*ExistingPlasmidAttributes)(nil), // 12: dictybase.stock.ExistingPlasmidAttributes
	(*StrainUpdate)(nil),              // 13: dictybase.stock.StrainUpdate
	(*PlasmidUpdate)(nil),             // 14: dictybase.stock.PlasmidUpdate
	(*StrainUpdateAttributes)(nil),    // 15: dictybase.stock.StrainUpdateAttributes
	(*PlasmidUpdateAttributes)(nil),   // 16: dictybase.stock.PlasmidUpdateAttributes
	(*StrainCollection)(nil),          // 17: dictybase.stock.StrainCollection
	(*PlasmidCollection)(nil),         // 18: dictybase.stock.PlasmidCollection
	(*StockParameters)(nil),           // 19: dictybase.stock.StockParameters
	(*Meta)(nil),                      // 20: dictybase.stock.Meta
	(*Strain_Data)(nil),               // 21: dictybase.stock.Strain.Data
	(*Plasmid_Data)(nil),              // 22: dictybase.stock.Plasmid.Data
	(*NewStrain_Data)(nil),            // 23: dictybase.stock.NewStrain.Data
	(*NewPlasmid_Data)(nil),           // 24: dictybase.stock.NewPlasmid.Data
	(*ExistingStrain_Data)(nil),       // 25: dictybase.stock.ExistingStrain.Data
	(*ExistingPlasmid_Data)(nil),      // 26: dictybase.stock.ExistingPlasmid.Data
	(*StrainUpdate_Data)(nil),         // 27: dictybase.stock.StrainUpdate.Data
	(*PlasmidUpdate_Data)(nil),        // 28: dictybase.stock.PlasmidUpdate.Data
	(*StrainCollection_Data)(nil),     // 29: dictybase.stock.StrainCollection.Data
	(*PlasmidCollection_Data)(nil),    // 30: dictybase.stock.PlasmidCollection.Data
	(*timestamppb.Timestamp)(nil),     // 31: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),             // 32: google.protobuf.Empty
}
var file_dictybase_stock_stock_proto_depIdxs = []int32{
	21, // 0: dictybase.stock.Strain.data:type_name -> dictybase.stock.Strain.Data
	22, // 1: dictybase.stock.Plasmid.data:type_name -> dictybase.stock.Plasmid.Data
	31, // 2: dictybase.stock.StrainAttributes.created_at:type_name -> google.protobuf.Timestamp
	31, // 3: dictybase.stock.StrainAttributes.updated_at:type_name -> google.protobuf.Timestamp
	31, // 4: dictybase.stock.PlasmidAttributes.created_at:type_name -> google.protobuf.Timestamp
	31, // 5: dictybase.stock.PlasmidAttributes.updated_at:type_name -> google.protobuf.Timestamp
	23, // 6: dictybase.stock.NewStrain.data:type_name -> dictybase.stock.NewStrain.Data
	24, // 7: dictybase.stock.NewPlasmid.data:type_name -> dictybase.stock.NewPlasmid.Data
	25, // 8: dictybase.stock.ExistingStrain.data:type_name -> dictybase.stock.ExistingStrain.Data
	26, // 9: dictybase.stock.ExistingPlasmid.data:type_name -> dictybase.stock.ExistingPlasmid.Data
	31, // 10: dictybase.stock.ExistingStrainAttributes.created_at:type_name -> google.protobuf.Timestamp
	31, // 11: dictybase.stock.ExistingStrainAttributes.updated_at:type_name -> google.protobuf.Timestamp
	31, // 12: dictybase.stock.ExistingPlasmidAttributes.created_at:type_name -> google.protobuf.Timestamp
	31, // 13: dictybase.stock.ExistingPlasmidAttributes.updated_at:type_name -> google.protobuf.Timestamp
	27, // 14: dictybase.stock.StrainUpdate.data:type_name -> dictybase.stock.StrainUpdate.Data
	28, // 15: dictybase.stock.PlasmidUpdate.data:type_name -> dictybase.stock.PlasmidUpdate.Data
	29, // 16: dictybase.stock.StrainCollection.data:type_name -> dictybase.stock.StrainCollection.Data
	20, // 17: dictybase.stock.StrainCollection.meta:type_name -> dictybase.stock.Meta
	30, // 18: dictybase.stock.PlasmidCollection.data:type_name -> dictybase.stock.PlasmidCollection.Data
	20, // 19: dictybase.stock.PlasmidCollection.meta:type_name -> dictybase.stock.Meta
	3,  // 20: dictybase.stock.Strain.Data.attributes:type_name -> dictybase.stock.StrainAttributes
	4,  // 21: dictybase.stock.Plasmid.Data.attributes:type_name -> dictybase.stock.PlasmidAttributes
	7,  // 22: dictybase.stock.NewStrain.Data.attributes:type_name -> dictybase.stock.NewStrainAttributes
	8,  // 23: dictybase.stock.NewPlasmid.Data.attributes:type_name -> dictybase.stock.NewPlasmidAttributes
	11, // 24: dictybase.stock.ExistingStrain.Data.attributes:type_name -> dictybase.stock.ExistingStrainAttributes
	12, // 25: dictybase.stock.ExistingPlasmid.Data.attributes:type_name -> dictybase.stock.ExistingPlasmidAttributes
	15, // 26: dictybase.stock.StrainUpdate.Data.attributes:type_name -> dictybase.stock.StrainUpdateAttributes
	16, // 27: dictybase.stock.PlasmidUpdate.Data.attributes:type_name -> dictybase.stock.PlasmidUpdateAttributes
	3,  // 28: dictybase.stock.StrainCollection.Data.attributes:type_name -> dictybase.stock.StrainAttributes
	4,  // 29: dictybase.stock.PlasmidCollection.Data.attributes:type_name -> dictybase.stock.PlasmidAttributes
	0,  // 30: dictybase.stock.StockService.GetStrain:input_type -> dictybase.stock.StockId
	0,  // 31: dictybase.stock.StockService.GetPlasmid:input_type -> dictybase.stock.StockId
	5,  // 32: dictybase.stock.StockService.CreateStrain:input_type -> dictybase.stock.NewStrain
	6,  // 33: dictybase.stock.StockService.CreatePlasmid:input_type -> dictybase.stock.NewPlasmid
	13, // 34: dictybase.stock.StockService.UpdateStrain:input_type -> dictybase.stock.StrainUpdate
	14, // 35: dictybase.stock.StockService.UpdatePlasmid:input_type -> dictybase.stock.PlasmidUpdate
	0,  // 36: dictybase.stock.StockService.RemoveStock:input_type -> dictybase.stock.StockId
	19, // 37: dictybase.stock.StockService.ListStrains:input_type -> dictybase.stock.StockParameters
	19, // 38: dictybase.stock.StockService.ListPlasmids:input_type -> dictybase.stock.StockParameters
	9,  // 39: dictybase.stock.StockService.LoadStrain:input_type -> dictybase.stock.ExistingStrain
	10, // 40: dictybase.stock.StockService.LoadPlasmid:input_type -> dictybase.stock.ExistingPlasmid
	1,  // 41: dictybase.stock.StockService.GetStrain:output_type -> dictybase.stock.Strain
	2,  // 42: dictybase.stock.StockService.GetPlasmid:output_type -> dictybase.stock.Plasmid
	1,  // 43: dictybase.stock.StockService.CreateStrain:output_type -> dictybase.stock.Strain
	2,  // 44: dictybase.stock.StockService.CreatePlasmid:output_type -> dictybase.stock.Plasmid
	1,  // 45: dictybase.stock.StockService.UpdateStrain:output_type -> dictybase.stock.Strain
	2,  // 46: dictybase.stock.StockService.UpdatePlasmid:output_type -> dictybase.stock.Plasmid
	32, // 47: dictybase.stock.StockService.RemoveStock:output_type -> google.protobuf.Empty
	17, // 48: dictybase.stock.StockService.ListStrains:output_type -> dictybase.stock.StrainCollection
	18, // 49: dictybase.stock.StockService.ListPlasmids:output_type -> dictybase.stock.PlasmidCollection
	1,  // 50: dictybase.stock.StockService.LoadStrain:output_type -> dictybase.stock.Strain
	2,  // 51: dictybase.stock.StockService.LoadPlasmid:output_type -> dictybase.stock.Plasmid
	41, // [41:52] is the sub-list for method output_type
	30, // [30:41] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_dictybase_stock_stock_proto_init() }
func file_dictybase_stock_stock_proto_init() {
	if File_dictybase_stock_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dictybase_stock_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plasmid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmidAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStrain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlasmid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStrainAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlasmidAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingStrain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingPlasmid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingStrainAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingPlasmidAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmidUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainUpdateAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmidUpdateAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmidCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strain_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plasmid_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStrain_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlasmid_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingStrain_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistingPlasmid_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmidUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainCollection_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_stock_stock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmidCollection_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dictybase_stock_stock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dictybase_stock_stock_proto_goTypes,
		DependencyIndexes: file_dictybase_stock_stock_proto_depIdxs,
		MessageInfos:      file_dictybase_stock_stock_proto_msgTypes,
	}.Build()
	File_dictybase_stock_stock_proto = out.File
	file_dictybase_stock_stock_proto_rawDesc = nil
	file_dictybase_stock_stock_proto_goTypes = nil
	file_dictybase_stock_stock_proto_depIdxs = nil
}
