// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: dictybase/feature_annotation/feature_annotation.proto

package feature_annotation

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// unique identifier for the feature annotation
	Id         string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *FeatureAnnotationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// email id of the user who created the content
	CreatedBy string `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// email id of the user who updated the content
	UpdatedBy string `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Timestamp for creation and update
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,8,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	// Version of this feature
	Version int64 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FeatureAnnotation) Reset() {
	*x = FeatureAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureAnnotation) ProtoMessage() {}

func (x *FeatureAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureAnnotation.ProtoReflect.Descriptor instead.
func (*FeatureAnnotation) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureAnnotation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeatureAnnotation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureAnnotation) GetAttributes() *FeatureAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FeatureAnnotation) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *FeatureAnnotation) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *FeatureAnnotation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeatureAnnotation) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FeatureAnnotation) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

func (x *FeatureAnnotation) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Common attributes for feature annotations
type FeatureAnnotationAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Alternate list of names
	Synonyms []string `protobuf:"bytes,2,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	// List of publications(doi identifiers)
	Publications []string `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
	// List of pubmed id
	Pubmed []string `protobuf:"bytes,4,rep,name=pubmed,proto3" json:"pubmed,omitempty"`
	// Deprecated: Marked as deprecated in dictybase/feature_annotation/feature_annotation.proto.
	Dbxrefs []*Dbxref `protobuf:"bytes,5,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Cross references to other databases
	Dblinks []*DbLink `protobuf:"bytes,6,rep,name=dblinks,proto3" json:"dblinks,omitempty"`
	// Bucket of key value pair data
	Properties []*TagProperty `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *FeatureAnnotationAttributes) Reset() {
	*x = FeatureAnnotationAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureAnnotationAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureAnnotationAttributes) ProtoMessage() {}

func (x *FeatureAnnotationAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureAnnotationAttributes.ProtoReflect.Descriptor instead.
func (*FeatureAnnotationAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureAnnotationAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureAnnotationAttributes) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *FeatureAnnotationAttributes) GetPublications() []string {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *FeatureAnnotationAttributes) GetPubmed() []string {
	if x != nil {
		return x.Pubmed
	}
	return nil
}

// Deprecated: Marked as deprecated in dictybase/feature_annotation/feature_annotation.proto.
func (x *FeatureAnnotationAttributes) GetDbxrefs() []*Dbxref {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *FeatureAnnotationAttributes) GetDblinks() []*DbLink {
	if x != nil {
		return x.Dblinks
	}
	return nil
}

func (x *FeatureAnnotationAttributes) GetProperties() []*TagProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type FeatureAnnotationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id         string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *FeatureAnnotationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// email id of the user who updated the content
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,5,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
}

func (x *FeatureAnnotationUpdate) Reset() {
	*x = FeatureAnnotationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureAnnotationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureAnnotationUpdate) ProtoMessage() {}

func (x *FeatureAnnotationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureAnnotationUpdate.ProtoReflect.Descriptor instead.
func (*FeatureAnnotationUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureAnnotationUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeatureAnnotationUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureAnnotationUpdate) GetAttributes() *FeatureAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FeatureAnnotationUpdate) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *FeatureAnnotationUpdate) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

type NewFeatureAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *FeatureAnnotationAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// email id of the user who created the content
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Timestamp for creation and update
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,6,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	// Version of this feature
	Version int64 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// unique identifier for the feature annotation
	Id string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewFeatureAnnotation) Reset() {
	*x = NewFeatureAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFeatureAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFeatureAnnotation) ProtoMessage() {}

func (x *NewFeatureAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFeatureAnnotation.ProtoReflect.Descriptor instead.
func (*NewFeatureAnnotation) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{3}
}

func (x *NewFeatureAnnotation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewFeatureAnnotation) GetAttributes() *FeatureAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *NewFeatureAnnotation) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NewFeatureAnnotation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NewFeatureAnnotation) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NewFeatureAnnotation) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

func (x *NewFeatureAnnotation) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NewFeatureAnnotation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FeatureAnnotationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the feature annotation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FeatureAnnotationId) Reset() {
	*x = FeatureAnnotationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureAnnotationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureAnnotationId) ProtoMessage() {}

func (x *FeatureAnnotationId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureAnnotationId.ProtoReflect.Descriptor instead.
func (*FeatureAnnotationId) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{4}
}

func (x *FeatureAnnotationId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFeatureAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the feature annotation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// flag to indicate whether the entry will be wiped or turned obsolete(soft delete)
	Purge bool `protobuf:"varint,2,opt,name=purge,proto3" json:"purge,omitempty"`
}

func (x *DeleteFeatureAnnotationRequest) Reset() {
	*x = DeleteFeatureAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeatureAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeatureAnnotationRequest) ProtoMessage() {}

func (x *DeleteFeatureAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeatureAnnotationRequest.ProtoReflect.Descriptor instead.
func (*DeleteFeatureAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteFeatureAnnotationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteFeatureAnnotationRequest) GetPurge() bool {
	if x != nil {
		return x.Purge
	}
	return false
}

// Link to an identifier typically from a bioinformatics
// database(NCBI,Uniprot,Ensembl etc.)
type DbLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the linked database
	PrimaryId string `protobuf:"bytes,1,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	// a number which differentiates between versions of
	// the same object. Higher numbers are considered to be
	// later and more relevant
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Source database
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Type of this dblink, for example 'protein'
	Linktype string `protobuf:"bytes,4,opt,name=linktype,proto3" json:"linktype,omitempty"`
	// URL that is associated with this link
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// A short name that is a possible alternative to the database name which
	// could be used for display.
	Label string `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *DbLink) Reset() {
	*x = DbLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbLink) ProtoMessage() {}

func (x *DbLink) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbLink.ProtoReflect.Descriptor instead.
func (*DbLink) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{6}
}

func (x *DbLink) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

func (x *DbLink) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DbLink) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DbLink) GetLinktype() string {
	if x != nil {
		return x.Linktype
	}
	return ""
}

func (x *DbLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DbLink) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// TagProperty represents a key-value pair structure used for storing
// custom attributes or metadata.
type TagProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag   string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TagProperty) Reset() {
	*x = TagProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagProperty) ProtoMessage() {}

func (x *TagProperty) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagProperty.ProtoReflect.Descriptor instead.
func (*TagProperty) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{7}
}

func (x *TagProperty) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TagProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// deprecated
type Dbxref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier
	DbxrefId string `protobuf:"bytes,1,opt,name=dbxref_id,json=dbxrefId,proto3" json:"dbxref_id,omitempty"`
	Version  int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Source database
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *Dbxref) Reset() {
	*x = Dbxref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dbxref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dbxref) ProtoMessage() {}

func (x *Dbxref) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dbxref.ProtoReflect.Descriptor instead.
func (*Dbxref) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP(), []int{8}
}

func (x *Dbxref) GetDbxrefId() string {
	if x != nil {
		return x.DbxrefId
	}
	return ""
}

func (x *Dbxref) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Dbxref) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

var File_dictybase_feature_annotation_feature_annotation_proto protoreflect.FileDescriptor

var file_dictybase_feature_annotation_feature_annotation_proto_rawDesc = []byte{
	0x0a, 0x35, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x88, 0x04, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0xba, 0x01,
	0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x62, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xba, 0x48, 0x40, 0xba,
	0x01, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0xd0, 0x01, 0x01, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x02, 0x0a, 0x1b,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6d, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6d, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x62, 0x78, 0x72, 0x65, 0x66, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72,
	0x65, 0x66, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x64, 0x62, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa2,
	0x02, 0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0xba, 0x01, 0x3a, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c,
	0x65, 0x74, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x61, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0xba, 0x01, 0x3a, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a,
	0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x75, 0x72, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a,
	0x06, 0x44, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x6b, 0x0a, 0x06, 0x44, 0x62, 0x78, 0x72, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x09, 0x64,
	0x62, 0x78, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x32, 0x94,
	0x04, 0x0a, 0x18, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x2f, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x2f, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x95, 0x01, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf8,
	0x01, 0x01, 0xa2, 0x02, 0x08, 0x44, 0x49, 0x43, 0x54, 0x59, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dictybase_feature_annotation_feature_annotation_proto_rawDescOnce sync.Once
	file_dictybase_feature_annotation_feature_annotation_proto_rawDescData = file_dictybase_feature_annotation_feature_annotation_proto_rawDesc
)

func file_dictybase_feature_annotation_feature_annotation_proto_rawDescGZIP() []byte {
	file_dictybase_feature_annotation_feature_annotation_proto_rawDescOnce.Do(func() {
		file_dictybase_feature_annotation_feature_annotation_proto_rawDescData = protoimpl.X.CompressGZIP(file_dictybase_feature_annotation_feature_annotation_proto_rawDescData)
	})
	return file_dictybase_feature_annotation_feature_annotation_proto_rawDescData
}

var file_dictybase_feature_annotation_feature_annotation_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_dictybase_feature_annotation_feature_annotation_proto_goTypes = []interface{}{
	(*FeatureAnnotation)(nil),              // 0: dictybase.feature_annotation.FeatureAnnotation
	(*FeatureAnnotationAttributes)(nil),    // 1: dictybase.feature_annotation.FeatureAnnotationAttributes
	(*FeatureAnnotationUpdate)(nil),        // 2: dictybase.feature_annotation.FeatureAnnotationUpdate
	(*NewFeatureAnnotation)(nil),           // 3: dictybase.feature_annotation.NewFeatureAnnotation
	(*FeatureAnnotationId)(nil),            // 4: dictybase.feature_annotation.FeatureAnnotationId
	(*DeleteFeatureAnnotationRequest)(nil), // 5: dictybase.feature_annotation.DeleteFeatureAnnotationRequest
	(*DbLink)(nil),                         // 6: dictybase.feature_annotation.DbLink
	(*TagProperty)(nil),                    // 7: dictybase.feature_annotation.TagProperty
	(*Dbxref)(nil),                         // 8: dictybase.feature_annotation.Dbxref
	(*timestamppb.Timestamp)(nil),          // 9: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                  // 10: google.protobuf.Empty
}
var file_dictybase_feature_annotation_feature_annotation_proto_depIdxs = []int32{
	1,  // 0: dictybase.feature_annotation.FeatureAnnotation.attributes:type_name -> dictybase.feature_annotation.FeatureAnnotationAttributes
	9,  // 1: dictybase.feature_annotation.FeatureAnnotation.created_at:type_name -> google.protobuf.Timestamp
	9,  // 2: dictybase.feature_annotation.FeatureAnnotation.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 3: dictybase.feature_annotation.FeatureAnnotationAttributes.dbxrefs:type_name -> dictybase.feature_annotation.Dbxref
	6,  // 4: dictybase.feature_annotation.FeatureAnnotationAttributes.dblinks:type_name -> dictybase.feature_annotation.DbLink
	7,  // 5: dictybase.feature_annotation.FeatureAnnotationAttributes.properties:type_name -> dictybase.feature_annotation.TagProperty
	1,  // 6: dictybase.feature_annotation.FeatureAnnotationUpdate.attributes:type_name -> dictybase.feature_annotation.FeatureAnnotationAttributes
	1,  // 7: dictybase.feature_annotation.NewFeatureAnnotation.attributes:type_name -> dictybase.feature_annotation.FeatureAnnotationAttributes
	9,  // 8: dictybase.feature_annotation.NewFeatureAnnotation.created_at:type_name -> google.protobuf.Timestamp
	9,  // 9: dictybase.feature_annotation.NewFeatureAnnotation.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 10: dictybase.feature_annotation.FeatureAnnotationService.CreateFeatureAnnotation:input_type -> dictybase.feature_annotation.NewFeatureAnnotation
	4,  // 11: dictybase.feature_annotation.FeatureAnnotationService.GetFeatureAnnotation:input_type -> dictybase.feature_annotation.FeatureAnnotationId
	2,  // 12: dictybase.feature_annotation.FeatureAnnotationService.UpdateFeatureAnnotation:input_type -> dictybase.feature_annotation.FeatureAnnotationUpdate
	5,  // 13: dictybase.feature_annotation.FeatureAnnotationService.DeleteFeatureAnnotation:input_type -> dictybase.feature_annotation.DeleteFeatureAnnotationRequest
	0,  // 14: dictybase.feature_annotation.FeatureAnnotationService.CreateFeatureAnnotation:output_type -> dictybase.feature_annotation.FeatureAnnotation
	0,  // 15: dictybase.feature_annotation.FeatureAnnotationService.GetFeatureAnnotation:output_type -> dictybase.feature_annotation.FeatureAnnotation
	0,  // 16: dictybase.feature_annotation.FeatureAnnotationService.UpdateFeatureAnnotation:output_type -> dictybase.feature_annotation.FeatureAnnotation
	10, // 17: dictybase.feature_annotation.FeatureAnnotationService.DeleteFeatureAnnotation:output_type -> google.protobuf.Empty
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dictybase_feature_annotation_feature_annotation_proto_init() }
func file_dictybase_feature_annotation_feature_annotation_proto_init() {
	if File_dictybase_feature_annotation_feature_annotation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureAnnotationAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureAnnotationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFeatureAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureAnnotationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeatureAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_annotation_feature_annotation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dbxref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dictybase_feature_annotation_feature_annotation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dictybase_feature_annotation_feature_annotation_proto_goTypes,
		DependencyIndexes: file_dictybase_feature_annotation_feature_annotation_proto_depIdxs,
		MessageInfos:      file_dictybase_feature_annotation_feature_annotation_proto_msgTypes,
	}.Build()
	File_dictybase_feature_annotation_feature_annotation_proto = out.File
	file_dictybase_feature_annotation_feature_annotation_proto_rawDesc = nil
	file_dictybase_feature_annotation_feature_annotation_proto_goTypes = nil
	file_dictybase_feature_annotation_feature_annotation_proto_depIdxs = nil
}
