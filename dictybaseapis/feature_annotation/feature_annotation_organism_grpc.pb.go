// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dictybase/feature_annotation/feature_annotation_organism.proto

package feature_annotation

import (
	context "context"
	organism "github.com/dictyBase/go-genproto/dictybaseapis/organism"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganismFeatureService_LinkFeatureToOrganism_FullMethodName = "/dictybase.feature_annotation.OrganismFeatureService/LinkFeatureToOrganism"
	OrganismFeatureService_GetFeatureOrganism_FullMethodName    = "/dictybase.feature_annotation.OrganismFeatureService/GetFeatureOrganism"
	OrganismFeatureService_UpdateFeatureOrganism_FullMethodName = "/dictybase.feature_annotation.OrganismFeatureService/UpdateFeatureOrganism"
	OrganismFeatureService_RemoveFeatureOrganism_FullMethodName = "/dictybase.feature_annotation.OrganismFeatureService/RemoveFeatureOrganism"
)

// OrganismFeatureServiceClient is the client API for OrganismFeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganismFeatureServiceClient interface {
	// Link a feature annotation to an organism
	LinkFeatureToOrganism(ctx context.Context, in *OrganismFeatureLink, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get organism for a feature
	GetFeatureOrganism(ctx context.Context, in *FeatureAnnotationId, opts ...grpc.CallOption) (*organism.Organism, error)
	// Update feature's organism link
	UpdateFeatureOrganism(ctx context.Context, in *OrganismFeatureUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove feature's organism link
	RemoveFeatureOrganism(ctx context.Context, in *FeatureAnnotationId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type organismFeatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganismFeatureServiceClient(cc grpc.ClientConnInterface) OrganismFeatureServiceClient {
	return &organismFeatureServiceClient{cc}
}

func (c *organismFeatureServiceClient) LinkFeatureToOrganism(ctx context.Context, in *OrganismFeatureLink, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrganismFeatureService_LinkFeatureToOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismFeatureServiceClient) GetFeatureOrganism(ctx context.Context, in *FeatureAnnotationId, opts ...grpc.CallOption) (*organism.Organism, error) {
	out := new(organism.Organism)
	err := c.cc.Invoke(ctx, OrganismFeatureService_GetFeatureOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismFeatureServiceClient) UpdateFeatureOrganism(ctx context.Context, in *OrganismFeatureUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrganismFeatureService_UpdateFeatureOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismFeatureServiceClient) RemoveFeatureOrganism(ctx context.Context, in *FeatureAnnotationId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrganismFeatureService_RemoveFeatureOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganismFeatureServiceServer is the server API for OrganismFeatureService service.
// All implementations must embed UnimplementedOrganismFeatureServiceServer
// for forward compatibility
type OrganismFeatureServiceServer interface {
	// Link a feature annotation to an organism
	LinkFeatureToOrganism(context.Context, *OrganismFeatureLink) (*emptypb.Empty, error)
	// Get organism for a feature
	GetFeatureOrganism(context.Context, *FeatureAnnotationId) (*organism.Organism, error)
	// Update feature's organism link
	UpdateFeatureOrganism(context.Context, *OrganismFeatureUpdate) (*emptypb.Empty, error)
	// Remove feature's organism link
	RemoveFeatureOrganism(context.Context, *FeatureAnnotationId) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrganismFeatureServiceServer()
}

// UnimplementedOrganismFeatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganismFeatureServiceServer struct {
}

func (UnimplementedOrganismFeatureServiceServer) LinkFeatureToOrganism(context.Context, *OrganismFeatureLink) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkFeatureToOrganism not implemented")
}
func (UnimplementedOrganismFeatureServiceServer) GetFeatureOrganism(context.Context, *FeatureAnnotationId) (*organism.Organism, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureOrganism not implemented")
}
func (UnimplementedOrganismFeatureServiceServer) UpdateFeatureOrganism(context.Context, *OrganismFeatureUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureOrganism not implemented")
}
func (UnimplementedOrganismFeatureServiceServer) RemoveFeatureOrganism(context.Context, *FeatureAnnotationId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeatureOrganism not implemented")
}
func (UnimplementedOrganismFeatureServiceServer) mustEmbedUnimplementedOrganismFeatureServiceServer() {
}

// UnsafeOrganismFeatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganismFeatureServiceServer will
// result in compilation errors.
type UnsafeOrganismFeatureServiceServer interface {
	mustEmbedUnimplementedOrganismFeatureServiceServer()
}

func RegisterOrganismFeatureServiceServer(s grpc.ServiceRegistrar, srv OrganismFeatureServiceServer) {
	s.RegisterService(&OrganismFeatureService_ServiceDesc, srv)
}

func _OrganismFeatureService_LinkFeatureToOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismFeatureLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismFeatureServiceServer).LinkFeatureToOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismFeatureService_LinkFeatureToOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismFeatureServiceServer).LinkFeatureToOrganism(ctx, req.(*OrganismFeatureLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismFeatureService_GetFeatureOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureAnnotationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismFeatureServiceServer).GetFeatureOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismFeatureService_GetFeatureOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismFeatureServiceServer).GetFeatureOrganism(ctx, req.(*FeatureAnnotationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismFeatureService_UpdateFeatureOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismFeatureUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismFeatureServiceServer).UpdateFeatureOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismFeatureService_UpdateFeatureOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismFeatureServiceServer).UpdateFeatureOrganism(ctx, req.(*OrganismFeatureUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismFeatureService_RemoveFeatureOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureAnnotationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismFeatureServiceServer).RemoveFeatureOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismFeatureService_RemoveFeatureOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismFeatureServiceServer).RemoveFeatureOrganism(ctx, req.(*FeatureAnnotationId))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganismFeatureService_ServiceDesc is the grpc.ServiceDesc for OrganismFeatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganismFeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.feature_annotation.OrganismFeatureService",
	HandlerType: (*OrganismFeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinkFeatureToOrganism",
			Handler:    _OrganismFeatureService_LinkFeatureToOrganism_Handler,
		},
		{
			MethodName: "GetFeatureOrganism",
			Handler:    _OrganismFeatureService_GetFeatureOrganism_Handler,
		},
		{
			MethodName: "UpdateFeatureOrganism",
			Handler:    _OrganismFeatureService_UpdateFeatureOrganism_Handler,
		},
		{
			MethodName: "RemoveFeatureOrganism",
			Handler:    _OrganismFeatureService_RemoveFeatureOrganism_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictybase/feature_annotation/feature_annotation_organism.proto",
}
