// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dictybase/organism/organism.proto

package organism

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganismService_CreateOrganism_FullMethodName = "/dictybase.organism.OrganismService/CreateOrganism"
	OrganismService_GetOrganism_FullMethodName    = "/dictybase.organism.OrganismService/GetOrganism"
	OrganismService_UpdateOrganism_FullMethodName = "/dictybase.organism.OrganismService/UpdateOrganism"
	OrganismService_DeleteOrganism_FullMethodName = "/dictybase.organism.OrganismService/DeleteOrganism"
	OrganismService_ListOrganisms_FullMethodName  = "/dictybase.organism.OrganismService/ListOrganisms"
)

// OrganismServiceClient is the client API for OrganismService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganismServiceClient interface {
	// Create a new organism
	CreateOrganism(ctx context.Context, in *NewOrganism, opts ...grpc.CallOption) (*Organism, error)
	// Retrieve an organism by ID
	GetOrganism(ctx context.Context, in *OrganismId, opts ...grpc.CallOption) (*Organism, error)
	// Update an existing organism
	UpdateOrganism(ctx context.Context, in *OrganismUpdate, opts ...grpc.CallOption) (*Organism, error)
	// Delete an organism
	DeleteOrganism(ctx context.Context, in *DeleteOrganismRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all organisms
	ListOrganisms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganismCollection, error)
}

type organismServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganismServiceClient(cc grpc.ClientConnInterface) OrganismServiceClient {
	return &organismServiceClient{cc}
}

func (c *organismServiceClient) CreateOrganism(ctx context.Context, in *NewOrganism, opts ...grpc.CallOption) (*Organism, error) {
	out := new(Organism)
	err := c.cc.Invoke(ctx, OrganismService_CreateOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismServiceClient) GetOrganism(ctx context.Context, in *OrganismId, opts ...grpc.CallOption) (*Organism, error) {
	out := new(Organism)
	err := c.cc.Invoke(ctx, OrganismService_GetOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismServiceClient) UpdateOrganism(ctx context.Context, in *OrganismUpdate, opts ...grpc.CallOption) (*Organism, error) {
	out := new(Organism)
	err := c.cc.Invoke(ctx, OrganismService_UpdateOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismServiceClient) DeleteOrganism(ctx context.Context, in *DeleteOrganismRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrganismService_DeleteOrganism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismServiceClient) ListOrganisms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganismCollection, error) {
	out := new(OrganismCollection)
	err := c.cc.Invoke(ctx, OrganismService_ListOrganisms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganismServiceServer is the server API for OrganismService service.
// All implementations must embed UnimplementedOrganismServiceServer
// for forward compatibility
type OrganismServiceServer interface {
	// Create a new organism
	CreateOrganism(context.Context, *NewOrganism) (*Organism, error)
	// Retrieve an organism by ID
	GetOrganism(context.Context, *OrganismId) (*Organism, error)
	// Update an existing organism
	UpdateOrganism(context.Context, *OrganismUpdate) (*Organism, error)
	// Delete an organism
	DeleteOrganism(context.Context, *DeleteOrganismRequest) (*emptypb.Empty, error)
	// List all organisms
	ListOrganisms(context.Context, *emptypb.Empty) (*OrganismCollection, error)
	mustEmbedUnimplementedOrganismServiceServer()
}

// UnimplementedOrganismServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganismServiceServer struct {
}

func (UnimplementedOrganismServiceServer) CreateOrganism(context.Context, *NewOrganism) (*Organism, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganism not implemented")
}
func (UnimplementedOrganismServiceServer) GetOrganism(context.Context, *OrganismId) (*Organism, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganism not implemented")
}
func (UnimplementedOrganismServiceServer) UpdateOrganism(context.Context, *OrganismUpdate) (*Organism, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganism not implemented")
}
func (UnimplementedOrganismServiceServer) DeleteOrganism(context.Context, *DeleteOrganismRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganism not implemented")
}
func (UnimplementedOrganismServiceServer) ListOrganisms(context.Context, *emptypb.Empty) (*OrganismCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganisms not implemented")
}
func (UnimplementedOrganismServiceServer) mustEmbedUnimplementedOrganismServiceServer() {}

// UnsafeOrganismServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganismServiceServer will
// result in compilation errors.
type UnsafeOrganismServiceServer interface {
	mustEmbedUnimplementedOrganismServiceServer()
}

func RegisterOrganismServiceServer(s grpc.ServiceRegistrar, srv OrganismServiceServer) {
	s.RegisterService(&OrganismService_ServiceDesc, srv)
}

func _OrganismService_CreateOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrganism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismServiceServer).CreateOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismService_CreateOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismServiceServer).CreateOrganism(ctx, req.(*NewOrganism))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismService_GetOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismServiceServer).GetOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismService_GetOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismServiceServer).GetOrganism(ctx, req.(*OrganismId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismService_UpdateOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismServiceServer).UpdateOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismService_UpdateOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismServiceServer).UpdateOrganism(ctx, req.(*OrganismUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismService_DeleteOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganismRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismServiceServer).DeleteOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismService_DeleteOrganism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismServiceServer).DeleteOrganism(ctx, req.(*DeleteOrganismRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganismService_ListOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismServiceServer).ListOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganismService_ListOrganisms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismServiceServer).ListOrganisms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganismService_ServiceDesc is the grpc.ServiceDesc for OrganismService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganismService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.organism.OrganismService",
	HandlerType: (*OrganismServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganism",
			Handler:    _OrganismService_CreateOrganism_Handler,
		},
		{
			MethodName: "GetOrganism",
			Handler:    _OrganismService_GetOrganism_Handler,
		},
		{
			MethodName: "UpdateOrganism",
			Handler:    _OrganismService_UpdateOrganism_Handler,
		},
		{
			MethodName: "DeleteOrganism",
			Handler:    _OrganismService_DeleteOrganism_Handler,
		},
		{
			MethodName: "ListOrganisms",
			Handler:    _OrganismService_ListOrganisms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictybase/organism/organism.proto",
}
