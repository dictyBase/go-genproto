// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: dictybase/organism/organism.proto

package organism

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Organism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes *OrganismAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// email id of the user who created the content
	CreatedBy string `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// email id of the user who updated the content
	UpdatedBy string                 `protobuf:"bytes,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Unique identifier for the organism
	OrganismId int64 `protobuf:"varint,6,opt,name=organism_id,json=organismId,proto3" json:"organism_id,omitempty"`
}

func (x *Organism) Reset() {
	*x = Organism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism) ProtoMessage() {}

func (x *Organism) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism.ProtoReflect.Descriptor instead.
func (*Organism) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{0}
}

func (x *Organism) GetAttributes() *OrganismAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Organism) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Organism) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Organism) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Organism) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Organism) GetOrganismId() int64 {
	if x != nil {
		return x.OrganismId
	}
	return 0
}

type OrganismAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abbreviated name of the organism
	Abbreviation string `protobuf:"bytes,1,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	// Common name of the organism
	CommonName string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Genus name
	Genus string `protobuf:"bytes,3,opt,name=genus,proto3" json:"genus,omitempty"`
	// Species name
	Species string `protobuf:"bytes,4,opt,name=species,proto3" json:"species,omitempty"`
}

func (x *OrganismAttributes) Reset() {
	*x = OrganismAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganismAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganismAttributes) ProtoMessage() {}

func (x *OrganismAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganismAttributes.ProtoReflect.Descriptor instead.
func (*OrganismAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{1}
}

func (x *OrganismAttributes) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *OrganismAttributes) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *OrganismAttributes) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *OrganismAttributes) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

type OrganismCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection of organisms
	Data []*Organism `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OrganismCollection) Reset() {
	*x = OrganismCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganismCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganismCollection) ProtoMessage() {}

func (x *OrganismCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganismCollection.ProtoReflect.Descriptor instead.
func (*OrganismCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{2}
}

func (x *OrganismCollection) GetData() []*Organism {
	if x != nil {
		return x.Data
	}
	return nil
}

type NewOrganism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes *OrganismAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// email id of the user who created the content
	CreatedBy string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *NewOrganism) Reset() {
	*x = NewOrganism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrganism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrganism) ProtoMessage() {}

func (x *NewOrganism) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrganism.ProtoReflect.Descriptor instead.
func (*NewOrganism) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{3}
}

func (x *NewOrganism) GetAttributes() *OrganismAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *NewOrganism) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NewOrganism) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type OrganismUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the organism
	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *OrganismAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// email id of the user who updated the content
	UpdatedBy string `protobuf:"bytes,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *OrganismUpdate) Reset() {
	*x = OrganismUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganismUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganismUpdate) ProtoMessage() {}

func (x *OrganismUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganismUpdate.ProtoReflect.Descriptor instead.
func (*OrganismUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{4}
}

func (x *OrganismUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrganismUpdate) GetAttributes() *OrganismAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *OrganismUpdate) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type OrganismId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the organism
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrganismId) Reset() {
	*x = OrganismId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganismId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganismId) ProtoMessage() {}

func (x *OrganismId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganismId.ProtoReflect.Descriptor instead.
func (*OrganismId) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{5}
}

func (x *OrganismId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOrganismRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the organism
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteOrganismRequest) Reset() {
	*x = DeleteOrganismRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_organism_organism_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganismRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganismRequest) ProtoMessage() {}

func (x *DeleteOrganismRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_organism_organism_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganismRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganismRequest) Descriptor() ([]byte, []int) {
	return file_dictybase_organism_organism_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteOrganismRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_dictybase_organism_organism_proto protoreflect.FileDescriptor

var file_dictybase_organism_organism_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xae, 0x03, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12,
	0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d,
	0xba, 0x01, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x62, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xba, 0x48,
	0x40, 0xba, 0x01, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0xd0, 0x01,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x22,
	0x46, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0xba, 0x01, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x24, 0x0a,
	0x0a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x32, 0xb3, 0x03, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e,
	0x4e, 0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x1a, 0x1c, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x22, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x1c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x78, 0x0a, 0x15, 0x6f, 0x72,
	0x67, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x3b, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x08, 0x44, 0x49, 0x43, 0x54,
	0x59, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dictybase_organism_organism_proto_rawDescOnce sync.Once
	file_dictybase_organism_organism_proto_rawDescData = file_dictybase_organism_organism_proto_rawDesc
)

func file_dictybase_organism_organism_proto_rawDescGZIP() []byte {
	file_dictybase_organism_organism_proto_rawDescOnce.Do(func() {
		file_dictybase_organism_organism_proto_rawDescData = protoimpl.X.CompressGZIP(file_dictybase_organism_organism_proto_rawDescData)
	})
	return file_dictybase_organism_organism_proto_rawDescData
}

var file_dictybase_organism_organism_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dictybase_organism_organism_proto_goTypes = []interface{}{
	(*Organism)(nil),              // 0: dictybase.organism.Organism
	(*OrganismAttributes)(nil),    // 1: dictybase.organism.OrganismAttributes
	(*OrganismCollection)(nil),    // 2: dictybase.organism.OrganismCollection
	(*NewOrganism)(nil),           // 3: dictybase.organism.NewOrganism
	(*OrganismUpdate)(nil),        // 4: dictybase.organism.OrganismUpdate
	(*OrganismId)(nil),            // 5: dictybase.organism.OrganismId
	(*DeleteOrganismRequest)(nil), // 6: dictybase.organism.DeleteOrganismRequest
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 8: google.protobuf.Empty
}
var file_dictybase_organism_organism_proto_depIdxs = []int32{
	1,  // 0: dictybase.organism.Organism.attributes:type_name -> dictybase.organism.OrganismAttributes
	7,  // 1: dictybase.organism.Organism.created_at:type_name -> google.protobuf.Timestamp
	7,  // 2: dictybase.organism.Organism.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 3: dictybase.organism.OrganismCollection.data:type_name -> dictybase.organism.Organism
	1,  // 4: dictybase.organism.NewOrganism.attributes:type_name -> dictybase.organism.OrganismAttributes
	7,  // 5: dictybase.organism.NewOrganism.created_at:type_name -> google.protobuf.Timestamp
	1,  // 6: dictybase.organism.OrganismUpdate.attributes:type_name -> dictybase.organism.OrganismAttributes
	3,  // 7: dictybase.organism.OrganismService.CreateOrganism:input_type -> dictybase.organism.NewOrganism
	5,  // 8: dictybase.organism.OrganismService.GetOrganism:input_type -> dictybase.organism.OrganismId
	4,  // 9: dictybase.organism.OrganismService.UpdateOrganism:input_type -> dictybase.organism.OrganismUpdate
	6,  // 10: dictybase.organism.OrganismService.DeleteOrganism:input_type -> dictybase.organism.DeleteOrganismRequest
	8,  // 11: dictybase.organism.OrganismService.ListOrganisms:input_type -> google.protobuf.Empty
	0,  // 12: dictybase.organism.OrganismService.CreateOrganism:output_type -> dictybase.organism.Organism
	0,  // 13: dictybase.organism.OrganismService.GetOrganism:output_type -> dictybase.organism.Organism
	0,  // 14: dictybase.organism.OrganismService.UpdateOrganism:output_type -> dictybase.organism.Organism
	8,  // 15: dictybase.organism.OrganismService.DeleteOrganism:output_type -> google.protobuf.Empty
	2,  // 16: dictybase.organism.OrganismService.ListOrganisms:output_type -> dictybase.organism.OrganismCollection
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_dictybase_organism_organism_proto_init() }
func file_dictybase_organism_organism_proto_init() {
	if File_dictybase_organism_organism_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dictybase_organism_organism_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_organism_organism_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganismAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_organism_organism_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganismCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_organism_organism_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrganism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_organism_organism_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganismUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_organism_organism_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganismId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_organism_organism_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganismRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dictybase_organism_organism_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dictybase_organism_organism_proto_goTypes,
		DependencyIndexes: file_dictybase_organism_organism_proto_depIdxs,
		MessageInfos:      file_dictybase_organism_organism_proto_msgTypes,
	}.Build()
	File_dictybase_organism_organism_proto = out.File
	file_dictybase_organism_organism_proto_rawDesc = nil
	file_dictybase_organism_organism_proto_goTypes = nil
	file_dictybase_organism_organism_proto_depIdxs = nil
}
