// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stock.proto

package stock

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StockId struct {
	// Unique identifier for the stock
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockId) Reset()         { *m = StockId{} }
func (m *StockId) String() string { return proto.CompactTextString(m) }
func (*StockId) ProtoMessage()    {}
func (*StockId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{0}
}

func (m *StockId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockId.Unmarshal(m, b)
}
func (m *StockId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockId.Marshal(b, m, deterministic)
}
func (m *StockId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockId.Merge(m, src)
}
func (m *StockId) XXX_Size() int {
	return xxx_messageInfo_StockId.Size(m)
}
func (m *StockId) XXX_DiscardUnknown() {
	xxx_messageInfo_StockId.DiscardUnknown(m)
}

var xxx_messageInfo_StockId proto.InternalMessageInfo

func (m *StockId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Definition of an individual stock
type Stock struct {
	Data                 *Stock_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Stock) Reset()         { *m = Stock{} }
func (m *Stock) String() string { return proto.CompactTextString(m) }
func (*Stock) ProtoMessage()    {}
func (*Stock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{1}
}

func (m *Stock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stock.Unmarshal(m, b)
}
func (m *Stock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stock.Marshal(b, m, deterministic)
}
func (m *Stock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stock.Merge(m, src)
}
func (m *Stock) XXX_Size() int {
	return xxx_messageInfo_Stock.Size(m)
}
func (m *Stock) XXX_DiscardUnknown() {
	xxx_messageInfo_Stock.DiscardUnknown(m)
}

var xxx_messageInfo_Stock proto.InternalMessageInfo

func (m *Stock) GetData() *Stock_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Stock_Data struct {
	// Resource name ("strain", "plasmid", etc)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the stock
	Id                   string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *StockAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Stock_Data) Reset()         { *m = Stock_Data{} }
func (m *Stock_Data) String() string { return proto.CompactTextString(m) }
func (*Stock_Data) ProtoMessage()    {}
func (*Stock_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{1, 0}
}

func (m *Stock_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stock_Data.Unmarshal(m, b)
}
func (m *Stock_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stock_Data.Marshal(b, m, deterministic)
}
func (m *Stock_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stock_Data.Merge(m, src)
}
func (m *Stock_Data) XXX_Size() int {
	return xxx_messageInfo_Stock_Data.Size(m)
}
func (m *Stock_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Stock_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Stock_Data proto.InternalMessageInfo

func (m *Stock_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Stock_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stock_Data) GetAttributes() *StockAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition of various stock attributes
type StockAttributes struct {
	// Timestamp for creation
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,8,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,9,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications         []string           `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	StrainProperties     *StrainProperties  `protobuf:"bytes,11,opt,name=strain_properties,json=strainProperties,proto3" json:"strain_properties,omitempty"`
	PlasmidProperties    *PlasmidProperties `protobuf:"bytes,12,opt,name=plasmid_properties,json=plasmidProperties,proto3" json:"plasmid_properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StockAttributes) Reset()         { *m = StockAttributes{} }
func (m *StockAttributes) String() string { return proto.CompactTextString(m) }
func (*StockAttributes) ProtoMessage()    {}
func (*StockAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{2}
}

func (m *StockAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockAttributes.Unmarshal(m, b)
}
func (m *StockAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockAttributes.Marshal(b, m, deterministic)
}
func (m *StockAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockAttributes.Merge(m, src)
}
func (m *StockAttributes) XXX_Size() int {
	return xxx_messageInfo_StockAttributes.Size(m)
}
func (m *StockAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StockAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StockAttributes proto.InternalMessageInfo

func (m *StockAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StockAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *StockAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *StockAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *StockAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *StockAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *StockAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *StockAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *StockAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *StockAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *StockAttributes) GetStrainProperties() *StrainProperties {
	if m != nil {
		return m.StrainProperties
	}
	return nil
}

func (m *StockAttributes) GetPlasmidProperties() *PlasmidProperties {
	if m != nil {
		return m.PlasmidProperties
	}
	return nil
}

type StrainProperties struct {
	// Unambiguous name for the strain
	SystematicName string `protobuf:"bytes,1,opt,name=systematic_name,json=systematicName,proto3" json:"systematic_name,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,4,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names                []string `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrainProperties) Reset()         { *m = StrainProperties{} }
func (m *StrainProperties) String() string { return proto.CompactTextString(m) }
func (*StrainProperties) ProtoMessage()    {}
func (*StrainProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{3}
}

func (m *StrainProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainProperties.Unmarshal(m, b)
}
func (m *StrainProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainProperties.Marshal(b, m, deterministic)
}
func (m *StrainProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainProperties.Merge(m, src)
}
func (m *StrainProperties) XXX_Size() int {
	return xxx_messageInfo_StrainProperties.Size(m)
}
func (m *StrainProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainProperties.DiscardUnknown(m)
}

var xxx_messageInfo_StrainProperties proto.InternalMessageInfo

func (m *StrainProperties) GetSystematicName() string {
	if m != nil {
		return m.SystematicName
	}
	return ""
}

func (m *StrainProperties) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StrainProperties) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *StrainProperties) GetPlasmid() string {
	if m != nil {
		return m.Plasmid
	}
	return ""
}

func (m *StrainProperties) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *StrainProperties) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type PlasmidProperties struct {
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,1,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence             string   `protobuf:"bytes,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlasmidProperties) Reset()         { *m = PlasmidProperties{} }
func (m *PlasmidProperties) String() string { return proto.CompactTextString(m) }
func (*PlasmidProperties) ProtoMessage()    {}
func (*PlasmidProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{4}
}

func (m *PlasmidProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidProperties.Unmarshal(m, b)
}
func (m *PlasmidProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidProperties.Marshal(b, m, deterministic)
}
func (m *PlasmidProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidProperties.Merge(m, src)
}
func (m *PlasmidProperties) XXX_Size() int {
	return xxx_messageInfo_PlasmidProperties.Size(m)
}
func (m *PlasmidProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidProperties.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidProperties proto.InternalMessageInfo

func (m *PlasmidProperties) GetImageMap() string {
	if m != nil {
		return m.ImageMap
	}
	return ""
}

func (m *PlasmidProperties) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

// Definition for creating a new stock
type NewStock struct {
	Data                 *NewStock_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NewStock) Reset()         { *m = NewStock{} }
func (m *NewStock) String() string { return proto.CompactTextString(m) }
func (*NewStock) ProtoMessage()    {}
func (*NewStock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{5}
}

func (m *NewStock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStock.Unmarshal(m, b)
}
func (m *NewStock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStock.Marshal(b, m, deterministic)
}
func (m *NewStock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStock.Merge(m, src)
}
func (m *NewStock) XXX_Size() int {
	return xxx_messageInfo_NewStock.Size(m)
}
func (m *NewStock) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStock.DiscardUnknown(m)
}

var xxx_messageInfo_NewStock proto.InternalMessageInfo

func (m *NewStock) GetData() *NewStock_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type NewStock_Data struct {
	// Resource name, i.e. "strain"
	Type                 string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes           *NewStockAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NewStock_Data) Reset()         { *m = NewStock_Data{} }
func (m *NewStock_Data) String() string { return proto.CompactTextString(m) }
func (*NewStock_Data) ProtoMessage()    {}
func (*NewStock_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{5, 0}
}

func (m *NewStock_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStock_Data.Unmarshal(m, b)
}
func (m *NewStock_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStock_Data.Marshal(b, m, deterministic)
}
func (m *NewStock_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStock_Data.Merge(m, src)
}
func (m *NewStock_Data) XXX_Size() int {
	return xxx_messageInfo_NewStock_Data.Size(m)
}
func (m *NewStock_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStock_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NewStock_Data proto.InternalMessageInfo

func (m *NewStock_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NewStock_Data) GetAttributes() *NewStockAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Defines attributes for creating a new stock
type NewStockAttributes struct {
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,4,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications         []string           `protobuf:"bytes,8,rep,name=publications,proto3" json:"publications,omitempty"`
	StrainProperties     *StrainProperties  `protobuf:"bytes,9,opt,name=strain_properties,json=strainProperties,proto3" json:"strain_properties,omitempty"`
	PlasmidProperties    *PlasmidProperties `protobuf:"bytes,10,opt,name=plasmid_properties,json=plasmidProperties,proto3" json:"plasmid_properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NewStockAttributes) Reset()         { *m = NewStockAttributes{} }
func (m *NewStockAttributes) String() string { return proto.CompactTextString(m) }
func (*NewStockAttributes) ProtoMessage()    {}
func (*NewStockAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{6}
}

func (m *NewStockAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStockAttributes.Unmarshal(m, b)
}
func (m *NewStockAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStockAttributes.Marshal(b, m, deterministic)
}
func (m *NewStockAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStockAttributes.Merge(m, src)
}
func (m *NewStockAttributes) XXX_Size() int {
	return xxx_messageInfo_NewStockAttributes.Size(m)
}
func (m *NewStockAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStockAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NewStockAttributes proto.InternalMessageInfo

func (m *NewStockAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *NewStockAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *NewStockAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *NewStockAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *NewStockAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *NewStockAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *NewStockAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *NewStockAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *NewStockAttributes) GetStrainProperties() *StrainProperties {
	if m != nil {
		return m.StrainProperties
	}
	return nil
}

func (m *NewStockAttributes) GetPlasmidProperties() *PlasmidProperties {
	if m != nil {
		return m.PlasmidProperties
	}
	return nil
}

// Definition for creating a new stock
type StockUpdate struct {
	Data                 *StockUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StockUpdate) Reset()         { *m = StockUpdate{} }
func (m *StockUpdate) String() string { return proto.CompactTextString(m) }
func (*StockUpdate) ProtoMessage()    {}
func (*StockUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{7}
}

func (m *StockUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockUpdate.Unmarshal(m, b)
}
func (m *StockUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockUpdate.Marshal(b, m, deterministic)
}
func (m *StockUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockUpdate.Merge(m, src)
}
func (m *StockUpdate) XXX_Size() int {
	return xxx_messageInfo_StockUpdate.Size(m)
}
func (m *StockUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StockUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StockUpdate proto.InternalMessageInfo

func (m *StockUpdate) GetData() *StockUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type StockUpdate_Data struct {
	// Resource name, i.e. "strain"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique ID for stock
	Id                   string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *StockUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StockUpdate_Data) Reset()         { *m = StockUpdate_Data{} }
func (m *StockUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*StockUpdate_Data) ProtoMessage()    {}
func (*StockUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{7, 0}
}

func (m *StockUpdate_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockUpdate_Data.Unmarshal(m, b)
}
func (m *StockUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockUpdate_Data.Marshal(b, m, deterministic)
}
func (m *StockUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockUpdate_Data.Merge(m, src)
}
func (m *StockUpdate_Data) XXX_Size() int {
	return xxx_messageInfo_StockUpdate_Data.Size(m)
}
func (m *StockUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_StockUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_StockUpdate_Data proto.InternalMessageInfo

func (m *StockUpdate_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StockUpdate_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StockUpdate_Data) GetAttributes() *StockUpdateAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Defines attributes for updating a stock
type StockUpdateAttributes struct {
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,1,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,3,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications         []string                `protobuf:"bytes,7,rep,name=publications,proto3" json:"publications,omitempty"`
	StrainProperties     *StrainUpdateProperties `protobuf:"bytes,8,opt,name=strain_properties,json=strainProperties,proto3" json:"strain_properties,omitempty"`
	PlasmidProperties    *PlasmidProperties      `protobuf:"bytes,9,opt,name=plasmid_properties,json=plasmidProperties,proto3" json:"plasmid_properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StockUpdateAttributes) Reset()         { *m = StockUpdateAttributes{} }
func (m *StockUpdateAttributes) String() string { return proto.CompactTextString(m) }
func (*StockUpdateAttributes) ProtoMessage()    {}
func (*StockUpdateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{8}
}

func (m *StockUpdateAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockUpdateAttributes.Unmarshal(m, b)
}
func (m *StockUpdateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockUpdateAttributes.Marshal(b, m, deterministic)
}
func (m *StockUpdateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockUpdateAttributes.Merge(m, src)
}
func (m *StockUpdateAttributes) XXX_Size() int {
	return xxx_messageInfo_StockUpdateAttributes.Size(m)
}
func (m *StockUpdateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StockUpdateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StockUpdateAttributes proto.InternalMessageInfo

func (m *StockUpdateAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *StockUpdateAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *StockUpdateAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *StockUpdateAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *StockUpdateAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *StockUpdateAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *StockUpdateAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *StockUpdateAttributes) GetStrainProperties() *StrainUpdateProperties {
	if m != nil {
		return m.StrainProperties
	}
	return nil
}

func (m *StockUpdateAttributes) GetPlasmidProperties() *PlasmidProperties {
	if m != nil {
		return m.PlasmidProperties
	}
	return nil
}

type StrainUpdateProperties struct {
	// Unambiguous name for the strain
	SystematicName string `protobuf:"bytes,1,opt,name=systematic_name,json=systematicName,proto3" json:"systematic_name,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,4,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names                []string `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrainUpdateProperties) Reset()         { *m = StrainUpdateProperties{} }
func (m *StrainUpdateProperties) String() string { return proto.CompactTextString(m) }
func (*StrainUpdateProperties) ProtoMessage()    {}
func (*StrainUpdateProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{9}
}

func (m *StrainUpdateProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainUpdateProperties.Unmarshal(m, b)
}
func (m *StrainUpdateProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainUpdateProperties.Marshal(b, m, deterministic)
}
func (m *StrainUpdateProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainUpdateProperties.Merge(m, src)
}
func (m *StrainUpdateProperties) XXX_Size() int {
	return xxx_messageInfo_StrainUpdateProperties.Size(m)
}
func (m *StrainUpdateProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainUpdateProperties.DiscardUnknown(m)
}

var xxx_messageInfo_StrainUpdateProperties proto.InternalMessageInfo

func (m *StrainUpdateProperties) GetSystematicName() string {
	if m != nil {
		return m.SystematicName
	}
	return ""
}

func (m *StrainUpdateProperties) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StrainUpdateProperties) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *StrainUpdateProperties) GetPlasmid() string {
	if m != nil {
		return m.Plasmid
	}
	return ""
}

func (m *StrainUpdateProperties) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *StrainUpdateProperties) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// List of stocks
type StockCollection struct {
	Data                 []*StockCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta                 *Meta                   `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StockCollection) Reset()         { *m = StockCollection{} }
func (m *StockCollection) String() string { return proto.CompactTextString(m) }
func (*StockCollection) ProtoMessage()    {}
func (*StockCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{10}
}

func (m *StockCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockCollection.Unmarshal(m, b)
}
func (m *StockCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockCollection.Marshal(b, m, deterministic)
}
func (m *StockCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockCollection.Merge(m, src)
}
func (m *StockCollection) XXX_Size() int {
	return xxx_messageInfo_StockCollection.Size(m)
}
func (m *StockCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_StockCollection.DiscardUnknown(m)
}

var xxx_messageInfo_StockCollection proto.InternalMessageInfo

func (m *StockCollection) GetData() []*StockCollection_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StockCollection) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type StockCollection_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the stock
	Id                   string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *StockAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StockCollection_Data) Reset()         { *m = StockCollection_Data{} }
func (m *StockCollection_Data) String() string { return proto.CompactTextString(m) }
func (*StockCollection_Data) ProtoMessage()    {}
func (*StockCollection_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{10, 0}
}

func (m *StockCollection_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockCollection_Data.Unmarshal(m, b)
}
func (m *StockCollection_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockCollection_Data.Marshal(b, m, deterministic)
}
func (m *StockCollection_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockCollection_Data.Merge(m, src)
}
func (m *StockCollection_Data) XXX_Size() int {
	return xxx_messageInfo_StockCollection_Data.Size(m)
}
func (m *StockCollection_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_StockCollection_Data.DiscardUnknown(m)
}

var xxx_messageInfo_StockCollection_Data proto.InternalMessageInfo

func (m *StockCollection_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StockCollection_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StockCollection_Data) GetAttributes() *StockAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// StockParameters defines fields for manipulating output of Stock collection
type StockParameters struct {
	// A unique pointer to the next set of result in the list
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data return by the collection. To use
	// it, supply one or multiple allowed fields to filter followed
	// by a filter expression. It uses the following syntax...
	//        field_name operator expression
	//
	// The following fields of `StockAttributes` definition are allowed to
	// be used for filtering
	//   * stock_type         - Type of stock (string)
	//   * depositor          - Depositor of the stock (string)
	//   * parent             - Parental strain (string) (currently not implemented)
	//   * plasmid            - Related plasmid for the strain (string)
	//   * species            - The species of the strain (string)
	//   * systematic_name    - Unambiguous name for the strain (string)
	//   * summary            - Summary of the stock (string)
	//   * name               - Name used for strain (string), searches in the "names" attribute
	//   * created_at         - Date the stock was created (number), can be in the
	//                          following formats:
	//                          YYYY-MM-DD, YYYY-MM, YYYY
	//   * updated_at         - Date the stock was updated (number), can be in the
	//                          following formats:
	//                          YYYY-MM-DD, YYYY-MM, YYYY
	//
	// field_name - Any one of the allowed field_name of the `StockAttributes` definition.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded for http request.
	//
	//        Operators for strings
	//              =~   Contains substring
	//              !~   Not contains substring
	//              ===  Equals
	//              !=   Not equals
	//
	//        Operators for number
	//              ==  Equals
	//              >   Greater than
	//              <   Less than
	//              <=  Less than equal to
	//              >=  Greater than equal to
	//
	//        Operators for dates
	//              $==  Equals
	//              $>   Greater than
	//              $<   Less than
	//              $<=  Less than equal to
	//              $>=  Greater than equal to
	//
	//        Operators for items in arrays
	//              @=~   Contains substring
	//              @!~   Not contains substring (not implemented yet)
	//              @==   Equals
	//              @!=   Not equals
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded for http request.
	//
	//           filter: "created_at$>=2018-12-01"
	//           filter: "depositor===Costanza"
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	//
	//           filter: "depositor===Benes;created_at$>=2018-12-01"
	//
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockParameters) Reset()         { *m = StockParameters{} }
func (m *StockParameters) String() string { return proto.CompactTextString(m) }
func (*StockParameters) ProtoMessage()    {}
func (*StockParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{11}
}

func (m *StockParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockParameters.Unmarshal(m, b)
}
func (m *StockParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockParameters.Marshal(b, m, deterministic)
}
func (m *StockParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockParameters.Merge(m, src)
}
func (m *StockParameters) XXX_Size() int {
	return xxx_messageInfo_StockParameters.Size(m)
}
func (m *StockParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_StockParameters.DiscardUnknown(m)
}

var xxx_messageInfo_StockParameters proto.InternalMessageInfo

func (m *StockParameters) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *StockParameters) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *StockParameters) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// Metadata definition for traversing the collection
type Meta struct {
	// A unique pointer to the next set of result in the collection. Set the
	// cursor value parameter to the value of next_cursor to retrieve the next
	// set of collection using the same method
	NextCursor int64 `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Total number of records in the collection.
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{12}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetNextCursor() int64 {
	if m != nil {
		return m.NextCursor
	}
	return 0
}

func (m *Meta) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Meta) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*StockId)(nil), "dictybase.stock.StockId")
	proto.RegisterType((*Stock)(nil), "dictybase.stock.Stock")
	proto.RegisterType((*Stock_Data)(nil), "dictybase.stock.Stock.Data")
	proto.RegisterType((*StockAttributes)(nil), "dictybase.stock.StockAttributes")
	proto.RegisterType((*StrainProperties)(nil), "dictybase.stock.StrainProperties")
	proto.RegisterType((*PlasmidProperties)(nil), "dictybase.stock.PlasmidProperties")
	proto.RegisterType((*NewStock)(nil), "dictybase.stock.NewStock")
	proto.RegisterType((*NewStock_Data)(nil), "dictybase.stock.NewStock.Data")
	proto.RegisterType((*NewStockAttributes)(nil), "dictybase.stock.NewStockAttributes")
	proto.RegisterType((*StockUpdate)(nil), "dictybase.stock.StockUpdate")
	proto.RegisterType((*StockUpdate_Data)(nil), "dictybase.stock.StockUpdate.Data")
	proto.RegisterType((*StockUpdateAttributes)(nil), "dictybase.stock.StockUpdateAttributes")
	proto.RegisterType((*StrainUpdateProperties)(nil), "dictybase.stock.StrainUpdateProperties")
	proto.RegisterType((*StockCollection)(nil), "dictybase.stock.StockCollection")
	proto.RegisterType((*StockCollection_Data)(nil), "dictybase.stock.StockCollection.Data")
	proto.RegisterType((*StockParameters)(nil), "dictybase.stock.StockParameters")
	proto.RegisterType((*Meta)(nil), "dictybase.stock.Meta")
}

func init() { proto.RegisterFile("stock.proto", fileDescriptor_c87a7814fbd674bd) }

var fileDescriptor_c87a7814fbd674bd = []byte{
	// 1117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xf3, 0xaf, 0xc9, 0x4b, 0xb5, 0x6d, 0x87, 0x6e, 0x65, 0xd2, 0x8a, 0xa6, 0x86, 0x65,
	0xcb, 0x61, 0x13, 0x51, 0x24, 0x90, 0x16, 0x81, 0x48, 0xba, 0x0b, 0xaa, 0xb4, 0x5b, 0x15, 0xb7,
	0x88, 0x3f, 0x97, 0x68, 0x6c, 0xbf, 0x86, 0xd1, 0xda, 0xb1, 0xf1, 0x4c, 0xda, 0x0d, 0x1f, 0x86,
	0x03, 0x17, 0x6e, 0xdc, 0x39, 0x71, 0xe1, 0x80, 0xc4, 0x87, 0x40, 0xe2, 0x13, 0x70, 0x41, 0xe2,
	0x88, 0x3c, 0x33, 0xce, 0x1f, 0xc7, 0x49, 0x23, 0x76, 0xb5, 0x97, 0x28, 0xef, 0xcd, 0x6f, 0xde,
	0x9b, 0x79, 0xf3, 0xfb, 0xbd, 0x19, 0x43, 0x9d, 0x8b, 0xd0, 0x7d, 0xd6, 0x8a, 0xe2, 0x50, 0x84,
	0x64, 0xd3, 0x63, 0xae, 0x18, 0x39, 0x94, 0x63, 0x4b, 0xba, 0x1b, 0xfb, 0xfd, 0x30, 0xec, 0xfb,
	0xd8, 0xa6, 0x11, 0x6b, 0xd3, 0xc1, 0x20, 0x14, 0x54, 0xb0, 0x70, 0xc0, 0x15, 0xbc, 0x71, 0xa0,
	0x47, 0xa5, 0xe5, 0x0c, 0xaf, 0xda, 0x82, 0x05, 0xc8, 0x05, 0x0d, 0x22, 0x0d, 0xd8, 0xcb, 0x02,
	0x30, 0x88, 0xc4, 0x48, 0x0f, 0xbe, 0xdf, 0x67, 0xe2, 0xdb, 0xa1, 0xd3, 0x72, 0xc3, 0xa0, 0x1d,
	0xdc, 0x30, 0xf1, 0x2c, 0xbc, 0x69, 0xf7, 0xc3, 0x07, 0x72, 0xf0, 0xc1, 0x35, 0xf5, 0x99, 0x47,
	0x45, 0x18, 0xf3, 0xf6, 0xf8, 0xaf, 0x9a, 0x67, 0x1d, 0xc2, 0xfa, 0x45, 0xb2, 0xb8, 0x53, 0x8f,
	0xec, 0x42, 0x81, 0x79, 0xa6, 0xd1, 0x34, 0x8e, 0x6a, 0xdd, 0xca, 0x5f, 0x7f, 0x1e, 0x14, 0xbe,
	0x32, 0xec, 0x02, 0xf3, 0xac, 0x9f, 0x0d, 0x28, 0x4b, 0x0c, 0xf9, 0x00, 0x4a, 0x1e, 0x15, 0x54,
	0x62, 0xea, 0xc7, 0x7b, 0xad, 0xcc, 0x06, 0x5b, 0x12, 0xd5, 0x7a, 0x44, 0x05, 0x55, 0x01, 0x9a,
	0x86, 0x2d, 0x27, 0x34, 0x7c, 0x28, 0x25, 0x5e, 0x42, 0xa0, 0x24, 0x46, 0x11, 0xaa, 0x24, 0xb6,
	0xfc, 0x4f, 0xee, 0xc8, 0xb4, 0x05, 0xe9, 0x29, 0x30, 0x8f, 0x7c, 0x02, 0x40, 0x85, 0x88, 0x99,
	0x33, 0x14, 0xc8, 0xcd, 0xa2, 0x4c, 0xd5, 0xcc, 0x4f, 0xd5, 0x19, 0xe3, 0xec, 0xa9, 0x39, 0xd6,
	0xaf, 0x25, 0xd8, 0xcc, 0x8c, 0x93, 0x0e, 0x80, 0x1b, 0x23, 0x15, 0xe8, 0xf5, 0xa8, 0xd0, 0x1b,
	0x68, 0xb4, 0x54, 0x45, 0x5b, 0x69, 0x45, 0x5b, 0x97, 0x69, 0xc9, 0xc7, 0xeb, 0xaf, 0xe9, 0x59,
	0x1d, 0x91, 0x84, 0x18, 0x46, 0x5e, 0x1a, 0xa2, 0xb0, 0x7a, 0x08, 0x3d, 0xab, 0x23, 0xc8, 0xbd,
	0xc9, 0x2a, 0x9c, 0x91, 0xdc, 0xdb, 0xa4, 0xd4, 0x69, 0xa6, 0xee, 0x28, 0x81, 0xa5, 0x99, 0x9c,
	0x91, 0x59, 0x9a, 0x85, 0xe9, 0x91, 0xee, 0x88, 0x98, 0xb0, 0xce, 0x87, 0x41, 0x40, 0xe3, 0x91,
	0x59, 0x96, 0xe5, 0x4b, 0x4d, 0xf2, 0x0e, 0x6c, 0xa1, 0xc7, 0x04, 0x75, 0x7c, 0xec, 0xa5, 0x90,
	0x8a, 0x84, 0x6c, 0xa6, 0xfe, 0x0b, 0x0d, 0xdd, 0x87, 0x9a, 0x87, 0x51, 0xc8, 0x99, 0x08, 0x63,
	0x73, 0x5d, 0x62, 0x26, 0x0e, 0xb2, 0x03, 0xe5, 0x3e, 0x0e, 0x90, 0x9b, 0xd5, 0x66, 0xf1, 0xa8,
	0x66, 0x2b, 0x23, 0x49, 0xec, 0x39, 0xcf, 0x63, 0xbc, 0xe2, 0x66, 0x4d, 0xfa, 0x53, 0x93, 0x58,
	0xb0, 0x11, 0x0d, 0x1d, 0x9f, 0xb9, 0x8a, 0xda, 0x26, 0xc8, 0xe1, 0x19, 0x1f, 0x39, 0x83, 0x6d,
	0x2e, 0x62, 0xca, 0x06, 0xbd, 0x28, 0x0e, 0x23, 0x8c, 0x05, 0x43, 0x6e, 0xd6, 0x65, 0x39, 0x0f,
	0x73, 0xce, 0x39, 0x41, 0x9e, 0x8f, 0x81, 0xf6, 0x16, 0xcf, 0x78, 0xc8, 0xe7, 0x40, 0x22, 0x9f,
	0xf2, 0x80, 0x79, 0xd3, 0x01, 0x37, 0x64, 0x40, 0x6b, 0x2e, 0xe0, 0xb9, 0x82, 0x4e, 0x45, 0xdc,
	0x8e, 0xb2, 0x2e, 0xeb, 0x0f, 0x03, 0xb6, 0xb2, 0x99, 0x49, 0x1b, 0x36, 0xf9, 0x88, 0x0b, 0x0c,
	0xa8, 0x60, 0x6e, 0x6f, 0x40, 0x03, 0xcc, 0x88, 0xe5, 0xce, 0x64, 0xf8, 0x8c, 0x06, 0x48, 0xf6,
	0xa1, 0xec, 0x53, 0x07, 0x7d, 0x45, 0xee, 0x31, 0x4c, 0x39, 0x49, 0x13, 0xd6, 0x79, 0x84, 0x2e,
	0xd3, 0x24, 0x9f, 0x8c, 0xa7, 0xee, 0xa4, 0xcc, 0x7a, 0x69, 0x8a, 0x03, 0x76, 0x6a, 0x92, 0x5d,
	0xa8, 0x44, 0x34, 0xc6, 0x81, 0xd0, 0x07, 0xaf, 0xad, 0xe4, 0xb8, 0x92, 0x75, 0x71, 0xb3, 0xa2,
	0x8e, 0x4b, 0x1a, 0xd6, 0x13, 0xd8, 0x9e, 0xdb, 0x35, 0xd9, 0x83, 0x1a, 0x0b, 0x68, 0x1f, 0x7b,
	0x01, 0x8d, 0xb4, 0x1e, 0xab, 0xd2, 0xf1, 0x94, 0x46, 0xa4, 0x01, 0x55, 0x8e, 0xdf, 0x0d, 0x71,
	0xe0, 0xa2, 0x56, 0xe6, 0xd8, 0xb6, 0x7e, 0x32, 0xa0, 0x7a, 0x86, 0x37, 0xaa, 0x23, 0x3c, 0x9c,
	0xe9, 0x08, 0x6f, 0xcc, 0x55, 0x3b, 0x05, 0xe6, 0x35, 0x85, 0xde, 0x92, 0xa6, 0x70, 0x32, 0xd3,
	0x04, 0x94, 0xd6, 0xde, 0x5c, 0x18, 0x7d, 0x41, 0x1f, 0xf8, 0xad, 0x08, 0x64, 0x1e, 0x92, 0x11,
	0xa1, 0xb1, 0x9a, 0x08, 0x0b, 0x2b, 0x88, 0xb0, 0x78, 0xbb, 0x08, 0x4b, 0xf9, 0x22, 0x1c, 0xcb,
	0xac, 0xbc, 0x40, 0x66, 0x95, 0x59, 0x99, 0xbd, 0x35, 0x27, 0xda, 0xc9, 0xd2, 0x26, 0xe2, 0xcd,
	0x8a, 0xb1, 0xba, 0xaa, 0x18, 0x6b, 0x2f, 0x5b, 0x8c, 0xf0, 0x22, 0x62, 0xfc, 0xdd, 0x80, 0xba,
	0x3c, 0xc3, 0x2f, 0x64, 0xd1, 0xc9, 0x47, 0x33, 0x9c, 0x3b, 0xcc, 0xbf, 0x1a, 0x14, 0x36, 0x8f,
	0x76, 0xdf, 0x2f, 0xa1, 0xdd, 0xee, 0xe4, 0x2e, 0x9a, 0xbe, 0x02, 0xc9, 0xa7, 0x39, 0x77, 0xd2,
	0xdb, 0xcb, 0x12, 0x2f, 0x60, 0xe4, 0x0f, 0x45, 0xb8, 0x9b, 0x8b, 0xca, 0xb0, 0xcd, 0x58, 0x81,
	0x6d, 0x85, 0xdb, 0xd9, 0x56, 0x5c, 0xa1, 0xe5, 0x97, 0x16, 0xb6, 0xfc, 0x15, 0xb9, 0x98, 0x65,
	0xd9, 0x7a, 0x0e, 0xcb, 0x2e, 0xf3, 0x58, 0x56, 0x95, 0x65, 0xbc, 0xbf, 0x80, 0x65, 0xaa, 0x42,
	0xff, 0x83, 0x6b, 0xb5, 0x17, 0xe1, 0xda, 0x2f, 0x06, 0xec, 0xe6, 0xe7, 0x27, 0xf7, 0x17, 0xb4,
	0xff, 0xb9, 0xb6, 0xbf, 0x33, 0xd3, 0xf6, 0xd3, 0x76, 0x6f, 0x66, 0xda, 0xfd, 0xcb, 0x6f, 0xf3,
	0xff, 0x18, 0xfa, 0xd9, 0x73, 0x12, 0xfa, 0x3e, 0xba, 0x49, 0xe5, 0x49, 0x67, 0xac, 0x95, 0xe2,
	0x51, 0xfd, 0xf8, 0x5e, 0x3e, 0x65, 0x27, 0xf8, 0x1c, 0xbd, 0x90, 0x77, 0xa1, 0x14, 0xa0, 0xa0,
	0x9a, 0xf5, 0x77, 0xe7, 0x42, 0x3c, 0xc5, 0xe9, 0x29, 0x09, 0xf4, 0x15, 0x3f, 0xf7, 0xbe, 0xd4,
	0xdb, 0x3e, 0xa7, 0x31, 0x0d, 0x50, 0x60, 0xcc, 0x93, 0xc2, 0xb9, 0xc3, 0x98, 0x87, 0xb1, 0x4c,
	0x5d, 0xb4, 0xb5, 0x25, 0x8f, 0x86, 0x05, 0x4c, 0xbd, 0xde, 0x8a, 0xb6, 0x32, 0x12, 0xf4, 0x15,
	0xf3, 0x05, 0xc6, 0xfa, 0x64, 0xb4, 0x65, 0x5d, 0x40, 0x29, 0xd9, 0x1c, 0x39, 0x80, 0xfa, 0x00,
	0x9f, 0x8b, 0xde, 0x4c, 0x48, 0x48, 0x5c, 0x27, 0xcb, 0xc2, 0xee, 0x40, 0x59, 0x84, 0x82, 0xfa,
	0x32, 0x6a, 0xd1, 0x56, 0xc6, 0xf1, 0xdf, 0x05, 0xd8, 0x90, 0xcb, 0xbd, 0xc0, 0xf8, 0x9a, 0xb9,
	0x48, 0x3e, 0x86, 0xea, 0x67, 0x28, 0xd4, 0x75, 0x6a, 0xe6, 0x6f, 0xfc, 0xd4, 0x6b, 0xec, 0xe6,
	0x8f, 0x58, 0x6b, 0xa4, 0x0b, 0xf5, 0x13, 0x79, 0x69, 0xa9, 0x10, 0xaf, 0x2f, 0xbc, 0x25, 0x97,
	0xc4, 0x78, 0x0c, 0x75, 0xc5, 0x77, 0x15, 0x63, 0x7f, 0x59, 0x6b, 0x5b, 0x12, 0xa6, 0x03, 0x75,
	0x1b, 0x83, 0xf0, 0x1a, 0x6f, 0xdf, 0x4d, 0xf6, 0xd9, 0xfc, 0x38, 0xf9, 0x96, 0xb1, 0xd6, 0x88,
	0x0d, 0xf0, 0x84, 0x71, 0x55, 0x0e, 0x4e, 0x16, 0x10, 0x61, 0x72, 0xd2, 0x8d, 0xe6, 0x6d, 0x94,
	0xb6, 0xd6, 0xba, 0x01, 0xbc, 0x16, 0xc6, 0xfd, 0x2c, 0xb0, 0x0b, 0x2a, 0x56, 0xb2, 0x82, 0x73,
	0xe3, 0x9b, 0x87, 0x53, 0x1f, 0x50, 0x12, 0xd9, 0xa5, 0x1c, 0x93, 0x4f, 0xa8, 0x3e, 0x0e, 0xe4,
	0x2a, 0xdb, 0xe3, 0xf9, 0x34, 0x62, 0xbc, 0x2d, 0x63, 0x7c, 0x28, 0x7f, 0xff, 0x35, 0x8c, 0x1f,
	0x0b, 0xd5, 0x47, 0xa7, 0x27, 0x97, 0x5f, 0x77, 0xce, 0x4f, 0x9d, 0x8a, 0x84, 0xbf, 0xf7, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0xc8, 0x8c, 0xe0, 0x0d, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockServiceClient interface {
	// Retrieves stock by ID
	GetStock(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*Stock, error)
	// Create a new stock
	CreateStock(ctx context.Context, in *NewStock, opts ...grpc.CallOption) (*Stock, error)
	// Update an existing stock
	UpdateStock(ctx context.Context, in *StockUpdate, opts ...grpc.CallOption) (*Stock, error)
	// Remove an existing stock
	RemoveStock(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*empty.Empty, error)
	// List all stocks
	ListStocks(ctx context.Context, in *StockParameters, opts ...grpc.CallOption) (*StockCollection, error)
}

type stockServiceClient struct {
	cc *grpc.ClientConn
}

func NewStockServiceClient(cc *grpc.ClientConn) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStock(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*Stock, error) {
	out := new(Stock)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/GetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CreateStock(ctx context.Context, in *NewStock, opts ...grpc.CallOption) (*Stock, error) {
	out := new(Stock)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/CreateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) UpdateStock(ctx context.Context, in *StockUpdate, opts ...grpc.CallOption) (*Stock, error) {
	out := new(Stock)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/UpdateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) RemoveStock(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/RemoveStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ListStocks(ctx context.Context, in *StockParameters, opts ...grpc.CallOption) (*StockCollection, error) {
	out := new(StockCollection)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/ListStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
type StockServiceServer interface {
	// Retrieves stock by ID
	GetStock(context.Context, *StockId) (*Stock, error)
	// Create a new stock
	CreateStock(context.Context, *NewStock) (*Stock, error)
	// Update an existing stock
	UpdateStock(context.Context, *StockUpdate) (*Stock, error)
	// Remove an existing stock
	RemoveStock(context.Context, *StockId) (*empty.Empty, error)
	// List all stocks
	ListStocks(context.Context, *StockParameters) (*StockCollection, error)
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/GetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStock(ctx, req.(*StockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CreateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).CreateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/CreateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).CreateStock(ctx, req.(*NewStock))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/UpdateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).UpdateStock(ctx, req.(*StockUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_RemoveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).RemoveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/RemoveStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).RemoveStock(ctx, req.(*StockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ListStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ListStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/ListStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ListStocks(ctx, req.(*StockParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.stock.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStock",
			Handler:    _StockService_GetStock_Handler,
		},
		{
			MethodName: "CreateStock",
			Handler:    _StockService_CreateStock_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _StockService_UpdateStock_Handler,
		},
		{
			MethodName: "RemoveStock",
			Handler:    _StockService_RemoveStock_Handler,
		},
		{
			MethodName: "ListStocks",
			Handler:    _StockService_ListStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
