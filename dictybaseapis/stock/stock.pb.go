// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stock.proto

package stock // import "github.com/dictyBase/go-genproto/dictybaseapis/stock"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/mwitkow/go-proto-validators"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StockId struct {
	// Unique identifier for the stock
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockId) Reset()         { *m = StockId{} }
func (m *StockId) String() string { return proto.CompactTextString(m) }
func (*StockId) ProtoMessage()    {}
func (*StockId) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{0}
}
func (m *StockId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockId.Unmarshal(m, b)
}
func (m *StockId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockId.Marshal(b, m, deterministic)
}
func (dst *StockId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockId.Merge(dst, src)
}
func (m *StockId) XXX_Size() int {
	return xxx_messageInfo_StockId.Size(m)
}
func (m *StockId) XXX_DiscardUnknown() {
	xxx_messageInfo_StockId.DiscardUnknown(m)
}

var xxx_messageInfo_StockId proto.InternalMessageInfo

func (m *StockId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Definition of an individual strain
type Strain struct {
	Data                 *Strain_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Strain) Reset()         { *m = Strain{} }
func (m *Strain) String() string { return proto.CompactTextString(m) }
func (*Strain) ProtoMessage()    {}
func (*Strain) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{1}
}
func (m *Strain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Strain.Unmarshal(m, b)
}
func (m *Strain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Strain.Marshal(b, m, deterministic)
}
func (dst *Strain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strain.Merge(dst, src)
}
func (m *Strain) XXX_Size() int {
	return xxx_messageInfo_Strain.Size(m)
}
func (m *Strain) XXX_DiscardUnknown() {
	xxx_messageInfo_Strain.DiscardUnknown(m)
}

var xxx_messageInfo_Strain proto.InternalMessageInfo

func (m *Strain) GetData() *Strain_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Strain_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the strain
	Id                   string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *StrainAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Strain_Data) Reset()         { *m = Strain_Data{} }
func (m *Strain_Data) String() string { return proto.CompactTextString(m) }
func (*Strain_Data) ProtoMessage()    {}
func (*Strain_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{1, 0}
}
func (m *Strain_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Strain_Data.Unmarshal(m, b)
}
func (m *Strain_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Strain_Data.Marshal(b, m, deterministic)
}
func (dst *Strain_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strain_Data.Merge(dst, src)
}
func (m *Strain_Data) XXX_Size() int {
	return xxx_messageInfo_Strain_Data.Size(m)
}
func (m *Strain_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Strain_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Strain_Data proto.InternalMessageInfo

func (m *Strain_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Strain_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Strain_Data) GetAttributes() *StrainAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition of an individual plasmid
type Plasmid struct {
	Data                 *Plasmid_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Plasmid) Reset()         { *m = Plasmid{} }
func (m *Plasmid) String() string { return proto.CompactTextString(m) }
func (*Plasmid) ProtoMessage()    {}
func (*Plasmid) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{2}
}
func (m *Plasmid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plasmid.Unmarshal(m, b)
}
func (m *Plasmid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plasmid.Marshal(b, m, deterministic)
}
func (dst *Plasmid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plasmid.Merge(dst, src)
}
func (m *Plasmid) XXX_Size() int {
	return xxx_messageInfo_Plasmid.Size(m)
}
func (m *Plasmid) XXX_DiscardUnknown() {
	xxx_messageInfo_Plasmid.DiscardUnknown(m)
}

var xxx_messageInfo_Plasmid proto.InternalMessageInfo

func (m *Plasmid) GetData() *Plasmid_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Plasmid_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the plasmid
	Id                   string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *PlasmidAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Plasmid_Data) Reset()         { *m = Plasmid_Data{} }
func (m *Plasmid_Data) String() string { return proto.CompactTextString(m) }
func (*Plasmid_Data) ProtoMessage()    {}
func (*Plasmid_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{2, 0}
}
func (m *Plasmid_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plasmid_Data.Unmarshal(m, b)
}
func (m *Plasmid_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plasmid_Data.Marshal(b, m, deterministic)
}
func (dst *Plasmid_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plasmid_Data.Merge(dst, src)
}
func (m *Plasmid_Data) XXX_Size() int {
	return xxx_messageInfo_Plasmid_Data.Size(m)
}
func (m *Plasmid_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Plasmid_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Plasmid_Data proto.InternalMessageInfo

func (m *Plasmid_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Plasmid_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Plasmid_Data) GetAttributes() *PlasmidAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition of various strain attributes
type StrainAttributes struct {
	// Timestamp for creation
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,8,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,9,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Unambiguous name for the strain
	SystematicName string `protobuf:"bytes,11,opt,name=systematic_name,json=systematicName,proto3" json:"systematic_name,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,13,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,14,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,15,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names                []string `protobuf:"bytes,16,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrainAttributes) Reset()         { *m = StrainAttributes{} }
func (m *StrainAttributes) String() string { return proto.CompactTextString(m) }
func (*StrainAttributes) ProtoMessage()    {}
func (*StrainAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{3}
}
func (m *StrainAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainAttributes.Unmarshal(m, b)
}
func (m *StrainAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainAttributes.Marshal(b, m, deterministic)
}
func (dst *StrainAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainAttributes.Merge(dst, src)
}
func (m *StrainAttributes) XXX_Size() int {
	return xxx_messageInfo_StrainAttributes.Size(m)
}
func (m *StrainAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StrainAttributes proto.InternalMessageInfo

func (m *StrainAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StrainAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *StrainAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *StrainAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *StrainAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *StrainAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *StrainAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *StrainAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *StrainAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *StrainAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *StrainAttributes) GetSystematicName() string {
	if m != nil {
		return m.SystematicName
	}
	return ""
}

func (m *StrainAttributes) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StrainAttributes) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *StrainAttributes) GetPlasmid() string {
	if m != nil {
		return m.Plasmid
	}
	return ""
}

func (m *StrainAttributes) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *StrainAttributes) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// Definition of various stock attributes
type PlasmidAttributes struct {
	// Timestamp for creation
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,8,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,9,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,11,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,12,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name                 string   `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlasmidAttributes) Reset()         { *m = PlasmidAttributes{} }
func (m *PlasmidAttributes) String() string { return proto.CompactTextString(m) }
func (*PlasmidAttributes) ProtoMessage()    {}
func (*PlasmidAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{4}
}
func (m *PlasmidAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidAttributes.Unmarshal(m, b)
}
func (m *PlasmidAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidAttributes.Marshal(b, m, deterministic)
}
func (dst *PlasmidAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidAttributes.Merge(dst, src)
}
func (m *PlasmidAttributes) XXX_Size() int {
	return xxx_messageInfo_PlasmidAttributes.Size(m)
}
func (m *PlasmidAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidAttributes proto.InternalMessageInfo

func (m *PlasmidAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PlasmidAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PlasmidAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *PlasmidAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *PlasmidAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *PlasmidAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *PlasmidAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *PlasmidAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *PlasmidAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *PlasmidAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *PlasmidAttributes) GetImageMap() string {
	if m != nil {
		return m.ImageMap
	}
	return ""
}

func (m *PlasmidAttributes) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *PlasmidAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Definition for creating a new strain
type NewStrain struct {
	Data                 *NewStrain_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NewStrain) Reset()         { *m = NewStrain{} }
func (m *NewStrain) String() string { return proto.CompactTextString(m) }
func (*NewStrain) ProtoMessage()    {}
func (*NewStrain) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{5}
}
func (m *NewStrain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStrain.Unmarshal(m, b)
}
func (m *NewStrain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStrain.Marshal(b, m, deterministic)
}
func (dst *NewStrain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStrain.Merge(dst, src)
}
func (m *NewStrain) XXX_Size() int {
	return xxx_messageInfo_NewStrain.Size(m)
}
func (m *NewStrain) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStrain.DiscardUnknown(m)
}

var xxx_messageInfo_NewStrain proto.InternalMessageInfo

func (m *NewStrain) GetData() *NewStrain_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type NewStrain_Data struct {
	// Resource name
	Type                 string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes           *NewStrainAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewStrain_Data) Reset()         { *m = NewStrain_Data{} }
func (m *NewStrain_Data) String() string { return proto.CompactTextString(m) }
func (*NewStrain_Data) ProtoMessage()    {}
func (*NewStrain_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{5, 0}
}
func (m *NewStrain_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStrain_Data.Unmarshal(m, b)
}
func (m *NewStrain_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStrain_Data.Marshal(b, m, deterministic)
}
func (dst *NewStrain_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStrain_Data.Merge(dst, src)
}
func (m *NewStrain_Data) XXX_Size() int {
	return xxx_messageInfo_NewStrain_Data.Size(m)
}
func (m *NewStrain_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStrain_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NewStrain_Data proto.InternalMessageInfo

func (m *NewStrain_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NewStrain_Data) GetAttributes() *NewStrainAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition for creating a new plasmid
type NewPlasmid struct {
	Data                 *NewPlasmid_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NewPlasmid) Reset()         { *m = NewPlasmid{} }
func (m *NewPlasmid) String() string { return proto.CompactTextString(m) }
func (*NewPlasmid) ProtoMessage()    {}
func (*NewPlasmid) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{6}
}
func (m *NewPlasmid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewPlasmid.Unmarshal(m, b)
}
func (m *NewPlasmid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewPlasmid.Marshal(b, m, deterministic)
}
func (dst *NewPlasmid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPlasmid.Merge(dst, src)
}
func (m *NewPlasmid) XXX_Size() int {
	return xxx_messageInfo_NewPlasmid.Size(m)
}
func (m *NewPlasmid) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPlasmid.DiscardUnknown(m)
}

var xxx_messageInfo_NewPlasmid proto.InternalMessageInfo

func (m *NewPlasmid) GetData() *NewPlasmid_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type NewPlasmid_Data struct {
	// Resource name
	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes           *NewPlasmidAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NewPlasmid_Data) Reset()         { *m = NewPlasmid_Data{} }
func (m *NewPlasmid_Data) String() string { return proto.CompactTextString(m) }
func (*NewPlasmid_Data) ProtoMessage()    {}
func (*NewPlasmid_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{6, 0}
}
func (m *NewPlasmid_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewPlasmid_Data.Unmarshal(m, b)
}
func (m *NewPlasmid_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewPlasmid_Data.Marshal(b, m, deterministic)
}
func (dst *NewPlasmid_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPlasmid_Data.Merge(dst, src)
}
func (m *NewPlasmid_Data) XXX_Size() int {
	return xxx_messageInfo_NewPlasmid_Data.Size(m)
}
func (m *NewPlasmid_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPlasmid_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NewPlasmid_Data proto.InternalMessageInfo

func (m *NewPlasmid_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NewPlasmid_Data) GetAttributes() *NewPlasmidAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Defines attributes for creating a new strain
type NewStrainAttributes struct {
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,4,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,8,rep,name=publications,proto3" json:"publications,omitempty"`
	// Unambiguous name for the strain
	SystematicName string `protobuf:"bytes,9,opt,name=systematic_name,json=systematicName,proto3" json:"systematic_name,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,11,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,12,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,13,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names                []string `protobuf:"bytes,14,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewStrainAttributes) Reset()         { *m = NewStrainAttributes{} }
func (m *NewStrainAttributes) String() string { return proto.CompactTextString(m) }
func (*NewStrainAttributes) ProtoMessage()    {}
func (*NewStrainAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{7}
}
func (m *NewStrainAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStrainAttributes.Unmarshal(m, b)
}
func (m *NewStrainAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStrainAttributes.Marshal(b, m, deterministic)
}
func (dst *NewStrainAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStrainAttributes.Merge(dst, src)
}
func (m *NewStrainAttributes) XXX_Size() int {
	return xxx_messageInfo_NewStrainAttributes.Size(m)
}
func (m *NewStrainAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStrainAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NewStrainAttributes proto.InternalMessageInfo

func (m *NewStrainAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *NewStrainAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *NewStrainAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *NewStrainAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *NewStrainAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *NewStrainAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *NewStrainAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *NewStrainAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *NewStrainAttributes) GetSystematicName() string {
	if m != nil {
		return m.SystematicName
	}
	return ""
}

func (m *NewStrainAttributes) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *NewStrainAttributes) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *NewStrainAttributes) GetPlasmid() string {
	if m != nil {
		return m.Plasmid
	}
	return ""
}

func (m *NewStrainAttributes) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *NewStrainAttributes) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// Defines attributes for creating a new plasmid
type NewPlasmidAttributes struct {
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,4,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,7,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,8,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,9,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,10,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name                 string   `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewPlasmidAttributes) Reset()         { *m = NewPlasmidAttributes{} }
func (m *NewPlasmidAttributes) String() string { return proto.CompactTextString(m) }
func (*NewPlasmidAttributes) ProtoMessage()    {}
func (*NewPlasmidAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{8}
}
func (m *NewPlasmidAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewPlasmidAttributes.Unmarshal(m, b)
}
func (m *NewPlasmidAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewPlasmidAttributes.Marshal(b, m, deterministic)
}
func (dst *NewPlasmidAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPlasmidAttributes.Merge(dst, src)
}
func (m *NewPlasmidAttributes) XXX_Size() int {
	return xxx_messageInfo_NewPlasmidAttributes.Size(m)
}
func (m *NewPlasmidAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPlasmidAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NewPlasmidAttributes proto.InternalMessageInfo

func (m *NewPlasmidAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *NewPlasmidAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *NewPlasmidAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *NewPlasmidAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *NewPlasmidAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *NewPlasmidAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *NewPlasmidAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *NewPlasmidAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *NewPlasmidAttributes) GetImageMap() string {
	if m != nil {
		return m.ImageMap
	}
	return ""
}

func (m *NewPlasmidAttributes) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *NewPlasmidAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Definition for loading an existing strain
type ExistingStrain struct {
	Data                 *ExistingStrain_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ExistingStrain) Reset()         { *m = ExistingStrain{} }
func (m *ExistingStrain) String() string { return proto.CompactTextString(m) }
func (*ExistingStrain) ProtoMessage()    {}
func (*ExistingStrain) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{9}
}
func (m *ExistingStrain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingStrain.Unmarshal(m, b)
}
func (m *ExistingStrain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingStrain.Marshal(b, m, deterministic)
}
func (dst *ExistingStrain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingStrain.Merge(dst, src)
}
func (m *ExistingStrain) XXX_Size() int {
	return xxx_messageInfo_ExistingStrain.Size(m)
}
func (m *ExistingStrain) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingStrain.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingStrain proto.InternalMessageInfo

func (m *ExistingStrain) GetData() *ExistingStrain_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type ExistingStrain_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Existing strain ID
	Id                   string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *ExistingStrainAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ExistingStrain_Data) Reset()         { *m = ExistingStrain_Data{} }
func (m *ExistingStrain_Data) String() string { return proto.CompactTextString(m) }
func (*ExistingStrain_Data) ProtoMessage()    {}
func (*ExistingStrain_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{9, 0}
}
func (m *ExistingStrain_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingStrain_Data.Unmarshal(m, b)
}
func (m *ExistingStrain_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingStrain_Data.Marshal(b, m, deterministic)
}
func (dst *ExistingStrain_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingStrain_Data.Merge(dst, src)
}
func (m *ExistingStrain_Data) XXX_Size() int {
	return xxx_messageInfo_ExistingStrain_Data.Size(m)
}
func (m *ExistingStrain_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingStrain_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingStrain_Data proto.InternalMessageInfo

func (m *ExistingStrain_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExistingStrain_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExistingStrain_Data) GetAttributes() *ExistingStrainAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition for loading an existing plasmid
type ExistingPlasmid struct {
	Data                 *ExistingPlasmid_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExistingPlasmid) Reset()         { *m = ExistingPlasmid{} }
func (m *ExistingPlasmid) String() string { return proto.CompactTextString(m) }
func (*ExistingPlasmid) ProtoMessage()    {}
func (*ExistingPlasmid) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{10}
}
func (m *ExistingPlasmid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingPlasmid.Unmarshal(m, b)
}
func (m *ExistingPlasmid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingPlasmid.Marshal(b, m, deterministic)
}
func (dst *ExistingPlasmid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingPlasmid.Merge(dst, src)
}
func (m *ExistingPlasmid) XXX_Size() int {
	return xxx_messageInfo_ExistingPlasmid.Size(m)
}
func (m *ExistingPlasmid) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingPlasmid.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingPlasmid proto.InternalMessageInfo

func (m *ExistingPlasmid) GetData() *ExistingPlasmid_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type ExistingPlasmid_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Existing plasmid ID
	Id                   string                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *ExistingPlasmidAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ExistingPlasmid_Data) Reset()         { *m = ExistingPlasmid_Data{} }
func (m *ExistingPlasmid_Data) String() string { return proto.CompactTextString(m) }
func (*ExistingPlasmid_Data) ProtoMessage()    {}
func (*ExistingPlasmid_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{10, 0}
}
func (m *ExistingPlasmid_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingPlasmid_Data.Unmarshal(m, b)
}
func (m *ExistingPlasmid_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingPlasmid_Data.Marshal(b, m, deterministic)
}
func (dst *ExistingPlasmid_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingPlasmid_Data.Merge(dst, src)
}
func (m *ExistingPlasmid_Data) XXX_Size() int {
	return xxx_messageInfo_ExistingPlasmid_Data.Size(m)
}
func (m *ExistingPlasmid_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingPlasmid_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingPlasmid_Data proto.InternalMessageInfo

func (m *ExistingPlasmid_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExistingPlasmid_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExistingPlasmid_Data) GetAttributes() *ExistingPlasmidAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Defines attributes for loading an existing strain
type ExistingStrainAttributes struct {
	// Timestamp for creation
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,7,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,8,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,9,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Unambiguous name for the strain
	SystematicName string `protobuf:"bytes,11,opt,name=systematic_name,json=systematicName,proto3" json:"systematic_name,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,13,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,14,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,15,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names                []string `protobuf:"bytes,16,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistingStrainAttributes) Reset()         { *m = ExistingStrainAttributes{} }
func (m *ExistingStrainAttributes) String() string { return proto.CompactTextString(m) }
func (*ExistingStrainAttributes) ProtoMessage()    {}
func (*ExistingStrainAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{11}
}
func (m *ExistingStrainAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingStrainAttributes.Unmarshal(m, b)
}
func (m *ExistingStrainAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingStrainAttributes.Marshal(b, m, deterministic)
}
func (dst *ExistingStrainAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingStrainAttributes.Merge(dst, src)
}
func (m *ExistingStrainAttributes) XXX_Size() int {
	return xxx_messageInfo_ExistingStrainAttributes.Size(m)
}
func (m *ExistingStrainAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingStrainAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingStrainAttributes proto.InternalMessageInfo

func (m *ExistingStrainAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ExistingStrainAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ExistingStrainAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *ExistingStrainAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *ExistingStrainAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ExistingStrainAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *ExistingStrainAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *ExistingStrainAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *ExistingStrainAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *ExistingStrainAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *ExistingStrainAttributes) GetSystematicName() string {
	if m != nil {
		return m.SystematicName
	}
	return ""
}

func (m *ExistingStrainAttributes) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ExistingStrainAttributes) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *ExistingStrainAttributes) GetPlasmid() string {
	if m != nil {
		return m.Plasmid
	}
	return ""
}

func (m *ExistingStrainAttributes) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ExistingStrainAttributes) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// Defines attributes for loading an existing plasmid
type ExistingPlasmidAttributes struct {
	// Timestamp for creation
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for update
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who created stock entry
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,6,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,7,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,8,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,9,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,11,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,12,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name                 string   `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistingPlasmidAttributes) Reset()         { *m = ExistingPlasmidAttributes{} }
func (m *ExistingPlasmidAttributes) String() string { return proto.CompactTextString(m) }
func (*ExistingPlasmidAttributes) ProtoMessage()    {}
func (*ExistingPlasmidAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{12}
}
func (m *ExistingPlasmidAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingPlasmidAttributes.Unmarshal(m, b)
}
func (m *ExistingPlasmidAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingPlasmidAttributes.Marshal(b, m, deterministic)
}
func (dst *ExistingPlasmidAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingPlasmidAttributes.Merge(dst, src)
}
func (m *ExistingPlasmidAttributes) XXX_Size() int {
	return xxx_messageInfo_ExistingPlasmidAttributes.Size(m)
}
func (m *ExistingPlasmidAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingPlasmidAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingPlasmidAttributes proto.InternalMessageInfo

func (m *ExistingPlasmidAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ExistingPlasmidAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ExistingPlasmidAttributes) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *ExistingPlasmidAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *ExistingPlasmidAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *ExistingPlasmidAttributes) GetImageMap() string {
	if m != nil {
		return m.ImageMap
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *ExistingPlasmidAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Definition for creating a new strain
type StrainUpdate struct {
	Data                 *StrainUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StrainUpdate) Reset()         { *m = StrainUpdate{} }
func (m *StrainUpdate) String() string { return proto.CompactTextString(m) }
func (*StrainUpdate) ProtoMessage()    {}
func (*StrainUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{13}
}
func (m *StrainUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainUpdate.Unmarshal(m, b)
}
func (m *StrainUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainUpdate.Marshal(b, m, deterministic)
}
func (dst *StrainUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainUpdate.Merge(dst, src)
}
func (m *StrainUpdate) XXX_Size() int {
	return xxx_messageInfo_StrainUpdate.Size(m)
}
func (m *StrainUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StrainUpdate proto.InternalMessageInfo

func (m *StrainUpdate) GetData() *StrainUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type StrainUpdate_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique ID for strain
	Id                   string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *StrainUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StrainUpdate_Data) Reset()         { *m = StrainUpdate_Data{} }
func (m *StrainUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*StrainUpdate_Data) ProtoMessage()    {}
func (*StrainUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{13, 0}
}
func (m *StrainUpdate_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainUpdate_Data.Unmarshal(m, b)
}
func (m *StrainUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainUpdate_Data.Marshal(b, m, deterministic)
}
func (dst *StrainUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainUpdate_Data.Merge(dst, src)
}
func (m *StrainUpdate_Data) XXX_Size() int {
	return xxx_messageInfo_StrainUpdate_Data.Size(m)
}
func (m *StrainUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_StrainUpdate_Data proto.InternalMessageInfo

func (m *StrainUpdate_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StrainUpdate_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StrainUpdate_Data) GetAttributes() *StrainUpdateAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition for creating a new plasmid
type PlasmidUpdate struct {
	Data                 *PlasmidUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PlasmidUpdate) Reset()         { *m = PlasmidUpdate{} }
func (m *PlasmidUpdate) String() string { return proto.CompactTextString(m) }
func (*PlasmidUpdate) ProtoMessage()    {}
func (*PlasmidUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{14}
}
func (m *PlasmidUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidUpdate.Unmarshal(m, b)
}
func (m *PlasmidUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidUpdate.Marshal(b, m, deterministic)
}
func (dst *PlasmidUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidUpdate.Merge(dst, src)
}
func (m *PlasmidUpdate) XXX_Size() int {
	return xxx_messageInfo_PlasmidUpdate.Size(m)
}
func (m *PlasmidUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidUpdate proto.InternalMessageInfo

func (m *PlasmidUpdate) GetData() *PlasmidUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlasmidUpdate_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique ID for plasmid
	Id                   string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *PlasmidUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PlasmidUpdate_Data) Reset()         { *m = PlasmidUpdate_Data{} }
func (m *PlasmidUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*PlasmidUpdate_Data) ProtoMessage()    {}
func (*PlasmidUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{14, 0}
}
func (m *PlasmidUpdate_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidUpdate_Data.Unmarshal(m, b)
}
func (m *PlasmidUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidUpdate_Data.Marshal(b, m, deterministic)
}
func (dst *PlasmidUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidUpdate_Data.Merge(dst, src)
}
func (m *PlasmidUpdate_Data) XXX_Size() int {
	return xxx_messageInfo_PlasmidUpdate_Data.Size(m)
}
func (m *PlasmidUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidUpdate_Data proto.InternalMessageInfo

func (m *PlasmidUpdate_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PlasmidUpdate_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlasmidUpdate_Data) GetAttributes() *PlasmidUpdateAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Defines attributes for updating a strain
type StrainUpdateAttributes struct {
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,1,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,3,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,7,rep,name=publications,proto3" json:"publications,omitempty"`
	// Unambiguous name for the strain
	SystematicName string `protobuf:"bytes,8,opt,name=systematic_name,json=systematicName,proto3" json:"systematic_name,omitempty"`
	// Descriptor for the strain, a quick overview of its key genetic modifications
	Label string `protobuf:"bytes,9,opt,name=label,proto3" json:"label,omitempty"`
	// Species of the strain
	Species string `protobuf:"bytes,10,opt,name=species,proto3" json:"species,omitempty"`
	// Related plasmid for the strain
	Plasmid string `protobuf:"bytes,11,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	// Parent of the strain
	Parent string `protobuf:"bytes,12,opt,name=parent,proto3" json:"parent,omitempty"`
	// List of names for the strain
	Names                []string `protobuf:"bytes,13,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrainUpdateAttributes) Reset()         { *m = StrainUpdateAttributes{} }
func (m *StrainUpdateAttributes) String() string { return proto.CompactTextString(m) }
func (*StrainUpdateAttributes) ProtoMessage()    {}
func (*StrainUpdateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{15}
}
func (m *StrainUpdateAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainUpdateAttributes.Unmarshal(m, b)
}
func (m *StrainUpdateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainUpdateAttributes.Marshal(b, m, deterministic)
}
func (dst *StrainUpdateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainUpdateAttributes.Merge(dst, src)
}
func (m *StrainUpdateAttributes) XXX_Size() int {
	return xxx_messageInfo_StrainUpdateAttributes.Size(m)
}
func (m *StrainUpdateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainUpdateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StrainUpdateAttributes proto.InternalMessageInfo

func (m *StrainUpdateAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *StrainUpdateAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *StrainUpdateAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *StrainUpdateAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *StrainUpdateAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *StrainUpdateAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *StrainUpdateAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *StrainUpdateAttributes) GetSystematicName() string {
	if m != nil {
		return m.SystematicName
	}
	return ""
}

func (m *StrainUpdateAttributes) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StrainUpdateAttributes) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *StrainUpdateAttributes) GetPlasmid() string {
	if m != nil {
		return m.Plasmid
	}
	return ""
}

func (m *StrainUpdateAttributes) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *StrainUpdateAttributes) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// Defines attributes for updating a plasmid
type PlasmidUpdateAttributes struct {
	// User who updated stock entry
	UpdatedBy string `protobuf:"bytes,1,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Summary of the stock
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Editable version of the stock summary (Slate JSON format)
	EditableSummary string `protobuf:"bytes,3,opt,name=editable_summary,json=editableSummary,proto3" json:"editable_summary,omitempty"`
	// Depositor of the stock
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// List of associated genes
	Genes []string `protobuf:"bytes,5,rep,name=genes,proto3" json:"genes,omitempty"`
	// List of database cross references
	Dbxrefs []string `protobuf:"bytes,6,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	// List of related publications
	Publications []string `protobuf:"bytes,7,rep,name=publications,proto3" json:"publications,omitempty"`
	// Image map for the plasmid
	ImageMap string `protobuf:"bytes,8,opt,name=image_map,json=imageMap,proto3" json:"image_map,omitempty"`
	// Sequence for the plasmid
	Sequence string `protobuf:"bytes,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Unambiguous name for the plasmid
	Name                 string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlasmidUpdateAttributes) Reset()         { *m = PlasmidUpdateAttributes{} }
func (m *PlasmidUpdateAttributes) String() string { return proto.CompactTextString(m) }
func (*PlasmidUpdateAttributes) ProtoMessage()    {}
func (*PlasmidUpdateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{16}
}
func (m *PlasmidUpdateAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidUpdateAttributes.Unmarshal(m, b)
}
func (m *PlasmidUpdateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidUpdateAttributes.Marshal(b, m, deterministic)
}
func (dst *PlasmidUpdateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidUpdateAttributes.Merge(dst, src)
}
func (m *PlasmidUpdateAttributes) XXX_Size() int {
	return xxx_messageInfo_PlasmidUpdateAttributes.Size(m)
}
func (m *PlasmidUpdateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidUpdateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidUpdateAttributes proto.InternalMessageInfo

func (m *PlasmidUpdateAttributes) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func (m *PlasmidUpdateAttributes) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *PlasmidUpdateAttributes) GetEditableSummary() string {
	if m != nil {
		return m.EditableSummary
	}
	return ""
}

func (m *PlasmidUpdateAttributes) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *PlasmidUpdateAttributes) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *PlasmidUpdateAttributes) GetDbxrefs() []string {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *PlasmidUpdateAttributes) GetPublications() []string {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *PlasmidUpdateAttributes) GetImageMap() string {
	if m != nil {
		return m.ImageMap
	}
	return ""
}

func (m *PlasmidUpdateAttributes) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *PlasmidUpdateAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// List of strains
type StrainCollection struct {
	Data                 []*StrainCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta                 *Meta                    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StrainCollection) Reset()         { *m = StrainCollection{} }
func (m *StrainCollection) String() string { return proto.CompactTextString(m) }
func (*StrainCollection) ProtoMessage()    {}
func (*StrainCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{17}
}
func (m *StrainCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainCollection.Unmarshal(m, b)
}
func (m *StrainCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainCollection.Marshal(b, m, deterministic)
}
func (dst *StrainCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainCollection.Merge(dst, src)
}
func (m *StrainCollection) XXX_Size() int {
	return xxx_messageInfo_StrainCollection.Size(m)
}
func (m *StrainCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainCollection.DiscardUnknown(m)
}

var xxx_messageInfo_StrainCollection proto.InternalMessageInfo

func (m *StrainCollection) GetData() []*StrainCollection_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StrainCollection) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type StrainCollection_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the stock
	Id                   string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *StrainAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StrainCollection_Data) Reset()         { *m = StrainCollection_Data{} }
func (m *StrainCollection_Data) String() string { return proto.CompactTextString(m) }
func (*StrainCollection_Data) ProtoMessage()    {}
func (*StrainCollection_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{17, 0}
}
func (m *StrainCollection_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrainCollection_Data.Unmarshal(m, b)
}
func (m *StrainCollection_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrainCollection_Data.Marshal(b, m, deterministic)
}
func (dst *StrainCollection_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrainCollection_Data.Merge(dst, src)
}
func (m *StrainCollection_Data) XXX_Size() int {
	return xxx_messageInfo_StrainCollection_Data.Size(m)
}
func (m *StrainCollection_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_StrainCollection_Data.DiscardUnknown(m)
}

var xxx_messageInfo_StrainCollection_Data proto.InternalMessageInfo

func (m *StrainCollection_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StrainCollection_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StrainCollection_Data) GetAttributes() *StrainAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// List of plasmids
type PlasmidCollection struct {
	Data                 []*PlasmidCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta                 *Meta                     `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PlasmidCollection) Reset()         { *m = PlasmidCollection{} }
func (m *PlasmidCollection) String() string { return proto.CompactTextString(m) }
func (*PlasmidCollection) ProtoMessage()    {}
func (*PlasmidCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{18}
}
func (m *PlasmidCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidCollection.Unmarshal(m, b)
}
func (m *PlasmidCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidCollection.Marshal(b, m, deterministic)
}
func (dst *PlasmidCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidCollection.Merge(dst, src)
}
func (m *PlasmidCollection) XXX_Size() int {
	return xxx_messageInfo_PlasmidCollection.Size(m)
}
func (m *PlasmidCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidCollection.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidCollection proto.InternalMessageInfo

func (m *PlasmidCollection) GetData() []*PlasmidCollection_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PlasmidCollection) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type PlasmidCollection_Data struct {
	// Resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the stock
	Id                   string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *PlasmidAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PlasmidCollection_Data) Reset()         { *m = PlasmidCollection_Data{} }
func (m *PlasmidCollection_Data) String() string { return proto.CompactTextString(m) }
func (*PlasmidCollection_Data) ProtoMessage()    {}
func (*PlasmidCollection_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{18, 0}
}
func (m *PlasmidCollection_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlasmidCollection_Data.Unmarshal(m, b)
}
func (m *PlasmidCollection_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlasmidCollection_Data.Marshal(b, m, deterministic)
}
func (dst *PlasmidCollection_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlasmidCollection_Data.Merge(dst, src)
}
func (m *PlasmidCollection_Data) XXX_Size() int {
	return xxx_messageInfo_PlasmidCollection_Data.Size(m)
}
func (m *PlasmidCollection_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_PlasmidCollection_Data.DiscardUnknown(m)
}

var xxx_messageInfo_PlasmidCollection_Data proto.InternalMessageInfo

func (m *PlasmidCollection_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PlasmidCollection_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlasmidCollection_Data) GetAttributes() *PlasmidAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// StockParameters defines fields for manipulating output of Stock collection
type StockParameters struct {
	// A unique pointer to the next set of result in the list (default is 0)
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request (default is 10)
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data return by the collection. To use
	// it, supply one or multiple allowed fields to filter followed
	// by a filter expression. It uses the following syntax...
	//        field_name operator expression
	//
	// The following fields of `StockAttributes` definition are allowed to
	// be used for filtering
	//   * depositor          - Depositor of the stock (string)
	//   * parent             - Parental strain (string) (currently not implemented)
	//   * plasmid            - Related plasmid for the strain (string)
	//   * species            - The species of the strain (string)
	//   * systematic_name    - Unambiguous name for the strain (string)
	//   * summary            - Summary of the stock (string)
	//   * name               - Name used for strain (string), searches in the "names" attribute
	//   * plasmid_name       - Name used for plasmid (string)
	//   * created_at         - Date the stock was created (number), can be in the
	//                          following formats:
	//                          YYYY-MM-DD, YYYY-MM, YYYY
	//   * updated_at         - Date the stock was updated (number), can be in the
	//                          following formats:
	//                          YYYY-MM-DD, YYYY-MM, YYYY
	//
	// field_name - Any one of the allowed field_name of the `StockAttributes` definition.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded for http request.
	//
	//        Operators for strings
	//              =~   Contains substring
	//              !~   Not contains substring
	//              ===  Equals
	//              !=   Not equals
	//
	//        Operators for number
	//              ==  Equals
	//              >   Greater than
	//              <   Less than
	//              <=  Less than equal to
	//              >=  Greater than equal to
	//
	//        Operators for dates
	//              $==  Equals
	//              $>   Greater than
	//              $<   Less than
	//              $<=  Less than equal to
	//              $>=  Greater than equal to
	//
	//        Operators for items in arrays
	//              @=~   Contains substring
	//              @!~   Not contains substring (not implemented yet)
	//              @==   Equals
	//              @!=   Not equals
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded for http request.
	//
	//           filter: "created_at$>=2018-12-01"
	//           filter: "depositor===Costanza"
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	//
	//           filter: "depositor===Benes;created_at$>=2018-12-01"
	//
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockParameters) Reset()         { *m = StockParameters{} }
func (m *StockParameters) String() string { return proto.CompactTextString(m) }
func (*StockParameters) ProtoMessage()    {}
func (*StockParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{19}
}
func (m *StockParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockParameters.Unmarshal(m, b)
}
func (m *StockParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockParameters.Marshal(b, m, deterministic)
}
func (dst *StockParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockParameters.Merge(dst, src)
}
func (m *StockParameters) XXX_Size() int {
	return xxx_messageInfo_StockParameters.Size(m)
}
func (m *StockParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_StockParameters.DiscardUnknown(m)
}

var xxx_messageInfo_StockParameters proto.InternalMessageInfo

func (m *StockParameters) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *StockParameters) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *StockParameters) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// Metadata definition for traversing the collection
type Meta struct {
	// A unique pointer to the next set of result in the collection. Set the
	// cursor value parameter to the value of next_cursor to retrieve the next
	// set of collection using the same method
	NextCursor int64 `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Total number of records in the collection.
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_stock_6d37f65c77979fcf, []int{20}
}
func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (dst *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(dst, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetNextCursor() int64 {
	if m != nil {
		return m.NextCursor
	}
	return 0
}

func (m *Meta) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Meta) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*StockId)(nil), "dictybase.stock.StockId")
	proto.RegisterType((*Strain)(nil), "dictybase.stock.Strain")
	proto.RegisterType((*Strain_Data)(nil), "dictybase.stock.Strain.Data")
	proto.RegisterType((*Plasmid)(nil), "dictybase.stock.Plasmid")
	proto.RegisterType((*Plasmid_Data)(nil), "dictybase.stock.Plasmid.Data")
	proto.RegisterType((*StrainAttributes)(nil), "dictybase.stock.StrainAttributes")
	proto.RegisterType((*PlasmidAttributes)(nil), "dictybase.stock.PlasmidAttributes")
	proto.RegisterType((*NewStrain)(nil), "dictybase.stock.NewStrain")
	proto.RegisterType((*NewStrain_Data)(nil), "dictybase.stock.NewStrain.Data")
	proto.RegisterType((*NewPlasmid)(nil), "dictybase.stock.NewPlasmid")
	proto.RegisterType((*NewPlasmid_Data)(nil), "dictybase.stock.NewPlasmid.Data")
	proto.RegisterType((*NewStrainAttributes)(nil), "dictybase.stock.NewStrainAttributes")
	proto.RegisterType((*NewPlasmidAttributes)(nil), "dictybase.stock.NewPlasmidAttributes")
	proto.RegisterType((*ExistingStrain)(nil), "dictybase.stock.ExistingStrain")
	proto.RegisterType((*ExistingStrain_Data)(nil), "dictybase.stock.ExistingStrain.Data")
	proto.RegisterType((*ExistingPlasmid)(nil), "dictybase.stock.ExistingPlasmid")
	proto.RegisterType((*ExistingPlasmid_Data)(nil), "dictybase.stock.ExistingPlasmid.Data")
	proto.RegisterType((*ExistingStrainAttributes)(nil), "dictybase.stock.ExistingStrainAttributes")
	proto.RegisterType((*ExistingPlasmidAttributes)(nil), "dictybase.stock.ExistingPlasmidAttributes")
	proto.RegisterType((*StrainUpdate)(nil), "dictybase.stock.StrainUpdate")
	proto.RegisterType((*StrainUpdate_Data)(nil), "dictybase.stock.StrainUpdate.Data")
	proto.RegisterType((*PlasmidUpdate)(nil), "dictybase.stock.PlasmidUpdate")
	proto.RegisterType((*PlasmidUpdate_Data)(nil), "dictybase.stock.PlasmidUpdate.Data")
	proto.RegisterType((*StrainUpdateAttributes)(nil), "dictybase.stock.StrainUpdateAttributes")
	proto.RegisterType((*PlasmidUpdateAttributes)(nil), "dictybase.stock.PlasmidUpdateAttributes")
	proto.RegisterType((*StrainCollection)(nil), "dictybase.stock.StrainCollection")
	proto.RegisterType((*StrainCollection_Data)(nil), "dictybase.stock.StrainCollection.Data")
	proto.RegisterType((*PlasmidCollection)(nil), "dictybase.stock.PlasmidCollection")
	proto.RegisterType((*PlasmidCollection_Data)(nil), "dictybase.stock.PlasmidCollection.Data")
	proto.RegisterType((*StockParameters)(nil), "dictybase.stock.StockParameters")
	proto.RegisterType((*Meta)(nil), "dictybase.stock.Meta")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockServiceClient interface {
	// Retrieves strain by ID
	GetStrain(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*Strain, error)
	// Retrieves stock by ID
	GetPlasmid(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*Plasmid, error)
	// Create a new strain
	CreateStrain(ctx context.Context, in *NewStrain, opts ...grpc.CallOption) (*Strain, error)
	// Create a new plasmid
	CreatePlasmid(ctx context.Context, in *NewPlasmid, opts ...grpc.CallOption) (*Plasmid, error)
	// Update an existing strain
	UpdateStrain(ctx context.Context, in *StrainUpdate, opts ...grpc.CallOption) (*Strain, error)
	// Update an existing plasmid
	UpdatePlasmid(ctx context.Context, in *PlasmidUpdate, opts ...grpc.CallOption) (*Plasmid, error)
	// Remove an existing stock
	RemoveStock(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*empty.Empty, error)
	// List strains using pagination, ten entries are retrieved by default
	ListStrains(ctx context.Context, in *StockParameters, opts ...grpc.CallOption) (*StrainCollection, error)
	// List plasmids using pagination, ten entries are retrieved by default
	ListPlasmids(ctx context.Context, in *StockParameters, opts ...grpc.CallOption) (*PlasmidCollection, error)
	// Load existing strain
	LoadStrain(ctx context.Context, in *ExistingStrain, opts ...grpc.CallOption) (*Strain, error)
	// Load existing plasmid
	LoadPlasmid(ctx context.Context, in *ExistingPlasmid, opts ...grpc.CallOption) (*Plasmid, error)
}

type stockServiceClient struct {
	cc *grpc.ClientConn
}

func NewStockServiceClient(cc *grpc.ClientConn) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStrain(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*Strain, error) {
	out := new(Strain)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/GetStrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetPlasmid(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*Plasmid, error) {
	out := new(Plasmid)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/GetPlasmid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CreateStrain(ctx context.Context, in *NewStrain, opts ...grpc.CallOption) (*Strain, error) {
	out := new(Strain)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/CreateStrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CreatePlasmid(ctx context.Context, in *NewPlasmid, opts ...grpc.CallOption) (*Plasmid, error) {
	out := new(Plasmid)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/CreatePlasmid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) UpdateStrain(ctx context.Context, in *StrainUpdate, opts ...grpc.CallOption) (*Strain, error) {
	out := new(Strain)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/UpdateStrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) UpdatePlasmid(ctx context.Context, in *PlasmidUpdate, opts ...grpc.CallOption) (*Plasmid, error) {
	out := new(Plasmid)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/UpdatePlasmid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) RemoveStock(ctx context.Context, in *StockId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/RemoveStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ListStrains(ctx context.Context, in *StockParameters, opts ...grpc.CallOption) (*StrainCollection, error) {
	out := new(StrainCollection)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/ListStrains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ListPlasmids(ctx context.Context, in *StockParameters, opts ...grpc.CallOption) (*PlasmidCollection, error) {
	out := new(PlasmidCollection)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/ListPlasmids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) LoadStrain(ctx context.Context, in *ExistingStrain, opts ...grpc.CallOption) (*Strain, error) {
	out := new(Strain)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/LoadStrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) LoadPlasmid(ctx context.Context, in *ExistingPlasmid, opts ...grpc.CallOption) (*Plasmid, error) {
	out := new(Plasmid)
	err := c.cc.Invoke(ctx, "/dictybase.stock.StockService/LoadPlasmid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
type StockServiceServer interface {
	// Retrieves strain by ID
	GetStrain(context.Context, *StockId) (*Strain, error)
	// Retrieves stock by ID
	GetPlasmid(context.Context, *StockId) (*Plasmid, error)
	// Create a new strain
	CreateStrain(context.Context, *NewStrain) (*Strain, error)
	// Create a new plasmid
	CreatePlasmid(context.Context, *NewPlasmid) (*Plasmid, error)
	// Update an existing strain
	UpdateStrain(context.Context, *StrainUpdate) (*Strain, error)
	// Update an existing plasmid
	UpdatePlasmid(context.Context, *PlasmidUpdate) (*Plasmid, error)
	// Remove an existing stock
	RemoveStock(context.Context, *StockId) (*empty.Empty, error)
	// List strains using pagination, ten entries are retrieved by default
	ListStrains(context.Context, *StockParameters) (*StrainCollection, error)
	// List plasmids using pagination, ten entries are retrieved by default
	ListPlasmids(context.Context, *StockParameters) (*PlasmidCollection, error)
	// Load existing strain
	LoadStrain(context.Context, *ExistingStrain) (*Strain, error)
	// Load existing plasmid
	LoadPlasmid(context.Context, *ExistingPlasmid) (*Plasmid, error)
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_GetStrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/GetStrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStrain(ctx, req.(*StockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetPlasmid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetPlasmid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/GetPlasmid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetPlasmid(ctx, req.(*StockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CreateStrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStrain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).CreateStrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/CreateStrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).CreateStrain(ctx, req.(*NewStrain))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CreatePlasmid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPlasmid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).CreatePlasmid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/CreatePlasmid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).CreatePlasmid(ctx, req.(*NewPlasmid))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_UpdateStrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrainUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).UpdateStrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/UpdateStrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).UpdateStrain(ctx, req.(*StrainUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_UpdatePlasmid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlasmidUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).UpdatePlasmid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/UpdatePlasmid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).UpdatePlasmid(ctx, req.(*PlasmidUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_RemoveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).RemoveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/RemoveStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).RemoveStock(ctx, req.(*StockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ListStrains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ListStrains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/ListStrains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ListStrains(ctx, req.(*StockParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ListPlasmids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ListPlasmids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/ListPlasmids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ListPlasmids(ctx, req.(*StockParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_LoadStrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistingStrain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).LoadStrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/LoadStrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).LoadStrain(ctx, req.(*ExistingStrain))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_LoadPlasmid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistingPlasmid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).LoadPlasmid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.stock.StockService/LoadPlasmid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).LoadPlasmid(ctx, req.(*ExistingPlasmid))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.stock.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStrain",
			Handler:    _StockService_GetStrain_Handler,
		},
		{
			MethodName: "GetPlasmid",
			Handler:    _StockService_GetPlasmid_Handler,
		},
		{
			MethodName: "CreateStrain",
			Handler:    _StockService_CreateStrain_Handler,
		},
		{
			MethodName: "CreatePlasmid",
			Handler:    _StockService_CreatePlasmid_Handler,
		},
		{
			MethodName: "UpdateStrain",
			Handler:    _StockService_UpdateStrain_Handler,
		},
		{
			MethodName: "UpdatePlasmid",
			Handler:    _StockService_UpdatePlasmid_Handler,
		},
		{
			MethodName: "RemoveStock",
			Handler:    _StockService_RemoveStock_Handler,
		},
		{
			MethodName: "ListStrains",
			Handler:    _StockService_ListStrains_Handler,
		},
		{
			MethodName: "ListPlasmids",
			Handler:    _StockService_ListPlasmids_Handler,
		},
		{
			MethodName: "LoadStrain",
			Handler:    _StockService_LoadStrain_Handler,
		},
		{
			MethodName: "LoadPlasmid",
			Handler:    _StockService_LoadPlasmid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}

func init() { proto.RegisterFile("stock.proto", fileDescriptor_stock_6d37f65c77979fcf) }

var fileDescriptor_stock_6d37f65c77979fcf = []byte{
	// 1461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x99, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1f, 0xc7, 0xb3, 0xb6, 0xe3, 0x87, 0x9f, 0x9d, 0xb8, 0xff, 0x69, 0xfe, 0xe9, 0xe2, 0xa6, 0xc4,
	0x5d, 0x5a, 0x9a, 0x22, 0xd5, 0x16, 0x45, 0x42, 0x40, 0x11, 0xd4, 0x4e, 0xa3, 0x36, 0xd0, 0x56,
	0x91, 0x53, 0x1e, 0x2f, 0x61, 0xec, 0x9d, 0x9a, 0x51, 0xbd, 0xde, 0x65, 0x67, 0x9c, 0xd4, 0x82,
	0x1b, 0x2f, 0x82, 0x3b, 0x47, 0x24, 0x0e, 0x48, 0xbc, 0x84, 0x5e, 0x10, 0x88, 0x23, 0x17, 0x0e,
	0x48, 0x1c, 0x78, 0x03, 0x5c, 0x2a, 0x71, 0x41, 0x3b, 0x33, 0x6b, 0x7b, 0xed, 0x9d, 0xb5, 0x83,
	0xa0, 0xaa, 0xaa, 0x5c, 0xaa, 0xcc, 0xcc, 0x6f, 0x7e, 0x0f, 0x33, 0xdf, 0xf9, 0x78, 0x76, 0x0a,
	0x45, 0xc6, 0xdd, 0xce, 0x83, 0x9a, 0xe7, 0xbb, 0xdc, 0x45, 0x65, 0x9b, 0x76, 0xf8, 0xb0, 0x8d,
	0x19, 0xa9, 0x89, 0xee, 0xca, 0x46, 0xd7, 0x75, 0xbb, 0x3d, 0x52, 0xc7, 0x1e, 0xad, 0xe3, 0x7e,
	0xdf, 0xe5, 0x98, 0x53, 0xb7, 0xcf, 0xa4, 0x79, 0x65, 0x53, 0x8d, 0x8a, 0x56, 0x7b, 0x70, 0xbf,
	0xce, 0xa9, 0x43, 0x18, 0xc7, 0x8e, 0xa7, 0x0c, 0xce, 0x4e, 0x1b, 0x10, 0xc7, 0xe3, 0x43, 0x35,
	0xf8, 0x6a, 0x97, 0xf2, 0x4f, 0x07, 0xed, 0x5a, 0xc7, 0x75, 0xea, 0xce, 0x11, 0xe5, 0x0f, 0xdc,
	0xa3, 0x7a, 0xd7, 0xbd, 0x22, 0x06, 0xaf, 0x1c, 0xe2, 0x1e, 0xb5, 0x31, 0x77, 0x7d, 0x56, 0x1f,
	0xfd, 0x29, 0xe7, 0x59, 0xe7, 0x21, 0xb7, 0x1f, 0x24, 0xb7, 0x6b, 0xa3, 0x75, 0x48, 0x51, 0xdb,
	0x34, 0xaa, 0xc6, 0x56, 0xa1, 0x99, 0xfd, 0xfd, 0xb7, 0xcd, 0xd4, 0x87, 0x46, 0x2b, 0x45, 0x6d,
	0xeb, 0x3b, 0x03, 0xb2, 0xfb, 0xdc, 0xc7, 0xb4, 0x8f, 0x5e, 0x83, 0x8c, 0x8d, 0x39, 0x16, 0x46,
	0xc5, 0xab, 0x1b, 0xb5, 0xa9, 0x0a, 0x6b, 0xd2, 0xac, 0x76, 0x03, 0x73, 0x2c, 0x5d, 0x54, 0x8d,
	0x96, 0x98, 0x51, 0x71, 0x20, 0x13, 0xf4, 0x22, 0x04, 0x19, 0x3e, 0xf4, 0x88, 0x0c, 0xd3, 0x12,
	0x7f, 0xa3, 0x55, 0x11, 0x38, 0x25, 0x7a, 0x52, 0xd4, 0x46, 0x0d, 0x00, 0xcc, 0xb9, 0x4f, 0xdb,
	0x03, 0x4e, 0x98, 0x99, 0x16, 0xb1, 0xce, 0x6b, 0x62, 0x35, 0x46, 0x86, 0xad, 0x89, 0x49, 0xd6,
	0xf7, 0x06, 0xe4, 0xf6, 0x7a, 0x98, 0x39, 0xd4, 0x46, 0xaf, 0x47, 0x92, 0x3e, 0x37, 0xe3, 0x48,
	0xd9, 0xc5, 0x65, 0xdd, 0x3f, 0x46, 0xd6, 0xcd, 0x98, 0xac, 0x2d, 0x5d, 0x30, 0x4d, 0xda, 0xbf,
	0x64, 0xe0, 0xd4, 0x74, 0x5d, 0xc1, 0x72, 0x74, 0x7c, 0x82, 0x39, 0xb1, 0x0f, 0x30, 0x57, 0x55,
	0x54, 0x6a, 0x52, 0x0c, 0xb5, 0x50, 0x0c, 0xb5, 0x7b, 0xa1, 0x5a, 0x46, 0x25, 0x14, 0xd4, 0xac,
	0x06, 0x0f, 0x5c, 0x0c, 0x3c, 0x3b, 0x74, 0x91, 0x5a, 0xdc, 0x85, 0x9a, 0xd5, 0xe0, 0xe8, 0xe2,
	0x38, 0x8b, 0xf6, 0x50, 0x94, 0x37, 0x56, 0x49, 0x18, 0xa9, 0x39, 0x0c, 0xcc, 0xc2, 0x48, 0xed,
	0xa1, 0x99, 0x89, 0x9a, 0xa9, 0x91, 0xe6, 0x10, 0x99, 0x90, 0x63, 0x03, 0xc7, 0xc1, 0xfe, 0xd0,
	0x5c, 0x16, 0x2b, 0x18, 0x36, 0xd1, 0x65, 0x38, 0x45, 0x6c, 0xca, 0x71, 0xbb, 0x47, 0x0e, 0x42,
	0x93, 0xac, 0x30, 0x29, 0x87, 0xfd, 0xfb, 0xca, 0x74, 0x03, 0x0a, 0x36, 0xf1, 0x5c, 0x46, 0xb9,
	0xeb, 0x9b, 0x39, 0x61, 0x33, 0xee, 0x40, 0x6b, 0xb0, 0xdc, 0x25, 0x7d, 0xc2, 0xcc, 0x7c, 0x35,
	0xbd, 0x55, 0x68, 0xc9, 0x46, 0x10, 0xd8, 0x6e, 0x3f, 0xf4, 0xc9, 0x7d, 0x66, 0x16, 0x44, 0x7f,
	0xd8, 0x44, 0x16, 0x94, 0xbc, 0x41, 0xbb, 0x47, 0x3b, 0xf2, 0x54, 0x9a, 0x20, 0x86, 0x23, 0x7d,
	0xa8, 0x0e, 0x65, 0x36, 0x64, 0x9c, 0x38, 0x98, 0xd3, 0xce, 0x41, 0x1f, 0x3b, 0xc4, 0x2c, 0x46,
	0x4a, 0x5c, 0x1d, 0x0f, 0xdf, 0xc5, 0x0e, 0x41, 0x1b, 0xb0, 0xdc, 0xc3, 0x6d, 0xd2, 0x33, 0x4b,
	0x11, 0x33, 0xd9, 0x89, 0xaa, 0x90, 0x63, 0x1e, 0xe9, 0x50, 0xc2, 0xcc, 0x95, 0xc8, 0x78, 0xd8,
	0x1d, 0xa4, 0xeb, 0x49, 0xc5, 0x98, 0xab, 0x72, 0x9d, 0x54, 0x13, 0xad, 0x43, 0xd6, 0xc3, 0x3e,
	0xe9, 0x73, 0xb3, 0x2c, 0x06, 0x54, 0x2b, 0x28, 0x3b, 0xc8, 0x8b, 0x99, 0xa7, 0x64, 0xd9, 0xa2,
	0x61, 0xfd, 0x99, 0x86, 0xff, 0xcd, 0x48, 0xef, 0x44, 0x59, 0x4f, 0x8f, 0xb2, 0xce, 0x42, 0x81,
	0x3a, 0xb8, 0x4b, 0x0e, 0x1c, 0xec, 0x49, 0x4d, 0xb5, 0xf2, 0xa2, 0xe3, 0x0e, 0xf6, 0x50, 0x05,
	0xf2, 0x8c, 0x7c, 0x36, 0x20, 0xfd, 0x0e, 0x91, 0x42, 0x6a, 0x8d, 0xda, 0xa8, 0x02, 0x19, 0xa1,
	0xc3, 0xa8, 0x80, 0x44, 0x9f, 0xf5, 0x8d, 0x01, 0x85, 0xbb, 0xe4, 0x48, 0xc1, 0xfb, 0x5a, 0x84,
	0x83, 0x9b, 0x33, 0x68, 0x1a, 0x59, 0xc6, 0x91, 0xf0, 0x93, 0x04, 0x12, 0xde, 0x88, 0x90, 0x4f,
	0x6a, 0xe0, 0x82, 0xde, 0xbd, 0x86, 0x7d, 0xdf, 0x1a, 0x00, 0x77, 0xc9, 0x51, 0x48, 0xed, 0x37,
	0x23, 0xd9, 0x56, 0xe3, 0xdc, 0x25, 0x80, 0x1b, 0x27, 0xa4, 0xbb, 0x13, 0x93, 0xee, 0xc5, 0x04,
	0xff, 0x9a, 0x7c, 0x7f, 0x4d, 0xc3, 0xe9, 0x98, 0x9a, 0xa6, 0xe4, 0x6c, 0x2c, 0x26, 0xe7, 0xd4,
	0x02, 0x72, 0x4e, 0xcf, 0x97, 0x73, 0x26, 0x5e, 0xce, 0x23, 0xc1, 0x2e, 0x6b, 0x04, 0x9b, 0x8d,
	0x0a, 0xf6, 0xc2, 0x8c, 0xfc, 0xc7, 0xa9, 0x8d, 0x8f, 0xc1, 0xb4, 0xac, 0xf3, 0x8b, 0x01, 0xb3,
	0xb0, 0x18, 0x30, 0x61, 0x0e, 0x30, 0x8b, 0x73, 0x81, 0x59, 0xd2, 0x01, 0x73, 0x25, 0x1e, 0x98,
	0xab, 0x93, 0xc0, 0x7c, 0x9c, 0x82, 0xb5, 0x38, 0x09, 0x9c, 0x6c, 0xaf, 0x96, 0x5a, 0x85, 0x04,
	0x6a, 0x81, 0x86, 0x5a, 0xc5, 0x18, 0x6a, 0xfd, 0x60, 0xc0, 0xea, 0xce, 0x43, 0xca, 0x38, 0xed,
	0x77, 0x15, 0xba, 0xae, 0x47, 0x60, 0x30, 0xcb, 0x96, 0xa8, 0x79, 0x1c, 0x10, 0x06, 0xc7, 0xb8,
	0xc9, 0xed, 0xc6, 0xdc, 0xe4, 0x2e, 0xcf, 0x89, 0xa9, 0x81, 0xc4, 0x4f, 0x06, 0x94, 0x43, 0xc3,
	0x90, 0x6c, 0x8d, 0x48, 0x31, 0x17, 0xb5, 0x8e, 0x13, 0xf0, 0x76, 0x78, 0x8c, 0x6a, 0xde, 0x89,
	0xa9, 0xe6, 0xa5, 0x79, 0x41, 0x35, 0xe5, 0xfc, 0x91, 0x01, 0x53, 0x57, 0xf7, 0xc9, 0x6d, 0x42,
	0x77, 0x9b, 0x18, 0x9d, 0xcf, 0x9c, 0xe6, 0x7c, 0xe6, 0x13, 0xce, 0x67, 0x61, 0xd1, 0xf3, 0xf9,
	0x4c, 0xdd, 0x57, 0xbf, 0xcc, 0xc0, 0x73, 0x5a, 0x49, 0x9e, 0x28, 0xed, 0xe9, 0x53, 0xda, 0x7f,
	0x72, 0x7f, 0xfd, 0xd1, 0x80, 0x92, 0xc4, 0xcc, 0x7b, 0x62, 0x9d, 0xd0, 0x5b, 0x11, 0x74, 0x5a,
	0x9a, 0x37, 0x01, 0x69, 0x1c, 0xc7, 0xcd, 0xcf, 0x13, 0xb8, 0xb9, 0x3e, 0xe6, 0xe6, 0xe4, 0xf3,
	0x07, 0xba, 0x19, 0xc3, 0xcf, 0x4b, 0x89, 0x91, 0x35, 0xf0, 0xfc, 0xd9, 0x80, 0x15, 0xa5, 0x65,
	0x55, 0xce, 0xdb, 0x91, 0x72, 0x5e, 0xd0, 0x3d, 0x16, 0xe8, 0xeb, 0xf9, 0xe2, 0x1f, 0xd4, 0x73,
	0x2b, 0xa6, 0x9e, 0xad, 0xe4, 0xd0, 0x9a, 0x82, 0xbe, 0x4a, 0xc3, 0x7a, 0x7c, 0xdd, 0x53, 0xa2,
	0x37, 0x16, 0x10, 0x7d, 0x6a, 0xbe, 0xe8, 0xd3, 0x0b, 0x7c, 0xac, 0x65, 0xb4, 0x1f, 0x6b, 0x0b,
	0x5e, 0x8e, 0xa6, 0xc5, 0x9e, 0x8b, 0x11, 0xfb, 0xa5, 0x59, 0xac, 0xe6, 0x45, 0xdc, 0x69, 0x9c,
	0xae, 0x85, 0x38, 0x95, 0x77, 0x23, 0x85, 0x51, 0x73, 0x8c, 0x51, 0x50, 0x55, 0xcf, 0xe2, 0xb3,
	0xa8, 0xc3, 0x67, 0x29, 0x1e, 0x9f, 0x2b, 0x93, 0xf8, 0x7c, 0x94, 0x82, 0x33, 0x9a, 0x1d, 0x7c,
	0xc6, 0xb7, 0x26, 0xc2, 0xa1, 0x7c, 0x02, 0x87, 0x0a, 0x53, 0x1c, 0x42, 0x8a, 0x43, 0x72, 0x47,
	0x24, 0x7f, 0x1e, 0x1b, 0xe1, 0x73, 0xdc, 0xb6, 0xdb, 0xeb, 0x91, 0x4e, 0x10, 0x02, 0x35, 0x47,
	0x87, 0x36, 0xbd, 0x55, 0xbc, 0xfa, 0xa2, 0x86, 0x04, 0xe3, 0x09, 0x31, 0xe7, 0x16, 0xbd, 0x0c,
	0x19, 0x87, 0x70, 0xac, 0x7e, 0x77, 0xfe, 0x3f, 0xe3, 0xe3, 0x0e, 0x99, 0x9c, 0x12, 0x98, 0x3e,
	0xe9, 0x07, 0xd4, 0xbf, 0x8c, 0xd1, 0x83, 0xd1, 0x44, 0xed, 0xdb, 0x91, 0xda, 0x2f, 0xe9, 0xa8,
	0xf1, 0xaf, 0x17, 0xff, 0xa4, 0xdf, 0x61, 0x3f, 0x80, 0xb2, 0x78, 0x15, 0xdf, 0xc3, 0x3e, 0x76,
	0x08, 0x27, 0x3e, 0x0b, 0x0e, 0x60, 0x67, 0xe0, 0x33, 0xd7, 0x17, 0xc1, 0xd3, 0x2d, 0xd5, 0x12,
	0x47, 0x9c, 0x3a, 0x54, 0xde, 0x21, 0xd2, 0x2d, 0xd9, 0x08, 0xac, 0xef, 0xd3, 0x1e, 0x27, 0xbe,
	0x3a, 0x19, 0xaa, 0x65, 0xed, 0x43, 0x26, 0x28, 0x0f, 0x6d, 0x42, 0xb1, 0x4f, 0x1e, 0xf2, 0x83,
	0x88, 0x4b, 0x08, 0xba, 0xb6, 0x93, 0xdc, 0xae, 0xc1, 0x32, 0x77, 0x39, 0xee, 0x09, 0xaf, 0xe9,
	0x96, 0x6c, 0x5c, 0x7d, 0x94, 0x0d, 0x7e, 0x26, 0xdd, 0xce, 0x83, 0x7d, 0xe2, 0x1f, 0xd2, 0x0e,
	0x41, 0xd7, 0xa1, 0x70, 0x93, 0x70, 0xf5, 0xed, 0x64, 0xc6, 0x6c, 0xbc, 0x78, 0xf0, 0xaf, 0x9c,
	0xd1, 0x48, 0xc2, 0x5a, 0x0a, 0x16, 0xf1, 0x26, 0xe1, 0xe1, 0x17, 0x8b, 0xde, 0x85, 0xa9, 0x5b,
	0x58, 0x6b, 0x09, 0xed, 0x40, 0x69, 0x5b, 0xdc, 0x82, 0x54, 0x22, 0x15, 0xfd, 0x93, 0x50, 0x52,
	0x2a, 0xb7, 0x60, 0x45, 0xba, 0x09, 0xb3, 0x39, 0x9b, 0xf0, 0x56, 0x93, 0x98, 0xd0, 0x2d, 0x28,
	0x49, 0x1a, 0xaa, 0x84, 0xce, 0x25, 0xfe, 0x8a, 0x27, 0xe5, 0xf4, 0x2e, 0xac, 0x48, 0xa3, 0x30,
	0xa7, 0xe7, 0x93, 0x7f, 0x40, 0x13, 0xd3, 0x6a, 0x40, 0xb1, 0x45, 0x1c, 0xf7, 0x90, 0x88, 0x45,
	0x4d, 0x58, 0xec, 0xf5, 0x99, 0xfb, 0xe9, 0x8e, 0xe3, 0xf1, 0xa1, 0xb5, 0x84, 0xee, 0x41, 0xf1,
	0x36, 0x65, 0x6a, 0xc7, 0x19, 0xaa, 0xc6, 0xbb, 0x18, 0xab, 0xb9, 0x72, 0x7e, 0x2e, 0xb6, 0xac,
	0x25, 0xf4, 0x3e, 0x94, 0x02, 0xaf, 0x2a, 0xd3, 0x45, 0xdc, 0x5a, 0xf3, 0x89, 0x20, 0xf6, 0x01,
	0x6e, 0xbb, 0xd8, 0x56, 0xbb, 0xb0, 0x39, 0xe7, 0xcb, 0x3a, 0x79, 0x1f, 0x8a, 0x81, 0xa7, 0x70,
	0x17, 0xaa, 0xf3, 0x3e, 0x6b, 0x93, 0xf6, 0xa1, 0xe9, 0xc0, 0x69, 0xd7, 0xef, 0x4e, 0x1b, 0x34,
	0x41, 0x16, 0x19, 0x2c, 0xf9, 0x9e, 0xf1, 0xf1, 0x1b, 0x13, 0xff, 0xcf, 0x26, 0x2c, 0x9b, 0x98,
	0x91, 0x7a, 0xd7, 0xbd, 0xd2, 0x25, 0x7d, 0xb1, 0x2d, 0xf5, 0xd1, 0x7c, 0xec, 0x51, 0x56, 0x17,
	0x3e, 0xae, 0x89, 0x7f, 0x1f, 0x1b, 0xc6, 0xd7, 0xa9, 0xfc, 0x8d, 0xdd, 0xed, 0x7b, 0x1f, 0x35,
	0xf6, 0x76, 0xdb, 0x59, 0x61, 0xfe, 0xca, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xab, 0x95,
	0xf9, 0x34, 0x1c, 0x00, 0x00,
}
