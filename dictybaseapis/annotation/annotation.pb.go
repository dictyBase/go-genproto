// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: dictybase/annotation/annotation.proto

package annotation

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	upload "github.com/dictyBase/go-genproto/dictybaseapis/api/upload"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnnotationGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the annotation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// unique identifier of a group
	GroupId string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *AnnotationGroupId) Reset() {
	*x = AnnotationGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationGroupId) ProtoMessage() {}

func (x *AnnotationGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationGroupId.ProtoReflect.Descriptor instead.
func (*AnnotationGroupId) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{0}
}

func (x *AnnotationGroupId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotationGroupId) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type AnnotationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the annotation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AnnotationId) Reset() {
	*x = AnnotationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationId) ProtoMessage() {}

func (x *AnnotationId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationId.ProtoReflect.Descriptor instead.
func (*AnnotationId) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{1}
}

func (x *AnnotationId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Identifiers for grouping list of tagged annotations
type AnnotationIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of unique identifiers
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AnnotationIdList) Reset() {
	*x = AnnotationIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationIdList) ProtoMessage() {}

func (x *AnnotationIdList) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationIdList.ProtoReflect.Descriptor instead.
func (*AnnotationIdList) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{2}
}

func (x *AnnotationIdList) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GroupEntryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier of a group
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GroupEntryId) Reset() {
	*x = GroupEntryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupEntryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEntryId) ProtoMessage() {}

func (x *GroupEntryId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEntryId.ProtoReflect.Descriptor instead.
func (*GroupEntryId) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{3}
}

func (x *GroupEntryId) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Group of tagged annotations
type TaggedAnnotationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TaggedAnnotationGroup_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// unique identifier for the annotation group
	GroupId string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Timestamp for creation an update
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TaggedAnnotationGroup) Reset() {
	*x = TaggedAnnotationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationGroup) ProtoMessage() {}

func (x *TaggedAnnotationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationGroup.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationGroup) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{4}
}

func (x *TaggedAnnotationGroup) GetData() []*TaggedAnnotationGroup_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaggedAnnotationGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TaggedAnnotationGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaggedAnnotationGroup) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// List of tagged annotation groups
type TaggedAnnotationGroupCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TaggedAnnotationGroupCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta                                   `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *TaggedAnnotationGroupCollection) Reset() {
	*x = TaggedAnnotationGroupCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationGroupCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationGroupCollection) ProtoMessage() {}

func (x *TaggedAnnotationGroupCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationGroupCollection.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationGroupCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{5}
}

func (x *TaggedAnnotationGroupCollection) GetData() []*TaggedAnnotationGroupCollection_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaggedAnnotationGroupCollection) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Definition for various fields that are needed for fetching annotation for an
// entry. The tag, ontology and entry_id must be provided, version and rank are
// optional and their default values are used.
type EntryAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifiable tagname for the annotation, primarily
	// a structured tag, generally an ontology term.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// unique identifier of a biological entity that is being annotated
	EntryId string `protobuf:"bytes,2,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Name of ontology in which the tag name is taken
	Ontology string `protobuf:"bytes,3,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// Ordering of annotation when an entry has multiple annotations with
	// identical tag from the same ontology. By default, rank 0 is assumed.
	Rank int64 `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	// Status for active or retired annotation. Active annotation is chosen by default.
	IsObsolete bool `protobuf:"varint,5,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
}

func (x *EntryAnnotationRequest) Reset() {
	*x = EntryAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryAnnotationRequest) ProtoMessage() {}

func (x *EntryAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryAnnotationRequest.ProtoReflect.Descriptor instead.
func (*EntryAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{6}
}

func (x *EntryAnnotationRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *EntryAnnotationRequest) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *EntryAnnotationRequest) GetOntology() string {
	if x != nil {
		return x.Ontology
	}
	return ""
}

func (x *EntryAnnotationRequest) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *EntryAnnotationRequest) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

type DeleteAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the annotation
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// flag to indicate whether the entry will be wiped or turned obsolete(soft delete)
	Purge bool `protobuf:"varint,2,opt,name=purge,proto3" json:"purge,omitempty"`
}

func (x *DeleteAnnotationRequest) Reset() {
	*x = DeleteAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnnotationRequest) ProtoMessage() {}

func (x *DeleteAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnnotationRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAnnotationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteAnnotationRequest) GetPurge() bool {
	if x != nil {
		return x.Purge
	}
	return false
}

// Definition of various fields needed to fetch a tag information
type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// human readable name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ontology to which this tag belong
	Ontology string `protobuf:"bytes,2,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// status for active or retired tag
	IsObsolete bool `protobuf:"varint,3,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{8}
}

func (x *TagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagRequest) GetOntology() string {
	if x != nil {
		return x.Ontology
	}
	return ""
}

func (x *TagRequest) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

// List of paginated tagged annotations
type TaggedAnnotationCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TaggedAnnotationCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta                              `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *TaggedAnnotationCollection) Reset() {
	*x = TaggedAnnotationCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationCollection) ProtoMessage() {}

func (x *TaggedAnnotationCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationCollection.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{9}
}

func (x *TaggedAnnotationCollection) GetData() []*TaggedAnnotationCollection_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaggedAnnotationCollection) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Definition of an tag value based biological annotation where the tag always
// represents a term from ontology.
type TaggedAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TaggedAnnotation_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaggedAnnotation) Reset() {
	*x = TaggedAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotation) ProtoMessage() {}

func (x *TaggedAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotation.ProtoReflect.Descriptor instead.
func (*TaggedAnnotation) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{10}
}

func (x *TaggedAnnotation) GetData() *TaggedAnnotation_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition of annotation tag
type AnnotationTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// human readable name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// ontology to which this tag belong
	Ontology string `protobuf:"bytes,3,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// status for active or retired tag
	IsObsolete bool `protobuf:"varint,4,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
}

func (x *AnnotationTag) Reset() {
	*x = AnnotationTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationTag) ProtoMessage() {}

func (x *AnnotationTag) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationTag.ProtoReflect.Descriptor instead.
func (*AnnotationTag) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{11}
}

func (x *AnnotationTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotationTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnnotationTag) GetOntology() string {
	if x != nil {
		return x.Ontology
	}
	return ""
}

func (x *AnnotationTag) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

// Definition of various tagged annotation attributes
type TaggedAnnotationAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// annotation in plain text format
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// serialized text content in a format recognized by frontend rich text
	// editor
	EditableValue string `protobuf:"bytes,2,opt,name=editable_value,json=editableValue,proto3" json:"editable_value,omitempty"`
	// Unique identifier(generally email) of the user who created the annotation
	// Timestamp for creation
	CreatedBy string                 `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// An identifiable tagname for the annotation, primarily
	// a structured tag, generally an ontology term.
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// version refers to the current version no
	Version int64 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// unique identifier of a biological entity that is being annotated
	EntryId string `protobuf:"bytes,7,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Name of ontology in which the tag name is taken
	Ontology string `protobuf:"bytes,8,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// Ordering of annotation when an entry has multiple annotations with
	// identical tag from the same ontology.
	Rank int64 `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
	// Status for active or retired annotation
	IsObsolete bool `protobuf:"varint,10,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
}

func (x *TaggedAnnotationAttributes) Reset() {
	*x = TaggedAnnotationAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationAttributes) ProtoMessage() {}

func (x *TaggedAnnotationAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationAttributes.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{12}
}

func (x *TaggedAnnotationAttributes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TaggedAnnotationAttributes) GetEditableValue() string {
	if x != nil {
		return x.EditableValue
	}
	return ""
}

func (x *TaggedAnnotationAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TaggedAnnotationAttributes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaggedAnnotationAttributes) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TaggedAnnotationAttributes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TaggedAnnotationAttributes) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *TaggedAnnotationAttributes) GetOntology() string {
	if x != nil {
		return x.Ontology
	}
	return ""
}

func (x *TaggedAnnotationAttributes) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TaggedAnnotationAttributes) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

// Definition for creating a new tagged annotation
type NewTaggedAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewTaggedAnnotation_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewTaggedAnnotation) Reset() {
	*x = NewTaggedAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTaggedAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaggedAnnotation) ProtoMessage() {}

func (x *NewTaggedAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaggedAnnotation.ProtoReflect.Descriptor instead.
func (*NewTaggedAnnotation) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{13}
}

func (x *NewTaggedAnnotation) GetData() *NewTaggedAnnotation_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// NewTaggedAnnotation defines attributes for creating a new annotation
type NewTaggedAnnotationAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// annotation in plain text format
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// serialized text content in a format recognized by frontend rich text
	// editor
	EditableValue string `protobuf:"bytes,2,opt,name=editable_value,json=editableValue,proto3" json:"editable_value,omitempty"`
	// Unique identifier(generally email) of the user who created the annotation
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// An identifiable tagname for the annotation, primarily
	// a structured tag, generally an ontology term.
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	// unique identifier of a biological entity that is being annotated
	EntryId string `protobuf:"bytes,5,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Name of ontology from which the tag name is taken
	Ontology string `protobuf:"bytes,6,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// Ordering of annotation when an entry has multiple annotations with
	// identical tag from the same ontology. By default, rank 0 is used.
	Rank int64 `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *NewTaggedAnnotationAttributes) Reset() {
	*x = NewTaggedAnnotationAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTaggedAnnotationAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaggedAnnotationAttributes) ProtoMessage() {}

func (x *NewTaggedAnnotationAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaggedAnnotationAttributes.ProtoReflect.Descriptor instead.
func (*NewTaggedAnnotationAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{14}
}

func (x *NewTaggedAnnotationAttributes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NewTaggedAnnotationAttributes) GetEditableValue() string {
	if x != nil {
		return x.EditableValue
	}
	return ""
}

func (x *NewTaggedAnnotationAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NewTaggedAnnotationAttributes) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NewTaggedAnnotationAttributes) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *NewTaggedAnnotationAttributes) GetOntology() string {
	if x != nil {
		return x.Ontology
	}
	return ""
}

func (x *NewTaggedAnnotationAttributes) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// Definition for updating an existing annotation
type TaggedAnnotationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TaggedAnnotationUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaggedAnnotationUpdate) Reset() {
	*x = TaggedAnnotationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationUpdate) ProtoMessage() {}

func (x *TaggedAnnotationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationUpdate.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{15}
}

func (x *TaggedAnnotationUpdate) GetData() *TaggedAnnotationUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// TaggedUpdateAnnotation defines attributes for updating an existing annotation
type TaggedAnnotationUpdateAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// annotation in plain text format
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// serialized text content in a format recognized by frontend rich text
	// editor
	EditableValue string `protobuf:"bytes,2,opt,name=editable_value,json=editableValue,proto3" json:"editable_value,omitempty"`
	// Unique identifier(generally email) of the user who created the annotation
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *TaggedAnnotationUpdateAttributes) Reset() {
	*x = TaggedAnnotationUpdateAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationUpdateAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationUpdateAttributes) ProtoMessage() {}

func (x *TaggedAnnotationUpdateAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationUpdateAttributes.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationUpdateAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{16}
}

func (x *TaggedAnnotationUpdateAttributes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TaggedAnnotationUpdateAttributes) GetEditableValue() string {
	if x != nil {
		return x.EditableValue
	}
	return ""
}

func (x *TaggedAnnotationUpdateAttributes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

// ListParameters defines fields for manipulating output of TaggedAnnotation collection
type ListParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the list
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data returned by the collection. It
	// accepts one or more filtering conditions using the syntax:
	//
	//	field_name operator expression
	//
	// Available fields for filtering from `AnnotationAttributes`:
	//   - entry_id    - Identifier of the annotated entry (string)
	//   - value       - Annotation text content (string)
	//   - created_by  - Email of the creator (string)
	//   - tag         - Ontology term used as tag (string)
	//   - ontology    - Source ontology name (string)
	//   - version     - Version number (number)
	//   - rank        - Ordering of annotation (number)
	//   - is_obsolete - Status of annotation (boolean)
	//
	// String operators:
	//   - =~    Contains substring
	//   - !~    Does not contain substring
	//   - ===   Equals exactly
	//   - !==   Not equals
	//
	// Numeric operators:
	//   - ==    Equals
	//   - !=    Not equals
	//   - >     Greater than
	//   - <     Less than
	//   - =<    Less than or equal to
	//   - >=    Greater than or equal to
	//
	// Boolean operators:
	//   - ==    Equals
	//   - !=    Not equals
	//
	// Examples:
	//
	//	filter: "created_by===caboose@abc.com"
	//	filter: "entry_id===DDB_G4839483"
	//	filter: "value=~actin"
	//	filter: "tag===GO:0005634"
	//	filter: "ontology===cellular_component"
	//	filter: "version>3"
	//	filter: "rank==0"
	//	filter: "is_obsolete==false"
	//	filter: "value!~pseudogene"
	//	filter: "created_by!==anonymous@dictybase.org"
	//
	// Combine filters with boolean operators:
	//   - OR: represented by comma (,)
	//   - AND: represented by semicolon (;)
	//   - AND takes precedence over OR
	//
	// Example of combined filters:
	//
	//	filter: "value=~cytoskeleton;tag===cell membrane;ontology===cellular"
	//	filter: "entry_id===DDB_G0285418;is_obsolete==false"
	//	filter: "created_by===curator@dictybase.org;version>2;rank==0"
	//	filter: "tag===GO:0005634,tag===GO:0005737" (entries with nuclear OR cytoplasmic localization)
	//	filter: "ontology===molecular_function;value=~transport" (transport-related functions)
	//
	// Note: URL-reserved characters must be properly encoded in HTTP requests.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListParameters) Reset() {
	*x = ListParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameters) ProtoMessage() {}

func (x *ListParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameters.ProtoReflect.Descriptor instead.
func (*ListParameters) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{17}
}

func (x *ListParameters) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ListParameters) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListParameters) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListGroupParameters defines fields for manipulating output of TaggedAnnotationGroupCollection collection
type ListGroupParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the list
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data return by the collection. To use
	// it, supply one or multiple allowed fields to filter followed
	// by a filter expression. It uses the following syntax...
	//
	//	field_name operator expression
	//
	// The following fields of `AnnotationAttributes` definition are allowed to
	// be used for filtering
	//   - entry_id    - The entry that is being annotated (string)
	//   - created_by  - Email id of the user (string)
	//   - tag         - Tag name, a term from an ontology (string).
	//   - ontology    - Ontology that provides the tag names (string).
	//   - rank        - Ordering of annotation (number).
	//
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded for http request.
	//
	//	Operators for strings
	//	      =~    Contains substring
	//	      !~   Not contains substring
	//	      ===  Equals
	//	      !==  Not equals
	//
	//	Operators for numbers
	//	      ==  Equals
	//	      !=  Not equals
	//	      >   Greater than
	//	      <   Less than
	//	      =<  Less than equal to
	//	      >=  Greater than equal to
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded for http request.
	//
	//	filter: "created_by==caboose@abc.com"
	//	filter: "entry_id==DDB_G4839483"
	//	filter: "tag==growth"
	//
	// Filter can be combined using OR or AND boolean logic.
	//
	//   - The OR is represented using a comma(,).
	//
	//   - The AND is represented using a semi-colon(;).
	//
	//   - AND and OR operators can be combined and AND takes precedence over OR.
	//
	//     filter: "tag~cytoskeletion;entry_id==DDB_G4839783;ontology==cellular"
	//     filter: "tag~membrane;entry_id==DDB_G4839783;ontology==cellular;rank=0"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListGroupParameters) Reset() {
	*x = ListGroupParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupParameters) ProtoMessage() {}

func (x *ListGroupParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupParameters.ProtoReflect.Descriptor instead.
func (*ListGroupParameters) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{18}
}

func (x *ListGroupParameters) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ListGroupParameters) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListGroupParameters) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the collection. Set the
	// cursor value parameter to the value of next_cursor to retrieve the next
	// set of collection using the same method
	NextCursor int64 `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{19}
}

func (x *Meta) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *Meta) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TaggedAnnotationGroup_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name, by default should be annotation
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// unique identifier for the annotation
	Id         string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *TaggedAnnotationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *TaggedAnnotationGroup_Data) Reset() {
	*x = TaggedAnnotationGroup_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationGroup_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationGroup_Data) ProtoMessage() {}

func (x *TaggedAnnotationGroup_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationGroup_Data.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationGroup_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TaggedAnnotationGroup_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaggedAnnotationGroup_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaggedAnnotationGroup_Data) GetAttributes() *TaggedAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type TaggedAnnotationGroupCollection_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name, by default it should be annotation group
	Type  string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Group *TaggedAnnotationGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *TaggedAnnotationGroupCollection_Data) Reset() {
	*x = TaggedAnnotationGroupCollection_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationGroupCollection_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationGroupCollection_Data) ProtoMessage() {}

func (x *TaggedAnnotationGroupCollection_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationGroupCollection_Data.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationGroupCollection_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TaggedAnnotationGroupCollection_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaggedAnnotationGroupCollection_Data) GetGroup() *TaggedAnnotationGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type TaggedAnnotationCollection_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name, by default should be annotation
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// unique identifier for the annotation
	Id         string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *TaggedAnnotationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *TaggedAnnotationCollection_Data) Reset() {
	*x = TaggedAnnotationCollection_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationCollection_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationCollection_Data) ProtoMessage() {}

func (x *TaggedAnnotationCollection_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationCollection_Data.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationCollection_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TaggedAnnotationCollection_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaggedAnnotationCollection_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaggedAnnotationCollection_Data) GetAttributes() *TaggedAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type TaggedAnnotation_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name, by default should be annotation
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// unique identifier for the annotation
	Id         string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *TaggedAnnotationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *TaggedAnnotation_Data) Reset() {
	*x = TaggedAnnotation_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotation_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotation_Data) ProtoMessage() {}

func (x *TaggedAnnotation_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotation_Data.ProtoReflect.Descriptor instead.
func (*TaggedAnnotation_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{10, 0}
}

func (x *TaggedAnnotation_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaggedAnnotation_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaggedAnnotation_Data) GetAttributes() *TaggedAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type NewTaggedAnnotation_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name, by default should be annotation
	Type       string                         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *NewTaggedAnnotationAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NewTaggedAnnotation_Data) Reset() {
	*x = NewTaggedAnnotation_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTaggedAnnotation_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaggedAnnotation_Data) ProtoMessage() {}

func (x *NewTaggedAnnotation_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaggedAnnotation_Data.ProtoReflect.Descriptor instead.
func (*NewTaggedAnnotation_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{13, 0}
}

func (x *NewTaggedAnnotation_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewTaggedAnnotation_Data) GetAttributes() *NewTaggedAnnotationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type TaggedAnnotationUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name, by default should be annotation
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// unique identifier for the annotation
	Id         string                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *TaggedAnnotationUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *TaggedAnnotationUpdate_Data) Reset() {
	*x = TaggedAnnotationUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_annotation_annotation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggedAnnotationUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggedAnnotationUpdate_Data) ProtoMessage() {}

func (x *TaggedAnnotationUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_annotation_annotation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggedAnnotationUpdate_Data.ProtoReflect.Descriptor instead.
func (*TaggedAnnotationUpdate_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_annotation_annotation_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TaggedAnnotationUpdate_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaggedAnnotationUpdate_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaggedAnnotationUpdate_Data) GetAttributes() *TaggedAnnotationUpdateAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_dictybase_annotation_annotation_proto protoreflect.FileDescriptor

var file_dictybase_annotation_annotation_proto_rawDesc = []byte{
	0x0a, 0x25, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x11, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0c, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x31, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x7c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x1f, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a,
	0x5d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xae,
	0x01, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x47, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x70, 0x75, 0x72, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73,
	0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x1a, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x7c, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x7c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x0d, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73,
	0x6f, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x1a, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba,
	0x48, 0x3d, 0xba, 0x01, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a,
	0x0e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6f, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x1d,
	0x4e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0xba, 0x01, 0x3a, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69,
	0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x8a, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0xd0, 0x01, 0x0a, 0x20, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0xba, 0x01, 0x3a, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x22, 0x5e, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x5b, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x3d, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0xea,
	0x0a, 0x0a, 0x17, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a,
	0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x30, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x77, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x1a, 0x2b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x1a, 0x2b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x35, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x11, 0x4f, 0x62, 0x6f, 0x4a, 0x53, 0x4f, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x81, 0x01, 0x0a, 0x18,
	0x6f, 0x72, 0x67, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x08, 0x44, 0x49, 0x43, 0x54, 0x59, 0x41, 0x50, 0x49, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dictybase_annotation_annotation_proto_rawDescOnce sync.Once
	file_dictybase_annotation_annotation_proto_rawDescData = file_dictybase_annotation_annotation_proto_rawDesc
)

func file_dictybase_annotation_annotation_proto_rawDescGZIP() []byte {
	file_dictybase_annotation_annotation_proto_rawDescOnce.Do(func() {
		file_dictybase_annotation_annotation_proto_rawDescData = protoimpl.X.CompressGZIP(file_dictybase_annotation_annotation_proto_rawDescData)
	})
	return file_dictybase_annotation_annotation_proto_rawDescData
}

var file_dictybase_annotation_annotation_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_dictybase_annotation_annotation_proto_goTypes = []interface{}{
	(*AnnotationGroupId)(nil),                    // 0: dictybase.annotation.AnnotationGroupId
	(*AnnotationId)(nil),                         // 1: dictybase.annotation.AnnotationId
	(*AnnotationIdList)(nil),                     // 2: dictybase.annotation.AnnotationIdList
	(*GroupEntryId)(nil),                         // 3: dictybase.annotation.GroupEntryId
	(*TaggedAnnotationGroup)(nil),                // 4: dictybase.annotation.TaggedAnnotationGroup
	(*TaggedAnnotationGroupCollection)(nil),      // 5: dictybase.annotation.TaggedAnnotationGroupCollection
	(*EntryAnnotationRequest)(nil),               // 6: dictybase.annotation.EntryAnnotationRequest
	(*DeleteAnnotationRequest)(nil),              // 7: dictybase.annotation.DeleteAnnotationRequest
	(*TagRequest)(nil),                           // 8: dictybase.annotation.TagRequest
	(*TaggedAnnotationCollection)(nil),           // 9: dictybase.annotation.TaggedAnnotationCollection
	(*TaggedAnnotation)(nil),                     // 10: dictybase.annotation.TaggedAnnotation
	(*AnnotationTag)(nil),                        // 11: dictybase.annotation.AnnotationTag
	(*TaggedAnnotationAttributes)(nil),           // 12: dictybase.annotation.TaggedAnnotationAttributes
	(*NewTaggedAnnotation)(nil),                  // 13: dictybase.annotation.NewTaggedAnnotation
	(*NewTaggedAnnotationAttributes)(nil),        // 14: dictybase.annotation.NewTaggedAnnotationAttributes
	(*TaggedAnnotationUpdate)(nil),               // 15: dictybase.annotation.TaggedAnnotationUpdate
	(*TaggedAnnotationUpdateAttributes)(nil),     // 16: dictybase.annotation.TaggedAnnotationUpdateAttributes
	(*ListParameters)(nil),                       // 17: dictybase.annotation.ListParameters
	(*ListGroupParameters)(nil),                  // 18: dictybase.annotation.ListGroupParameters
	(*Meta)(nil),                                 // 19: dictybase.annotation.Meta
	(*TaggedAnnotationGroup_Data)(nil),           // 20: dictybase.annotation.TaggedAnnotationGroup.Data
	(*TaggedAnnotationGroupCollection_Data)(nil), // 21: dictybase.annotation.TaggedAnnotationGroupCollection.Data
	(*TaggedAnnotationCollection_Data)(nil),      // 22: dictybase.annotation.TaggedAnnotationCollection.Data
	(*TaggedAnnotation_Data)(nil),                // 23: dictybase.annotation.TaggedAnnotation.Data
	(*NewTaggedAnnotation_Data)(nil),             // 24: dictybase.annotation.NewTaggedAnnotation.Data
	(*TaggedAnnotationUpdate_Data)(nil),          // 25: dictybase.annotation.TaggedAnnotationUpdate.Data
	(*timestamppb.Timestamp)(nil),                // 26: google.protobuf.Timestamp
	(*upload.FileUploadRequest)(nil),             // 27: dictybase.api.upload.FileUploadRequest
	(*emptypb.Empty)(nil),                        // 28: google.protobuf.Empty
	(*upload.FileUploadResponse)(nil),            // 29: dictybase.api.upload.FileUploadResponse
}
var file_dictybase_annotation_annotation_proto_depIdxs = []int32{
	20, // 0: dictybase.annotation.TaggedAnnotationGroup.data:type_name -> dictybase.annotation.TaggedAnnotationGroup.Data
	26, // 1: dictybase.annotation.TaggedAnnotationGroup.created_at:type_name -> google.protobuf.Timestamp
	26, // 2: dictybase.annotation.TaggedAnnotationGroup.updated_at:type_name -> google.protobuf.Timestamp
	21, // 3: dictybase.annotation.TaggedAnnotationGroupCollection.data:type_name -> dictybase.annotation.TaggedAnnotationGroupCollection.Data
	19, // 4: dictybase.annotation.TaggedAnnotationGroupCollection.meta:type_name -> dictybase.annotation.Meta
	22, // 5: dictybase.annotation.TaggedAnnotationCollection.data:type_name -> dictybase.annotation.TaggedAnnotationCollection.Data
	19, // 6: dictybase.annotation.TaggedAnnotationCollection.meta:type_name -> dictybase.annotation.Meta
	23, // 7: dictybase.annotation.TaggedAnnotation.data:type_name -> dictybase.annotation.TaggedAnnotation.Data
	26, // 8: dictybase.annotation.TaggedAnnotationAttributes.created_at:type_name -> google.protobuf.Timestamp
	24, // 9: dictybase.annotation.NewTaggedAnnotation.data:type_name -> dictybase.annotation.NewTaggedAnnotation.Data
	25, // 10: dictybase.annotation.TaggedAnnotationUpdate.data:type_name -> dictybase.annotation.TaggedAnnotationUpdate.Data
	12, // 11: dictybase.annotation.TaggedAnnotationGroup.Data.attributes:type_name -> dictybase.annotation.TaggedAnnotationAttributes
	4,  // 12: dictybase.annotation.TaggedAnnotationGroupCollection.Data.group:type_name -> dictybase.annotation.TaggedAnnotationGroup
	12, // 13: dictybase.annotation.TaggedAnnotationCollection.Data.attributes:type_name -> dictybase.annotation.TaggedAnnotationAttributes
	12, // 14: dictybase.annotation.TaggedAnnotation.Data.attributes:type_name -> dictybase.annotation.TaggedAnnotationAttributes
	14, // 15: dictybase.annotation.NewTaggedAnnotation.Data.attributes:type_name -> dictybase.annotation.NewTaggedAnnotationAttributes
	16, // 16: dictybase.annotation.TaggedAnnotationUpdate.Data.attributes:type_name -> dictybase.annotation.TaggedAnnotationUpdateAttributes
	1,  // 17: dictybase.annotation.TaggedAnnotationService.GetAnnotation:input_type -> dictybase.annotation.AnnotationId
	6,  // 18: dictybase.annotation.TaggedAnnotationService.GetEntryAnnotation:input_type -> dictybase.annotation.EntryAnnotationRequest
	17, // 19: dictybase.annotation.TaggedAnnotationService.ListAnnotations:input_type -> dictybase.annotation.ListParameters
	13, // 20: dictybase.annotation.TaggedAnnotationService.CreateAnnotation:input_type -> dictybase.annotation.NewTaggedAnnotation
	15, // 21: dictybase.annotation.TaggedAnnotationService.UpdateAnnotation:input_type -> dictybase.annotation.TaggedAnnotationUpdate
	7,  // 22: dictybase.annotation.TaggedAnnotationService.DeleteAnnotation:input_type -> dictybase.annotation.DeleteAnnotationRequest
	2,  // 23: dictybase.annotation.TaggedAnnotationService.CreateAnnotationGroup:input_type -> dictybase.annotation.AnnotationIdList
	3,  // 24: dictybase.annotation.TaggedAnnotationService.GetAnnotationGroup:input_type -> dictybase.annotation.GroupEntryId
	0,  // 25: dictybase.annotation.TaggedAnnotationService.AddToAnnotationGroup:input_type -> dictybase.annotation.AnnotationGroupId
	3,  // 26: dictybase.annotation.TaggedAnnotationService.DeleteAnnotationGroup:input_type -> dictybase.annotation.GroupEntryId
	18, // 27: dictybase.annotation.TaggedAnnotationService.ListAnnotationGroups:input_type -> dictybase.annotation.ListGroupParameters
	8,  // 28: dictybase.annotation.TaggedAnnotationService.GetAnnotationTag:input_type -> dictybase.annotation.TagRequest
	27, // 29: dictybase.annotation.TaggedAnnotationService.OboJSONFileUpload:input_type -> dictybase.api.upload.FileUploadRequest
	10, // 30: dictybase.annotation.TaggedAnnotationService.GetAnnotation:output_type -> dictybase.annotation.TaggedAnnotation
	10, // 31: dictybase.annotation.TaggedAnnotationService.GetEntryAnnotation:output_type -> dictybase.annotation.TaggedAnnotation
	9,  // 32: dictybase.annotation.TaggedAnnotationService.ListAnnotations:output_type -> dictybase.annotation.TaggedAnnotationCollection
	10, // 33: dictybase.annotation.TaggedAnnotationService.CreateAnnotation:output_type -> dictybase.annotation.TaggedAnnotation
	10, // 34: dictybase.annotation.TaggedAnnotationService.UpdateAnnotation:output_type -> dictybase.annotation.TaggedAnnotation
	28, // 35: dictybase.annotation.TaggedAnnotationService.DeleteAnnotation:output_type -> google.protobuf.Empty
	4,  // 36: dictybase.annotation.TaggedAnnotationService.CreateAnnotationGroup:output_type -> dictybase.annotation.TaggedAnnotationGroup
	4,  // 37: dictybase.annotation.TaggedAnnotationService.GetAnnotationGroup:output_type -> dictybase.annotation.TaggedAnnotationGroup
	4,  // 38: dictybase.annotation.TaggedAnnotationService.AddToAnnotationGroup:output_type -> dictybase.annotation.TaggedAnnotationGroup
	28, // 39: dictybase.annotation.TaggedAnnotationService.DeleteAnnotationGroup:output_type -> google.protobuf.Empty
	5,  // 40: dictybase.annotation.TaggedAnnotationService.ListAnnotationGroups:output_type -> dictybase.annotation.TaggedAnnotationGroupCollection
	11, // 41: dictybase.annotation.TaggedAnnotationService.GetAnnotationTag:output_type -> dictybase.annotation.AnnotationTag
	29, // 42: dictybase.annotation.TaggedAnnotationService.OboJSONFileUpload:output_type -> dictybase.api.upload.FileUploadResponse
	30, // [30:43] is the sub-list for method output_type
	17, // [17:30] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_dictybase_annotation_annotation_proto_init() }
func file_dictybase_annotation_annotation_proto_init() {
	if File_dictybase_annotation_annotation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dictybase_annotation_annotation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupEntryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationGroupCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTaggedAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTaggedAnnotationAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationUpdateAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationGroup_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationGroupCollection_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationCollection_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotation_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTaggedAnnotation_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_annotation_annotation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggedAnnotationUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dictybase_annotation_annotation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dictybase_annotation_annotation_proto_goTypes,
		DependencyIndexes: file_dictybase_annotation_annotation_proto_depIdxs,
		MessageInfos:      file_dictybase_annotation_annotation_proto_msgTypes,
	}.Build()
	File_dictybase_annotation_annotation_proto = out.File
	file_dictybase_annotation_annotation_proto_rawDesc = nil
	file_dictybase_annotation_annotation_proto_goTypes = nil
	file_dictybase_annotation_annotation_proto_depIdxs = nil
}
