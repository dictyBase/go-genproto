// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package annotation

import (
	context "context"
	upload "github.com/dictyBase/go-genproto/dictybaseapis/api/upload"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaggedAnnotationServiceClient is the client API for TaggedAnnotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaggedAnnotationServiceClient interface {
	// Retrieves the specified tagged annotation
	GetAnnotation(ctx context.Context, in *AnnotationId, opts ...grpc.CallOption) (*TaggedAnnotation, error)
	// Retrieves a single tagged annotation associated with a specific entry
	GetEntryAnnotation(ctx context.Context, in *EntryAnnotationRequest, opts ...grpc.CallOption) (*TaggedAnnotation, error)
	// List tagged annotations using pagination, ten entries are retrieved by default
	ListAnnotations(ctx context.Context, in *ListParameters, opts ...grpc.CallOption) (*TaggedAnnotationCollection, error)
	// Create a tagged annotation
	CreateAnnotation(ctx context.Context, in *NewTaggedAnnotation, opts ...grpc.CallOption) (*TaggedAnnotation, error)
	// Update an existing annotation, in this case a new annotation entry is
	// created with a link to the previous annotation(copy on write).
	UpdateAnnotation(ctx context.Context, in *TaggedAnnotationUpdate, opts ...grpc.CallOption) (*TaggedAnnotation, error)
	// Delete an existing annotation
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates an annotation group from bunch of existing tagged annotations.
	CreateAnnotationGroup(ctx context.Context, in *AnnotationIdList, opts ...grpc.CallOption) (*TaggedAnnotationGroup, error)
	// Retrieves an annotation group
	GetAnnotationGroup(ctx context.Context, in *GroupEntryId, opts ...grpc.CallOption) (*TaggedAnnotationGroup, error)
	// Adds an existing annotation into an existing annotation group
	AddToAnnotationGroup(ctx context.Context, in *AnnotationGroupId, opts ...grpc.CallOption) (*TaggedAnnotationGroup, error)
	// Remove an annotation group
	DeleteAnnotationGroup(ctx context.Context, in *GroupEntryId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List tagged annotation groups using pagination, ten entries are retrieved by default
	ListAnnotationGroups(ctx context.Context, in *ListGroupParameters, opts ...grpc.CallOption) (*TaggedAnnotationGroupCollection, error)
	// Retrieves tag information
	GetAnnotationTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*AnnotationTag, error)
	// Upload obojson formatted file through client side streaming
	OboJSONFileUpload(ctx context.Context, opts ...grpc.CallOption) (TaggedAnnotationService_OboJSONFileUploadClient, error)
}

type taggedAnnotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaggedAnnotationServiceClient(cc grpc.ClientConnInterface) TaggedAnnotationServiceClient {
	return &taggedAnnotationServiceClient{cc}
}

func (c *taggedAnnotationServiceClient) GetAnnotation(ctx context.Context, in *AnnotationId, opts ...grpc.CallOption) (*TaggedAnnotation, error) {
	out := new(TaggedAnnotation)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/GetAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) GetEntryAnnotation(ctx context.Context, in *EntryAnnotationRequest, opts ...grpc.CallOption) (*TaggedAnnotation, error) {
	out := new(TaggedAnnotation)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/GetEntryAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) ListAnnotations(ctx context.Context, in *ListParameters, opts ...grpc.CallOption) (*TaggedAnnotationCollection, error) {
	out := new(TaggedAnnotationCollection)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/ListAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) CreateAnnotation(ctx context.Context, in *NewTaggedAnnotation, opts ...grpc.CallOption) (*TaggedAnnotation, error) {
	out := new(TaggedAnnotation)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/CreateAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) UpdateAnnotation(ctx context.Context, in *TaggedAnnotationUpdate, opts ...grpc.CallOption) (*TaggedAnnotation, error) {
	out := new(TaggedAnnotation)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/UpdateAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/DeleteAnnotation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) CreateAnnotationGroup(ctx context.Context, in *AnnotationIdList, opts ...grpc.CallOption) (*TaggedAnnotationGroup, error) {
	out := new(TaggedAnnotationGroup)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/CreateAnnotationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) GetAnnotationGroup(ctx context.Context, in *GroupEntryId, opts ...grpc.CallOption) (*TaggedAnnotationGroup, error) {
	out := new(TaggedAnnotationGroup)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/GetAnnotationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) AddToAnnotationGroup(ctx context.Context, in *AnnotationGroupId, opts ...grpc.CallOption) (*TaggedAnnotationGroup, error) {
	out := new(TaggedAnnotationGroup)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/AddToAnnotationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) DeleteAnnotationGroup(ctx context.Context, in *GroupEntryId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/DeleteAnnotationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) ListAnnotationGroups(ctx context.Context, in *ListGroupParameters, opts ...grpc.CallOption) (*TaggedAnnotationGroupCollection, error) {
	out := new(TaggedAnnotationGroupCollection)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/ListAnnotationGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) GetAnnotationTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*AnnotationTag, error) {
	out := new(AnnotationTag)
	err := c.cc.Invoke(ctx, "/dictybase.annotation.TaggedAnnotationService/GetAnnotationTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taggedAnnotationServiceClient) OboJSONFileUpload(ctx context.Context, opts ...grpc.CallOption) (TaggedAnnotationService_OboJSONFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaggedAnnotationService_ServiceDesc.Streams[0], "/dictybase.annotation.TaggedAnnotationService/OboJSONFileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &taggedAnnotationServiceOboJSONFileUploadClient{stream}
	return x, nil
}

type TaggedAnnotationService_OboJSONFileUploadClient interface {
	Send(*upload.FileUploadRequest) error
	CloseAndRecv() (*upload.FileUploadResponse, error)
	grpc.ClientStream
}

type taggedAnnotationServiceOboJSONFileUploadClient struct {
	grpc.ClientStream
}

func (x *taggedAnnotationServiceOboJSONFileUploadClient) Send(m *upload.FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taggedAnnotationServiceOboJSONFileUploadClient) CloseAndRecv() (*upload.FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(upload.FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaggedAnnotationServiceServer is the server API for TaggedAnnotationService service.
// All implementations must embed UnimplementedTaggedAnnotationServiceServer
// for forward compatibility
type TaggedAnnotationServiceServer interface {
	// Retrieves the specified tagged annotation
	GetAnnotation(context.Context, *AnnotationId) (*TaggedAnnotation, error)
	// Retrieves a single tagged annotation associated with a specific entry
	GetEntryAnnotation(context.Context, *EntryAnnotationRequest) (*TaggedAnnotation, error)
	// List tagged annotations using pagination, ten entries are retrieved by default
	ListAnnotations(context.Context, *ListParameters) (*TaggedAnnotationCollection, error)
	// Create a tagged annotation
	CreateAnnotation(context.Context, *NewTaggedAnnotation) (*TaggedAnnotation, error)
	// Update an existing annotation, in this case a new annotation entry is
	// created with a link to the previous annotation(copy on write).
	UpdateAnnotation(context.Context, *TaggedAnnotationUpdate) (*TaggedAnnotation, error)
	// Delete an existing annotation
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*emptypb.Empty, error)
	// Creates an annotation group from bunch of existing tagged annotations.
	CreateAnnotationGroup(context.Context, *AnnotationIdList) (*TaggedAnnotationGroup, error)
	// Retrieves an annotation group
	GetAnnotationGroup(context.Context, *GroupEntryId) (*TaggedAnnotationGroup, error)
	// Adds an existing annotation into an existing annotation group
	AddToAnnotationGroup(context.Context, *AnnotationGroupId) (*TaggedAnnotationGroup, error)
	// Remove an annotation group
	DeleteAnnotationGroup(context.Context, *GroupEntryId) (*emptypb.Empty, error)
	// List tagged annotation groups using pagination, ten entries are retrieved by default
	ListAnnotationGroups(context.Context, *ListGroupParameters) (*TaggedAnnotationGroupCollection, error)
	// Retrieves tag information
	GetAnnotationTag(context.Context, *TagRequest) (*AnnotationTag, error)
	// Upload obojson formatted file through client side streaming
	OboJSONFileUpload(TaggedAnnotationService_OboJSONFileUploadServer) error
	mustEmbedUnimplementedTaggedAnnotationServiceServer()
}

// UnimplementedTaggedAnnotationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaggedAnnotationServiceServer struct {
}

func (UnimplementedTaggedAnnotationServiceServer) GetAnnotation(context.Context, *AnnotationId) (*TaggedAnnotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) GetEntryAnnotation(context.Context, *EntryAnnotationRequest) (*TaggedAnnotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryAnnotation not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) ListAnnotations(context.Context, *ListParameters) (*TaggedAnnotationCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnnotations not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) CreateAnnotation(context.Context, *NewTaggedAnnotation) (*TaggedAnnotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnotation not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) UpdateAnnotation(context.Context, *TaggedAnnotationUpdate) (*TaggedAnnotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnotation not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) CreateAnnotationGroup(context.Context, *AnnotationIdList) (*TaggedAnnotationGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnotationGroup not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) GetAnnotationGroup(context.Context, *GroupEntryId) (*TaggedAnnotationGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotationGroup not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) AddToAnnotationGroup(context.Context, *AnnotationGroupId) (*TaggedAnnotationGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToAnnotationGroup not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) DeleteAnnotationGroup(context.Context, *GroupEntryId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnotationGroup not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) ListAnnotationGroups(context.Context, *ListGroupParameters) (*TaggedAnnotationGroupCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnnotationGroups not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) GetAnnotationTag(context.Context, *TagRequest) (*AnnotationTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotationTag not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) OboJSONFileUpload(TaggedAnnotationService_OboJSONFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method OboJSONFileUpload not implemented")
}
func (UnimplementedTaggedAnnotationServiceServer) mustEmbedUnimplementedTaggedAnnotationServiceServer() {
}

// UnsafeTaggedAnnotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaggedAnnotationServiceServer will
// result in compilation errors.
type UnsafeTaggedAnnotationServiceServer interface {
	mustEmbedUnimplementedTaggedAnnotationServiceServer()
}

func RegisterTaggedAnnotationServiceServer(s grpc.ServiceRegistrar, srv TaggedAnnotationServiceServer) {
	s.RegisterService(&TaggedAnnotationService_ServiceDesc, srv)
}

func _TaggedAnnotationService_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnotationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/GetAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).GetAnnotation(ctx, req.(*AnnotationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_GetEntryAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).GetEntryAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/GetEntryAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).GetEntryAnnotation(ctx, req.(*EntryAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_ListAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).ListAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/ListAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).ListAnnotations(ctx, req.(*ListParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_CreateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTaggedAnnotation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).CreateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/CreateAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).CreateAnnotation(ctx, req.(*NewTaggedAnnotation))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_UpdateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggedAnnotationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).UpdateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/UpdateAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).UpdateAnnotation(ctx, req.(*TaggedAnnotationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/DeleteAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_CreateAnnotationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnotationIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).CreateAnnotationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/CreateAnnotationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).CreateAnnotationGroup(ctx, req.(*AnnotationIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_GetAnnotationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupEntryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).GetAnnotationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/GetAnnotationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).GetAnnotationGroup(ctx, req.(*GroupEntryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_AddToAnnotationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnotationGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).AddToAnnotationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/AddToAnnotationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).AddToAnnotationGroup(ctx, req.(*AnnotationGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_DeleteAnnotationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupEntryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).DeleteAnnotationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/DeleteAnnotationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).DeleteAnnotationGroup(ctx, req.(*GroupEntryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_ListAnnotationGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).ListAnnotationGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/ListAnnotationGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).ListAnnotationGroups(ctx, req.(*ListGroupParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_GetAnnotationTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaggedAnnotationServiceServer).GetAnnotationTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.annotation.TaggedAnnotationService/GetAnnotationTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaggedAnnotationServiceServer).GetAnnotationTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaggedAnnotationService_OboJSONFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaggedAnnotationServiceServer).OboJSONFileUpload(&taggedAnnotationServiceOboJSONFileUploadServer{stream})
}

type TaggedAnnotationService_OboJSONFileUploadServer interface {
	SendAndClose(*upload.FileUploadResponse) error
	Recv() (*upload.FileUploadRequest, error)
	grpc.ServerStream
}

type taggedAnnotationServiceOboJSONFileUploadServer struct {
	grpc.ServerStream
}

func (x *taggedAnnotationServiceOboJSONFileUploadServer) SendAndClose(m *upload.FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taggedAnnotationServiceOboJSONFileUploadServer) Recv() (*upload.FileUploadRequest, error) {
	m := new(upload.FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaggedAnnotationService_ServiceDesc is the grpc.ServiceDesc for TaggedAnnotationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaggedAnnotationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.annotation.TaggedAnnotationService",
	HandlerType: (*TaggedAnnotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnnotation",
			Handler:    _TaggedAnnotationService_GetAnnotation_Handler,
		},
		{
			MethodName: "GetEntryAnnotation",
			Handler:    _TaggedAnnotationService_GetEntryAnnotation_Handler,
		},
		{
			MethodName: "ListAnnotations",
			Handler:    _TaggedAnnotationService_ListAnnotations_Handler,
		},
		{
			MethodName: "CreateAnnotation",
			Handler:    _TaggedAnnotationService_CreateAnnotation_Handler,
		},
		{
			MethodName: "UpdateAnnotation",
			Handler:    _TaggedAnnotationService_UpdateAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _TaggedAnnotationService_DeleteAnnotation_Handler,
		},
		{
			MethodName: "CreateAnnotationGroup",
			Handler:    _TaggedAnnotationService_CreateAnnotationGroup_Handler,
		},
		{
			MethodName: "GetAnnotationGroup",
			Handler:    _TaggedAnnotationService_GetAnnotationGroup_Handler,
		},
		{
			MethodName: "AddToAnnotationGroup",
			Handler:    _TaggedAnnotationService_AddToAnnotationGroup_Handler,
		},
		{
			MethodName: "DeleteAnnotationGroup",
			Handler:    _TaggedAnnotationService_DeleteAnnotationGroup_Handler,
		},
		{
			MethodName: "ListAnnotationGroups",
			Handler:    _TaggedAnnotationService_ListAnnotationGroups_Handler,
		},
		{
			MethodName: "GetAnnotationTag",
			Handler:    _TaggedAnnotationService_GetAnnotationTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OboJSONFileUpload",
			Handler:       _TaggedAnnotationService_OboJSONFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dictybase/annotation/annotation.proto",
}
