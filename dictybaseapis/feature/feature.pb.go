// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feature.proto

package feature

import (
	fmt "fmt"
	jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FeatureId struct {
	// Unique feature identifier
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureId) Reset()         { *m = FeatureId{} }
func (m *FeatureId) String() string { return proto.CompactTextString(m) }
func (*FeatureId) ProtoMessage()    {}
func (*FeatureId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{0}
}

func (m *FeatureId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureId.Unmarshal(m, b)
}
func (m *FeatureId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureId.Marshal(b, m, deterministic)
}
func (m *FeatureId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureId.Merge(m, src)
}
func (m *FeatureId) XXX_Size() int {
	return xxx_messageInfo_FeatureId.Size(m)
}
func (m *FeatureId) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureId.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureId proto.InternalMessageInfo

func (m *FeatureId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FeatureRelationFilter struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of relationship, generally a sequence ontology term
	Relation             string   `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureRelationFilter) Reset()         { *m = FeatureRelationFilter{} }
func (m *FeatureRelationFilter) String() string { return proto.CompactTextString(m) }
func (*FeatureRelationFilter) ProtoMessage()    {}
func (*FeatureRelationFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{1}
}

func (m *FeatureRelationFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureRelationFilter.Unmarshal(m, b)
}
func (m *FeatureRelationFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureRelationFilter.Marshal(b, m, deterministic)
}
func (m *FeatureRelationFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureRelationFilter.Merge(m, src)
}
func (m *FeatureRelationFilter) XXX_Size() int {
	return xxx_messageInfo_FeatureRelationFilter.Size(m)
}
func (m *FeatureRelationFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureRelationFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureRelationFilter proto.InternalMessageInfo

func (m *FeatureRelationFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureRelationFilter) GetRelation() string {
	if m != nil {
		return m.Relation
	}
	return ""
}

type ReferenceFeatureFilter struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Used for feature with multiple locations, 0 is used as default.
	Rank                 int64    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReferenceFeatureFilter) Reset()         { *m = ReferenceFeatureFilter{} }
func (m *ReferenceFeatureFilter) String() string { return proto.CompactTextString(m) }
func (*ReferenceFeatureFilter) ProtoMessage()    {}
func (*ReferenceFeatureFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{2}
}

func (m *ReferenceFeatureFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceFeatureFilter.Unmarshal(m, b)
}
func (m *ReferenceFeatureFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceFeatureFilter.Marshal(b, m, deterministic)
}
func (m *ReferenceFeatureFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceFeatureFilter.Merge(m, src)
}
func (m *ReferenceFeatureFilter) XXX_Size() int {
	return xxx_messageInfo_ReferenceFeatureFilter.Size(m)
}
func (m *ReferenceFeatureFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceFeatureFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceFeatureFilter proto.InternalMessageInfo

func (m *ReferenceFeatureFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReferenceFeatureFilter) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type LocatedFeatureFilter struct {
	// unique id of the reference feature
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The biological type of feature, generally a sequence ontology term.
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocatedFeatureFilter) Reset()         { *m = LocatedFeatureFilter{} }
func (m *LocatedFeatureFilter) String() string { return proto.CompactTextString(m) }
func (*LocatedFeatureFilter) ProtoMessage()    {}
func (*LocatedFeatureFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{3}
}

func (m *LocatedFeatureFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocatedFeatureFilter.Unmarshal(m, b)
}
func (m *LocatedFeatureFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocatedFeatureFilter.Marshal(b, m, deterministic)
}
func (m *LocatedFeatureFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocatedFeatureFilter.Merge(m, src)
}
func (m *LocatedFeatureFilter) XXX_Size() int {
	return xxx_messageInfo_LocatedFeatureFilter.Size(m)
}
func (m *LocatedFeatureFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LocatedFeatureFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LocatedFeatureFilter proto.InternalMessageInfo

func (m *LocatedFeatureFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LocatedFeatureFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type FeatureAnnotationFilter struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An identifiable tagname for the annotation, primarily
	// restricted to an ontology term.
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureAnnotationFilter) Reset()         { *m = FeatureAnnotationFilter{} }
func (m *FeatureAnnotationFilter) String() string { return proto.CompactTextString(m) }
func (*FeatureAnnotationFilter) ProtoMessage()    {}
func (*FeatureAnnotationFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{4}
}

func (m *FeatureAnnotationFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureAnnotationFilter.Unmarshal(m, b)
}
func (m *FeatureAnnotationFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureAnnotationFilter.Marshal(b, m, deterministic)
}
func (m *FeatureAnnotationFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureAnnotationFilter.Merge(m, src)
}
func (m *FeatureAnnotationFilter) XXX_Size() int {
	return xxx_messageInfo_FeatureAnnotationFilter.Size(m)
}
func (m *FeatureAnnotationFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureAnnotationFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureAnnotationFilter proto.InternalMessageInfo

func (m *FeatureAnnotationFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureAnnotationFilter) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// Definition for creating new feature
type NewFeature struct {
	Data                 *NewFeature_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NewFeature) Reset()         { *m = NewFeature{} }
func (m *NewFeature) String() string { return proto.CompactTextString(m) }
func (*NewFeature) ProtoMessage()    {}
func (*NewFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{5}
}

func (m *NewFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewFeature.Unmarshal(m, b)
}
func (m *NewFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewFeature.Marshal(b, m, deterministic)
}
func (m *NewFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFeature.Merge(m, src)
}
func (m *NewFeature) XXX_Size() int {
	return xxx_messageInfo_NewFeature.Size(m)
}
func (m *NewFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFeature.DiscardUnknown(m)
}

var xxx_messageInfo_NewFeature proto.InternalMessageInfo

func (m *NewFeature) GetData() *NewFeature_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type NewFeature_Data struct {
	// The biological type of feature, generally a sequence ontology term
	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes           *NewFeatureAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NewFeature_Data) Reset()         { *m = NewFeature_Data{} }
func (m *NewFeature_Data) String() string { return proto.CompactTextString(m) }
func (*NewFeature_Data) ProtoMessage()    {}
func (*NewFeature_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{5, 0}
}

func (m *NewFeature_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewFeature_Data.Unmarshal(m, b)
}
func (m *NewFeature_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewFeature_Data.Marshal(b, m, deterministic)
}
func (m *NewFeature_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFeature_Data.Merge(m, src)
}
func (m *NewFeature_Data) XXX_Size() int {
	return xxx_messageInfo_NewFeature_Data.Size(m)
}
func (m *NewFeature_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFeature_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NewFeature_Data proto.InternalMessageInfo

func (m *NewFeature_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NewFeature_Data) GetAttributes() *NewFeatureAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition of various feature fields for creating new feature
type NewFeatureAttributes struct {
	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the user who created the feature
	CreatedBy int64 `protobuf:"varint,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Identifier of the user who updated the feature
	UpdatedBy int64     `protobuf:"varint,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Dbxrefs   []*Dbxref `protobuf:"bytes,4,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	Organism  *Organism `protobuf:"bytes,5,opt,name=organism,proto3" json:"organism,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,6,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	// List of biological parent features
	Parents []*FeatureRelationship `protobuf:"bytes,7,rep,name=parents,proto3" json:"parents,omitempty"`
	// List of biological children feature
	Children []*FeatureRelationship `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	Location []*FeatureLocation     `protobuf:"bytes,9,rep,name=location,proto3" json:"location,omitempty"`
	// Alternate list of names
	Synonyms     []string       `protobuf:"bytes,10,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Publications []*Publication `protobuf:"bytes,11,rep,name=publications,proto3" json:"publications,omitempty"`
	// Indicates if the feature is generated(annotated) from the
	// result of an automated analysis
	IsAnalysis bool `protobuf:"varint,12,opt,name=is_analysis,json=isAnalysis,proto3" json:"is_analysis,omitempty"`
	// Version of this feature, it increase by 1 for the replacement
	Version int64 `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	// Earlier instance of the feature that this one has replaced
	Previous string `protobuf:"bytes,14,opt,name=previous,proto3" json:"previous,omitempty"`
	//  Next instance of the feature that this one got replaced with
	Next                 string   `protobuf:"bytes,15,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewFeatureAttributes) Reset()         { *m = NewFeatureAttributes{} }
func (m *NewFeatureAttributes) String() string { return proto.CompactTextString(m) }
func (*NewFeatureAttributes) ProtoMessage()    {}
func (*NewFeatureAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{6}
}

func (m *NewFeatureAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewFeatureAttributes.Unmarshal(m, b)
}
func (m *NewFeatureAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewFeatureAttributes.Marshal(b, m, deterministic)
}
func (m *NewFeatureAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFeatureAttributes.Merge(m, src)
}
func (m *NewFeatureAttributes) XXX_Size() int {
	return xxx_messageInfo_NewFeatureAttributes.Size(m)
}
func (m *NewFeatureAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFeatureAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NewFeatureAttributes proto.InternalMessageInfo

func (m *NewFeatureAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewFeatureAttributes) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *NewFeatureAttributes) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *NewFeatureAttributes) GetDbxrefs() []*Dbxref {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

func (m *NewFeatureAttributes) GetOrganism() *Organism {
	if m != nil {
		return m.Organism
	}
	return nil
}

func (m *NewFeatureAttributes) GetIsObsolete() bool {
	if m != nil {
		return m.IsObsolete
	}
	return false
}

func (m *NewFeatureAttributes) GetParents() []*FeatureRelationship {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *NewFeatureAttributes) GetChildren() []*FeatureRelationship {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *NewFeatureAttributes) GetLocation() []*FeatureLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *NewFeatureAttributes) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

func (m *NewFeatureAttributes) GetPublications() []*Publication {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *NewFeatureAttributes) GetIsAnalysis() bool {
	if m != nil {
		return m.IsAnalysis
	}
	return false
}

func (m *NewFeatureAttributes) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NewFeatureAttributes) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *NewFeatureAttributes) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

// List of features with pagination
type PaginatedFeatureCollection struct {
	Data                 []*FeatureData           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Links                *jsonapi.PaginationLinks `protobuf:"bytes,2,opt,name=links,proto3" json:"links,omitempty"`
	Pagination           *jsonapi.Pagination      `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PaginatedFeatureCollection) Reset()         { *m = PaginatedFeatureCollection{} }
func (m *PaginatedFeatureCollection) String() string { return proto.CompactTextString(m) }
func (*PaginatedFeatureCollection) ProtoMessage()    {}
func (*PaginatedFeatureCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{7}
}

func (m *PaginatedFeatureCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaginatedFeatureCollection.Unmarshal(m, b)
}
func (m *PaginatedFeatureCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaginatedFeatureCollection.Marshal(b, m, deterministic)
}
func (m *PaginatedFeatureCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaginatedFeatureCollection.Merge(m, src)
}
func (m *PaginatedFeatureCollection) XXX_Size() int {
	return xxx_messageInfo_PaginatedFeatureCollection.Size(m)
}
func (m *PaginatedFeatureCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_PaginatedFeatureCollection.DiscardUnknown(m)
}

var xxx_messageInfo_PaginatedFeatureCollection proto.InternalMessageInfo

func (m *PaginatedFeatureCollection) GetData() []*FeatureData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PaginatedFeatureCollection) GetLinks() *jsonapi.PaginationLinks {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *PaginatedFeatureCollection) GetPagination() *jsonapi.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// List of features
type FeatureCollection struct {
	Data                 []*FeatureData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Links                *jsonapi.Links `protobuf:"bytes,2,opt,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FeatureCollection) Reset()         { *m = FeatureCollection{} }
func (m *FeatureCollection) String() string { return proto.CompactTextString(m) }
func (*FeatureCollection) ProtoMessage()    {}
func (*FeatureCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{8}
}

func (m *FeatureCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureCollection.Unmarshal(m, b)
}
func (m *FeatureCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureCollection.Marshal(b, m, deterministic)
}
func (m *FeatureCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureCollection.Merge(m, src)
}
func (m *FeatureCollection) XXX_Size() int {
	return xxx_messageInfo_FeatureCollection.Size(m)
}
func (m *FeatureCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureCollection.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureCollection proto.InternalMessageInfo

func (m *FeatureCollection) GetData() []*FeatureData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FeatureCollection) GetLinks() *jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

// Definition of a biological entity
type Feature struct {
	Data                 *FeatureData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Links                *jsonapi.Links `protobuf:"bytes,2,opt,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{9}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetData() *FeatureData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Feature) GetLinks() *jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

type FeatureData struct {
	// The biological type of feature, generally a sequence ontology term
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique id
	Id                   string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *FeatureAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FeatureData) Reset()         { *m = FeatureData{} }
func (m *FeatureData) String() string { return proto.CompactTextString(m) }
func (*FeatureData) ProtoMessage()    {}
func (*FeatureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{10}
}

func (m *FeatureData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureData.Unmarshal(m, b)
}
func (m *FeatureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureData.Marshal(b, m, deterministic)
}
func (m *FeatureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureData.Merge(m, src)
}
func (m *FeatureData) XXX_Size() int {
	return xxx_messageInfo_FeatureData.Size(m)
}
func (m *FeatureData) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureData.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureData proto.InternalMessageInfo

func (m *FeatureData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FeatureData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureData) GetAttributes() *FeatureAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Definition of various feature fields
type FeatureAttributes struct {
	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of the user who created the feature
	CreatedBy int64 `protobuf:"varint,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Identifier of the user who updated the feature
	UpdatedBy int64 `protobuf:"varint,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Timestamp for creation and update
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Dbxref    []*FeatureDbxref     `protobuf:"bytes,7,rep,name=dbxref,proto3" json:"dbxref,omitempty"`
	Organism  *Organism            `protobuf:"bytes,8,opt,name=organism,proto3" json:"organism,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,9,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	// List of biological parent features
	Parents []*FeatureRelationship `protobuf:"bytes,10,rep,name=parents,proto3" json:"parents,omitempty"`
	// List of biological children feature
	Children []*FeatureRelationship `protobuf:"bytes,11,rep,name=children,proto3" json:"children,omitempty"`
	Location []*FeatureLocation     `protobuf:"bytes,12,rep,name=location,proto3" json:"location,omitempty"`
	// aLTERNATe list of names
	Synonyms     []string       `protobuf:"bytes,13,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Publications []*Publication `protobuf:"bytes,14,rep,name=publications,proto3" json:"publications,omitempty"`
	// Indicates if the feature is generated(annotated) from the
	// result of an automated analysis
	IsAnalysis bool `protobuf:"varint,15,opt,name=is_analysis,json=isAnalysis,proto3" json:"is_analysis,omitempty"`
	// Version of this feature, it increase by 1 for the replacement
	Version int64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	// Earlier instance of the feature that this one has replaced
	Previous string `protobuf:"bytes,17,opt,name=previous,proto3" json:"previous,omitempty"`
	//  Next instance of the feature that this one got replaced with
	Next                 string    `protobuf:"bytes,18,opt,name=next,proto3" json:"next,omitempty"`
	Dbxrefs              []*Dbxref `protobuf:"bytes,19,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FeatureAttributes) Reset()         { *m = FeatureAttributes{} }
func (m *FeatureAttributes) String() string { return proto.CompactTextString(m) }
func (*FeatureAttributes) ProtoMessage()    {}
func (*FeatureAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{11}
}

func (m *FeatureAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureAttributes.Unmarshal(m, b)
}
func (m *FeatureAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureAttributes.Marshal(b, m, deterministic)
}
func (m *FeatureAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureAttributes.Merge(m, src)
}
func (m *FeatureAttributes) XXX_Size() int {
	return xxx_messageInfo_FeatureAttributes.Size(m)
}
func (m *FeatureAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureAttributes proto.InternalMessageInfo

func (m *FeatureAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureAttributes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureAttributes) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *FeatureAttributes) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *FeatureAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *FeatureAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *FeatureAttributes) GetDbxref() []*FeatureDbxref {
	if m != nil {
		return m.Dbxref
	}
	return nil
}

func (m *FeatureAttributes) GetOrganism() *Organism {
	if m != nil {
		return m.Organism
	}
	return nil
}

func (m *FeatureAttributes) GetIsObsolete() bool {
	if m != nil {
		return m.IsObsolete
	}
	return false
}

func (m *FeatureAttributes) GetParents() []*FeatureRelationship {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *FeatureAttributes) GetChildren() []*FeatureRelationship {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *FeatureAttributes) GetLocation() []*FeatureLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *FeatureAttributes) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

func (m *FeatureAttributes) GetPublications() []*Publication {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *FeatureAttributes) GetIsAnalysis() bool {
	if m != nil {
		return m.IsAnalysis
	}
	return false
}

func (m *FeatureAttributes) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FeatureAttributes) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *FeatureAttributes) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *FeatureAttributes) GetDbxrefs() []*Dbxref {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

// Definition for updating a feature
type FeatureUpdate struct {
	Data *FeatureUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// An optional mask specifying which fields to update.
	// Presence of this field allow partial updates.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Id                   string                `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FeatureUpdate) Reset()         { *m = FeatureUpdate{} }
func (m *FeatureUpdate) String() string { return proto.CompactTextString(m) }
func (*FeatureUpdate) ProtoMessage()    {}
func (*FeatureUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{12}
}

func (m *FeatureUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureUpdate.Unmarshal(m, b)
}
func (m *FeatureUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureUpdate.Marshal(b, m, deterministic)
}
func (m *FeatureUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureUpdate.Merge(m, src)
}
func (m *FeatureUpdate) XXX_Size() int {
	return xxx_messageInfo_FeatureUpdate.Size(m)
}
func (m *FeatureUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureUpdate proto.InternalMessageInfo

func (m *FeatureUpdate) GetData() *FeatureUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FeatureUpdate) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *FeatureUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FeatureUpdate_Data struct {
	// The biological type of feature, generally a sequence ontology term
	Type                 string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes           *FeatureUpdateAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Id                   string                   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FeatureUpdate_Data) Reset()         { *m = FeatureUpdate_Data{} }
func (m *FeatureUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*FeatureUpdate_Data) ProtoMessage()    {}
func (*FeatureUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{12, 0}
}

func (m *FeatureUpdate_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureUpdate_Data.Unmarshal(m, b)
}
func (m *FeatureUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureUpdate_Data.Marshal(b, m, deterministic)
}
func (m *FeatureUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureUpdate_Data.Merge(m, src)
}
func (m *FeatureUpdate_Data) XXX_Size() int {
	return xxx_messageInfo_FeatureUpdate_Data.Size(m)
}
func (m *FeatureUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureUpdate_Data proto.InternalMessageInfo

func (m *FeatureUpdate_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FeatureUpdate_Data) GetAttributes() *FeatureUpdateAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *FeatureUpdate_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Definition of feature fields for updating a feature
type FeatureUpdateAttributes struct {
	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of the user who updated the feature
	UpdatedBy int64            `protobuf:"varint,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Dbxref    []*FeatureDbxref `protobuf:"bytes,4,rep,name=dbxref,proto3" json:"dbxref,omitempty"`
	Organism  *Organism        `protobuf:"bytes,5,opt,name=organism,proto3" json:"organism,omitempty"`
	// List of biological parent features
	Parents []*FeatureRelationship `protobuf:"bytes,6,rep,name=parents,proto3" json:"parents,omitempty"`
	// List of biological children feature
	Children []*FeatureRelationship `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"`
	Location []*FeatureLocation     `protobuf:"bytes,8,rep,name=location,proto3" json:"location,omitempty"`
	// aLTERNATe list of names
	Synonyms     []string       `protobuf:"bytes,9,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Publications []*Publication `protobuf:"bytes,10,rep,name=publications,proto3" json:"publications,omitempty"`
	// Indicates if the feature is generated(annotated) from the
	// result of an automated analysis
	IsAnalysis bool `protobuf:"varint,11,opt,name=is_analysis,json=isAnalysis,proto3" json:"is_analysis,omitempty"`
	// Earlier instance of the feature that this one has replaced
	Previous string `protobuf:"bytes,12,opt,name=previous,proto3" json:"previous,omitempty"`
	//  Next instance of the feature that this one got replaced with
	Next                 string    `protobuf:"bytes,13,opt,name=next,proto3" json:"next,omitempty"`
	Dbxrefs              []*Dbxref `protobuf:"bytes,14,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FeatureUpdateAttributes) Reset()         { *m = FeatureUpdateAttributes{} }
func (m *FeatureUpdateAttributes) String() string { return proto.CompactTextString(m) }
func (*FeatureUpdateAttributes) ProtoMessage()    {}
func (*FeatureUpdateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{13}
}

func (m *FeatureUpdateAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureUpdateAttributes.Unmarshal(m, b)
}
func (m *FeatureUpdateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureUpdateAttributes.Marshal(b, m, deterministic)
}
func (m *FeatureUpdateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureUpdateAttributes.Merge(m, src)
}
func (m *FeatureUpdateAttributes) XXX_Size() int {
	return xxx_messageInfo_FeatureUpdateAttributes.Size(m)
}
func (m *FeatureUpdateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureUpdateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureUpdateAttributes proto.InternalMessageInfo

func (m *FeatureUpdateAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureUpdateAttributes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureUpdateAttributes) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *FeatureUpdateAttributes) GetDbxref() []*FeatureDbxref {
	if m != nil {
		return m.Dbxref
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetOrganism() *Organism {
	if m != nil {
		return m.Organism
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetParents() []*FeatureRelationship {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetChildren() []*FeatureRelationship {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetLocation() []*FeatureLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetPublications() []*Publication {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *FeatureUpdateAttributes) GetIsAnalysis() bool {
	if m != nil {
		return m.IsAnalysis
	}
	return false
}

func (m *FeatureUpdateAttributes) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *FeatureUpdateAttributes) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *FeatureUpdateAttributes) GetDbxrefs() []*Dbxref {
	if m != nil {
		return m.Dbxrefs
	}
	return nil
}

// Defintion for managing synonym of a feature
type FeatureSynonym struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Synonym              string   `protobuf:"bytes,2,opt,name=synonym,proto3" json:"synonym,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureSynonym) Reset()         { *m = FeatureSynonym{} }
func (m *FeatureSynonym) String() string { return proto.CompactTextString(m) }
func (*FeatureSynonym) ProtoMessage()    {}
func (*FeatureSynonym) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{14}
}

func (m *FeatureSynonym) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureSynonym.Unmarshal(m, b)
}
func (m *FeatureSynonym) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureSynonym.Marshal(b, m, deterministic)
}
func (m *FeatureSynonym) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureSynonym.Merge(m, src)
}
func (m *FeatureSynonym) XXX_Size() int {
	return xxx_messageInfo_FeatureSynonym.Size(m)
}
func (m *FeatureSynonym) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureSynonym.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureSynonym proto.InternalMessageInfo

func (m *FeatureSynonym) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureSynonym) GetSynonym() string {
	if m != nil {
		return m.Synonym
	}
	return ""
}

// Definition for managing a previous or next feature in the feature
// history
type FeatureHistory struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LinkedFeature        string   `protobuf:"bytes,2,opt,name=linked_feature,json=linkedFeature,proto3" json:"linked_feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureHistory) Reset()         { *m = FeatureHistory{} }
func (m *FeatureHistory) String() string { return proto.CompactTextString(m) }
func (*FeatureHistory) ProtoMessage()    {}
func (*FeatureHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{15}
}

func (m *FeatureHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureHistory.Unmarshal(m, b)
}
func (m *FeatureHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureHistory.Marshal(b, m, deterministic)
}
func (m *FeatureHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureHistory.Merge(m, src)
}
func (m *FeatureHistory) XXX_Size() int {
	return xxx_messageInfo_FeatureHistory.Size(m)
}
func (m *FeatureHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureHistory.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureHistory proto.InternalMessageInfo

func (m *FeatureHistory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureHistory) GetLinkedFeature() string {
	if m != nil {
		return m.LinkedFeature
	}
	return ""
}

// Container for linked publications
type Publication struct {
	// An identifier that refers to a publication
	PublicationId string `protobuf:"bytes,1,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	// Source of this publication identifier
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Publication) Reset()         { *m = Publication{} }
func (m *Publication) String() string { return proto.CompactTextString(m) }
func (*Publication) ProtoMessage()    {}
func (*Publication) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{16}
}

func (m *Publication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Publication.Unmarshal(m, b)
}
func (m *Publication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Publication.Marshal(b, m, deterministic)
}
func (m *Publication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publication.Merge(m, src)
}
func (m *Publication) XXX_Size() int {
	return xxx_messageInfo_Publication.Size(m)
}
func (m *Publication) XXX_DiscardUnknown() {
	xxx_messageInfo_Publication.DiscardUnknown(m)
}

var xxx_messageInfo_Publication proto.InternalMessageInfo

func (m *Publication) GetPublicationId() string {
	if m != nil {
		return m.PublicationId
	}
	return ""
}

func (m *Publication) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// Definition for managing publication with a feature
type FeaturePublication struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publication          *FeaturePublication `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FeaturePublication) Reset()         { *m = FeaturePublication{} }
func (m *FeaturePublication) String() string { return proto.CompactTextString(m) }
func (*FeaturePublication) ProtoMessage()    {}
func (*FeaturePublication) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{17}
}

func (m *FeaturePublication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeaturePublication.Unmarshal(m, b)
}
func (m *FeaturePublication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeaturePublication.Marshal(b, m, deterministic)
}
func (m *FeaturePublication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeaturePublication.Merge(m, src)
}
func (m *FeaturePublication) XXX_Size() int {
	return xxx_messageInfo_FeaturePublication.Size(m)
}
func (m *FeaturePublication) XXX_DiscardUnknown() {
	xxx_messageInfo_FeaturePublication.DiscardUnknown(m)
}

var xxx_messageInfo_FeaturePublication proto.InternalMessageInfo

func (m *FeaturePublication) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeaturePublication) GetPublication() *FeaturePublication {
	if m != nil {
		return m.Publication
	}
	return nil
}

// Definition for connecting two biologically related(parent or
// children) features
type FeatureConnection struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Relationship         *FeatureRelationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FeatureConnection) Reset()         { *m = FeatureConnection{} }
func (m *FeatureConnection) String() string { return proto.CompactTextString(m) }
func (*FeatureConnection) ProtoMessage()    {}
func (*FeatureConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{18}
}

func (m *FeatureConnection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureConnection.Unmarshal(m, b)
}
func (m *FeatureConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureConnection.Marshal(b, m, deterministic)
}
func (m *FeatureConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureConnection.Merge(m, src)
}
func (m *FeatureConnection) XXX_Size() int {
	return xxx_messageInfo_FeatureConnection.Size(m)
}
func (m *FeatureConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureConnection.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureConnection proto.InternalMessageInfo

func (m *FeatureConnection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureConnection) GetRelationship() *FeatureRelationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

// Definition for a related feature
type FeatureRelationship struct {
	// Type of relationship, generally a sequence ontology term
	Relation string `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	// Related feature
	Feature              string   `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureRelationship) Reset()         { *m = FeatureRelationship{} }
func (m *FeatureRelationship) String() string { return proto.CompactTextString(m) }
func (*FeatureRelationship) ProtoMessage()    {}
func (*FeatureRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{19}
}

func (m *FeatureRelationship) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureRelationship.Unmarshal(m, b)
}
func (m *FeatureRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureRelationship.Marshal(b, m, deterministic)
}
func (m *FeatureRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureRelationship.Merge(m, src)
}
func (m *FeatureRelationship) XXX_Size() int {
	return xxx_messageInfo_FeatureRelationship.Size(m)
}
func (m *FeatureRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureRelationship proto.InternalMessageInfo

func (m *FeatureRelationship) GetRelation() string {
	if m != nil {
		return m.Relation
	}
	return ""
}

func (m *FeatureRelationship) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

// Definition for managing dbxref with a feature
type FeatureDbxref struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Dbxref               *Dbxref  `protobuf:"bytes,2,opt,name=dbxref,proto3" json:"dbxref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureDbxref) Reset()         { *m = FeatureDbxref{} }
func (m *FeatureDbxref) String() string { return proto.CompactTextString(m) }
func (*FeatureDbxref) ProtoMessage()    {}
func (*FeatureDbxref) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{20}
}

func (m *FeatureDbxref) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureDbxref.Unmarshal(m, b)
}
func (m *FeatureDbxref) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureDbxref.Marshal(b, m, deterministic)
}
func (m *FeatureDbxref) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureDbxref.Merge(m, src)
}
func (m *FeatureDbxref) XXX_Size() int {
	return xxx_messageInfo_FeatureDbxref.Size(m)
}
func (m *FeatureDbxref) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureDbxref.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureDbxref proto.InternalMessageInfo

func (m *FeatureDbxref) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeatureDbxref) GetDbxref() *Dbxref {
	if m != nil {
		return m.Dbxref
	}
	return nil
}

// An identifier typically from a bioinformatics database(NCBI,Uniprot,Ensembl etc.)
type Dbxref struct {
	// Identifier
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Version    int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Source database
	Database             string   `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dbxref) Reset()         { *m = Dbxref{} }
func (m *Dbxref) String() string { return proto.CompactTextString(m) }
func (*Dbxref) ProtoMessage()    {}
func (*Dbxref) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{21}
}

func (m *Dbxref) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dbxref.Unmarshal(m, b)
}
func (m *Dbxref) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dbxref.Marshal(b, m, deterministic)
}
func (m *Dbxref) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dbxref.Merge(m, src)
}
func (m *Dbxref) XXX_Size() int {
	return xxx_messageInfo_Dbxref.Size(m)
}
func (m *Dbxref) XXX_DiscardUnknown() {
	xxx_messageInfo_Dbxref.DiscardUnknown(m)
}

var xxx_messageInfo_Dbxref proto.InternalMessageInfo

func (m *Dbxref) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Dbxref) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Dbxref) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

// Definition for attaching a new location to a feature
type NewFeatureLocation struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location             *FeatureLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NewFeatureLocation) Reset()         { *m = NewFeatureLocation{} }
func (m *NewFeatureLocation) String() string { return proto.CompactTextString(m) }
func (*NewFeatureLocation) ProtoMessage()    {}
func (*NewFeatureLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{22}
}

func (m *NewFeatureLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewFeatureLocation.Unmarshal(m, b)
}
func (m *NewFeatureLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewFeatureLocation.Marshal(b, m, deterministic)
}
func (m *NewFeatureLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFeatureLocation.Merge(m, src)
}
func (m *NewFeatureLocation) XXX_Size() int {
	return xxx_messageInfo_NewFeatureLocation.Size(m)
}
func (m *NewFeatureLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFeatureLocation.DiscardUnknown(m)
}

var xxx_messageInfo_NewFeatureLocation proto.InternalMessageInfo

func (m *NewFeatureLocation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewFeatureLocation) GetLocation() *FeatureLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

// The location of a feature relative to another feature using space-based(interbase) coordinates.
type FeatureLocation struct {
	// Source or reference feature(identifier) which this location is relative to
	SourceFeature string `protobuf:"bytes,1,opt,name=source_feature,json=sourceFeature,proto3" json:"source_feature,omitempty"`
	// start/leftmost boundary of this location in linear range based on
	// interbase coordinates. To convert it to base-oriented system, add 1 to
	// this value.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// End/rightmost boundary of this location in linear range based on
	// interbase coordinates. No conversion is needed to convert it to a base
	// oriented system.
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// Orientation of this location, should be one of 0,1, or -1
	Strand int64 `protobuf:"varint,4,opt,name=strand,proto3" json:"strand,omitempty"`
	// Phase of translation with respect to source feature, should be one of 0,1,or 2.
	Phase int64 `protobuf:"varint,5,opt,name=phase,proto3" json:"phase,omitempty"`
	// Alternate residues which differ from feature residues
	Residue string `protobuf:"bytes,6,opt,name=residue,proto3" json:"residue,omitempty"`
	// Represents derivable extra location of a feature. The default value 0 is
	// used for direct location. Any other derived location gets values greater
	// than 0. For example, the position of an exon on a BAC and in a global
	// chromosomal coordinates.
	Group int64 `protobuf:"varint,7,opt,name=group,proto3" json:"group,omitempty"`
	// Used for feature with multiple locations, 0 is used as default. For
	// example, a blast HSP has two locations, one on the query and one on the
	// subject.
	Rank                 int64    `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureLocation) Reset()         { *m = FeatureLocation{} }
func (m *FeatureLocation) String() string { return proto.CompactTextString(m) }
func (*FeatureLocation) ProtoMessage()    {}
func (*FeatureLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{23}
}

func (m *FeatureLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureLocation.Unmarshal(m, b)
}
func (m *FeatureLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureLocation.Marshal(b, m, deterministic)
}
func (m *FeatureLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLocation.Merge(m, src)
}
func (m *FeatureLocation) XXX_Size() int {
	return xxx_messageInfo_FeatureLocation.Size(m)
}
func (m *FeatureLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLocation.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLocation proto.InternalMessageInfo

func (m *FeatureLocation) GetSourceFeature() string {
	if m != nil {
		return m.SourceFeature
	}
	return ""
}

func (m *FeatureLocation) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FeatureLocation) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *FeatureLocation) GetStrand() int64 {
	if m != nil {
		return m.Strand
	}
	return 0
}

func (m *FeatureLocation) GetPhase() int64 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *FeatureLocation) GetResidue() string {
	if m != nil {
		return m.Residue
	}
	return ""
}

func (m *FeatureLocation) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *FeatureLocation) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

// Defintion of an organism entry
type Organism struct {
	// Taxon identifier
	TaxonId string `protobuf:"bytes,1,opt,name=taxon_id,json=taxonId,proto3" json:"taxon_id,omitempty"`
	// Organism genus
	Genus string `protobuf:"bytes,2,opt,name=genus,proto3" json:"genus,omitempty"`
	// Organism species
	Species    string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	CommonName string `protobuf:"bytes,4,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Taxonomic rank
	Rank string `protobuf:"bytes,5,opt,name=rank,proto3" json:"rank,omitempty"`
	// Scientific name
	ScientificName string `protobuf:"bytes,6,opt,name=scientific_name,json=scientificName,proto3" json:"scientific_name,omitempty"`
	// Strain name
	Strain               string   `protobuf:"bytes,7,opt,name=strain,proto3" json:"strain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Organism) Reset()         { *m = Organism{} }
func (m *Organism) String() string { return proto.CompactTextString(m) }
func (*Organism) ProtoMessage()    {}
func (*Organism) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{24}
}

func (m *Organism) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Organism.Unmarshal(m, b)
}
func (m *Organism) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Organism.Marshal(b, m, deterministic)
}
func (m *Organism) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organism.Merge(m, src)
}
func (m *Organism) XXX_Size() int {
	return xxx_messageInfo_Organism.Size(m)
}
func (m *Organism) XXX_DiscardUnknown() {
	xxx_messageInfo_Organism.DiscardUnknown(m)
}

var xxx_messageInfo_Organism proto.InternalMessageInfo

func (m *Organism) GetTaxonId() string {
	if m != nil {
		return m.TaxonId
	}
	return ""
}

func (m *Organism) GetGenus() string {
	if m != nil {
		return m.Genus
	}
	return ""
}

func (m *Organism) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *Organism) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *Organism) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

func (m *Organism) GetScientificName() string {
	if m != nil {
		return m.ScientificName
	}
	return ""
}

func (m *Organism) GetStrain() string {
	if m != nil {
		return m.Strain
	}
	return ""
}

// `ListRequest` contains parameters for manipulating query for returning
// collection.
type ListRequest struct {
	// The page number to fetch
	Pagenum int64 `protobuf:"varint,1,opt,name=pagenum,proto3" json:"pagenum,omitempty"`
	// Number of records per page
	Pagesize int64 `protobuf:"varint,2,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	// The `filter` query parameter restricts the data return by the
	// collection. To use it, supply an attribute to filter, followed by a
	// filter expression. It uses the following syntax...
	//        attribute operator expression
	// attribute - Any one of the valid attribute of the resource.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded.
	//
	//              ==  Equals (URL encoding is %3D%3D)
	//              !=  Not equals
	//              =@  Contains substring
	//              !@  Not contains substring
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded.
	// For example, the following filter returns all users with last name `Gag`.
	//
	//           filter: "last_name==Gag"
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af9f7912a9c0618, []int{25}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetPagenum() int64 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

func (m *ListRequest) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *ListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func init() {
	proto.RegisterType((*FeatureId)(nil), "dictybase.feature.FeatureId")
	proto.RegisterType((*FeatureRelationFilter)(nil), "dictybase.feature.FeatureRelationFilter")
	proto.RegisterType((*ReferenceFeatureFilter)(nil), "dictybase.feature.ReferenceFeatureFilter")
	proto.RegisterType((*LocatedFeatureFilter)(nil), "dictybase.feature.LocatedFeatureFilter")
	proto.RegisterType((*FeatureAnnotationFilter)(nil), "dictybase.feature.FeatureAnnotationFilter")
	proto.RegisterType((*NewFeature)(nil), "dictybase.feature.NewFeature")
	proto.RegisterType((*NewFeature_Data)(nil), "dictybase.feature.NewFeature.Data")
	proto.RegisterType((*NewFeatureAttributes)(nil), "dictybase.feature.NewFeatureAttributes")
	proto.RegisterType((*PaginatedFeatureCollection)(nil), "dictybase.feature.PaginatedFeatureCollection")
	proto.RegisterType((*FeatureCollection)(nil), "dictybase.feature.FeatureCollection")
	proto.RegisterType((*Feature)(nil), "dictybase.feature.Feature")
	proto.RegisterType((*FeatureData)(nil), "dictybase.feature.FeatureData")
	proto.RegisterType((*FeatureAttributes)(nil), "dictybase.feature.FeatureAttributes")
	proto.RegisterType((*FeatureUpdate)(nil), "dictybase.feature.FeatureUpdate")
	proto.RegisterType((*FeatureUpdate_Data)(nil), "dictybase.feature.FeatureUpdate.Data")
	proto.RegisterType((*FeatureUpdateAttributes)(nil), "dictybase.feature.FeatureUpdateAttributes")
	proto.RegisterType((*FeatureSynonym)(nil), "dictybase.feature.FeatureSynonym")
	proto.RegisterType((*FeatureHistory)(nil), "dictybase.feature.FeatureHistory")
	proto.RegisterType((*Publication)(nil), "dictybase.feature.Publication")
	proto.RegisterType((*FeaturePublication)(nil), "dictybase.feature.FeaturePublication")
	proto.RegisterType((*FeatureConnection)(nil), "dictybase.feature.FeatureConnection")
	proto.RegisterType((*FeatureRelationship)(nil), "dictybase.feature.FeatureRelationship")
	proto.RegisterType((*FeatureDbxref)(nil), "dictybase.feature.FeatureDbxref")
	proto.RegisterType((*Dbxref)(nil), "dictybase.feature.Dbxref")
	proto.RegisterType((*NewFeatureLocation)(nil), "dictybase.feature.NewFeatureLocation")
	proto.RegisterType((*FeatureLocation)(nil), "dictybase.feature.FeatureLocation")
	proto.RegisterType((*Organism)(nil), "dictybase.feature.Organism")
	proto.RegisterType((*ListRequest)(nil), "dictybase.feature.ListRequest")
}

func init() { proto.RegisterFile("feature.proto", fileDescriptor_3af9f7912a9c0618) }

var fileDescriptor_3af9f7912a9c0618 = []byte{
	// 2160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xdd, 0x6e, 0x23, 0x49,
	0x15, 0x1e, 0xdb, 0xf9, 0xb1, 0x8f, 0x63, 0x4f, 0x52, 0x93, 0xc9, 0x74, 0x9c, 0xd9, 0x89, 0xa7,
	0x97, 0xcc, 0x0e, 0x91, 0xc6, 0x16, 0x59, 0x69, 0x81, 0x99, 0xd5, 0x0a, 0x27, 0x61, 0x42, 0x96,
	0x30, 0x1b, 0xf5, 0x0e, 0x12, 0x3f, 0x82, 0xd0, 0x71, 0x57, 0x9c, 0x26, 0x76, 0x77, 0x6f, 0x57,
	0x39, 0x89, 0x77, 0x76, 0xe6, 0x02, 0x24, 0x5e, 0x00, 0x2e, 0xb8, 0x44, 0xbc, 0x01, 0xcf, 0xc1,
	0x15, 0xf0, 0x00, 0x48, 0x88, 0x47, 0xe0, 0x82, 0x1b, 0x24, 0x54, 0x55, 0xa7, 0xdb, 0xdd, 0x6d,
	0x77, 0xdb, 0xf9, 0x81, 0x2b, 0x77, 0x55, 0x9d, 0x73, 0xbe, 0x53, 0x55, 0xe7, 0x7c, 0x75, 0xaa,
	0x0c, 0x95, 0x13, 0x6a, 0xf2, 0xbe, 0x4f, 0x1b, 0x9e, 0xef, 0x72, 0x97, 0x2c, 0x59, 0x76, 0x9b,
	0x0f, 0x8e, 0x4d, 0x46, 0x1b, 0x38, 0x50, 0x7b, 0xd8, 0x71, 0xdd, 0x4e, 0x97, 0x36, 0x4d, 0xcf,
	0x6e, 0x9a, 0x8e, 0xe3, 0x72, 0x93, 0xdb, 0xae, 0xc3, 0x94, 0x42, 0xad, 0x8e, 0xa3, 0xb2, 0x75,
	0xdc, 0x3f, 0x69, 0x9e, 0xd8, 0xb4, 0x6b, 0x1d, 0xf5, 0x4c, 0x76, 0x86, 0x12, 0xeb, 0x49, 0x09,
	0x6e, 0xf7, 0x28, 0xe3, 0x66, 0xcf, 0x43, 0x81, 0xb5, 0xa4, 0x00, 0xed, 0x79, 0x7c, 0x80, 0x83,
	0xef, 0x87, 0x0e, 0x49, 0x07, 0x7e, 0xc9, 0x5c, 0x47, 0xfc, 0x7a, 0xe6, 0xa0, 0xeb, 0x9a, 0x16,
	0x0a, 0x7d, 0xd4, 0xb1, 0xf9, 0x69, 0xff, 0xb8, 0xd1, 0x76, 0x7b, 0xcd, 0xde, 0x85, 0xcd, 0xcf,
	0xdc, 0x8b, 0x66, 0xc7, 0x7d, 0x26, 0x07, 0x9f, 0x9d, 0x9b, 0x5d, 0xdb, 0x32, 0xb9, 0xeb, 0xb3,
	0x66, 0xf8, 0xa9, 0xf4, 0xf4, 0x35, 0x28, 0xbd, 0x54, 0xb3, 0xdc, 0xb7, 0x48, 0x15, 0xf2, 0xb6,
	0xa5, 0xe5, 0xea, 0xb9, 0xa7, 0x25, 0x23, 0x6f, 0x5b, 0xfa, 0x0e, 0xdc, 0xc7, 0x41, 0x83, 0x76,
	0xe5, 0x9c, 0x5f, 0xda, 0x5d, 0x4e, 0xfd, 0xa4, 0x20, 0xa9, 0x41, 0xd1, 0x47, 0x09, 0x2d, 0x2f,
	0x7b, 0xc3, 0xb6, 0xfe, 0x31, 0xac, 0x18, 0xf4, 0x84, 0xfa, 0xd4, 0x69, 0x53, 0xb4, 0x96, 0x62,
	0x85, 0xc0, 0x8c, 0x6f, 0x3a, 0x67, 0xd2, 0x42, 0xc1, 0x90, 0xdf, 0xfa, 0x73, 0x58, 0x3e, 0x70,
	0xdb, 0x26, 0xa7, 0xd6, 0x44, 0x5d, 0x3e, 0xf0, 0x28, 0xa2, 0xcb, 0x6f, 0xfd, 0x05, 0x3c, 0x40,
	0xa5, 0x56, 0xb8, 0x69, 0x29, 0xea, 0x8b, 0x50, 0xe0, 0x66, 0x07, 0xb5, 0xc5, 0xa7, 0xfe, 0xa7,
	0x1c, 0xc0, 0x2b, 0x7a, 0x81, 0x06, 0xc8, 0x47, 0x30, 0x63, 0x99, 0xdc, 0x94, 0x2a, 0xe5, 0x2d,
	0xbd, 0x31, 0x12, 0x24, 0x8d, 0xa1, 0x70, 0x63, 0xd7, 0xe4, 0xa6, 0x21, 0xe5, 0x6b, 0x67, 0x30,
	0x23, 0x5a, 0xa4, 0x86, 0xfe, 0x49, 0xc8, 0xed, 0xb9, 0x7f, 0xfc, 0x7d, 0x3d, 0xff, 0xa3, 0x9c,
	0xf2, 0x93, 0xec, 0x01, 0x98, 0x9c, 0xfb, 0xf6, 0x71, 0x9f, 0x53, 0x26, 0x7d, 0x28, 0x6f, 0x7d,
	0x90, 0x89, 0xd0, 0x0a, 0xc5, 0x8d, 0x88, 0xaa, 0xfe, 0xfb, 0x59, 0x58, 0x1e, 0x27, 0x24, 0x56,
	0xc7, 0x31, 0x7b, 0x88, 0x6e, 0xc8, 0x6f, 0xb2, 0x01, 0xd0, 0xf6, 0xa9, 0x58, 0xd9, 0xa3, 0xe3,
	0x81, 0x5a, 0x73, 0xe5, 0xd7, 0xe2, 0x1d, 0xa3, 0x84, 0x23, 0xdb, 0x03, 0x21, 0xd6, 0xf7, 0xac,
	0x40, 0xac, 0x10, 0x17, 0xc3, 0x91, 0xed, 0x01, 0xf9, 0x10, 0xe6, 0xad, 0xe3, 0x4b, 0x9f, 0x9e,
	0x30, 0x6d, 0xa6, 0x5e, 0x78, 0x5a, 0xde, 0x5a, 0x1d, 0x33, 0x81, 0x5d, 0x29, 0x61, 0x04, 0x92,
	0xe4, 0x9b, 0x50, 0x74, 0xfd, 0x8e, 0xe9, 0xd8, 0xac, 0xa7, 0xcd, 0xca, 0x69, 0xaf, 0x8d, 0xd1,
	0xfa, 0x0c, 0x45, 0x8c, 0x50, 0x98, 0xac, 0x43, 0xd9, 0x66, 0x47, 0xee, 0x31, 0x73, 0xbb, 0x94,
	0x53, 0x6d, 0xae, 0x9e, 0x7b, 0x5a, 0x34, 0xc0, 0x66, 0x9f, 0x61, 0x0f, 0xf9, 0x0e, 0xcc, 0x7b,
	0xa6, 0x4f, 0x1d, 0xce, 0xb4, 0x79, 0xe9, 0xce, 0x93, 0x31, 0x86, 0x13, 0xb1, 0xcd, 0x4e, 0x6d,
	0xcf, 0x08, 0xd4, 0xc8, 0x36, 0x14, 0xdb, 0xa7, 0x76, 0xd7, 0xf2, 0xa9, 0xa3, 0x15, 0xaf, 0x64,
	0x22, 0xd4, 0x23, 0x9f, 0x40, 0xb1, 0x2b, 0x82, 0x57, 0xa4, 0x45, 0x49, 0xda, 0xd0, 0xd3, 0x6d,
	0x1c, 0xa0, 0xa4, 0x11, 0xea, 0x88, 0xb4, 0x62, 0x03, 0xc7, 0x75, 0x06, 0x3d, 0xa6, 0x41, 0xbd,
	0x20, 0xd2, 0x2a, 0x68, 0x93, 0x6d, 0x58, 0xf0, 0xfa, 0xc7, 0x5d, 0x5b, 0x89, 0x32, 0xad, 0x2c,
	0xed, 0x3f, 0x1a, 0x63, 0xff, 0x70, 0x28, 0x66, 0xc4, 0x74, 0x70, 0x19, 0x4d, 0xc7, 0xec, 0x0e,
	0x98, 0xcd, 0xb4, 0x85, 0x60, 0x19, 0x5b, 0xd8, 0x43, 0x34, 0x98, 0x3f, 0xa7, 0x3e, 0x13, 0xfe,
	0x57, 0x64, 0x52, 0x06, 0x4d, 0xe1, 0x9a, 0xe7, 0xd3, 0x73, 0xdb, 0xed, 0x33, 0xad, 0xaa, 0x32,
	0x3e, 0x68, 0xcb, 0x68, 0xa3, 0x97, 0x5c, 0xbb, 0x8b, 0xd1, 0x46, 0x2f, 0xb9, 0xfe, 0x97, 0x1c,
	0xd4, 0x0e, 0xcd, 0x8e, 0xed, 0x44, 0x52, 0x79, 0xc7, 0xed, 0x76, 0x69, 0x5b, 0xce, 0x74, 0x2b,
	0x4c, 0xaf, 0xb4, 0x59, 0xa0, 0xce, 0x30, 0xb5, 0xc8, 0xc7, 0x30, 0xdb, 0xb5, 0x9d, 0xb3, 0x20,
	0x63, 0xa2, 0xdb, 0x63, 0x7a, 0x76, 0x03, 0x79, 0xb2, 0x81, 0xa8, 0xb6, 0xeb, 0x1c, 0x08, 0x69,
	0x43, 0x29, 0x91, 0x16, 0x80, 0x17, 0x8e, 0xc8, 0xb8, 0x2e, 0x6f, 0x3d, 0x9e, 0x68, 0xc2, 0x88,
	0x28, 0xe9, 0x6f, 0x60, 0xe9, 0x76, 0x66, 0xb2, 0x15, 0x9f, 0xc9, 0xc3, 0x14, 0x37, 0xa2, 0xfe,
	0xeb, 0x5f, 0xc0, 0x7c, 0xc0, 0x4d, 0x5b, 0x31, 0x6e, 0xfa, 0xdf, 0x41, 0x5e, 0x40, 0x39, 0x62,
	0x28, 0xa4, 0xdc, 0xdc, 0x90, 0x72, 0x91, 0x57, 0xf3, 0x21, 0xaf, 0xee, 0xc6, 0xa8, 0x4d, 0xad,
	0xf2, 0xd7, 0xd2, 0x1d, 0x4c, 0xe1, 0xb5, 0xff, 0xcc, 0x85, 0x2b, 0x3d, 0x81, 0xd4, 0x92, 0xf8,
	0x71, 0x92, 0x2b, 0x4c, 0x47, 0x72, 0x33, 0x69, 0x24, 0xd7, 0x1a, 0x5a, 0x33, 0x39, 0x32, 0x56,
	0xad, 0xa1, 0xce, 0xee, 0x46, 0x70, 0x76, 0x37, 0x5e, 0x07, 0x87, 0xbb, 0x32, 0x51, 0xcf, 0x85,
	0x48, 0x2d, 0x2e, 0x4c, 0x04, 0x48, 0x26, 0x97, 0xc4, 0x35, 0xa5, 0x09, 0xd4, 0x6a, 0x71, 0xf2,
	0x2d, 0x98, 0x53, 0x04, 0x8a, 0xd4, 0x56, 0xcf, 0xd8, 0x70, 0x45, 0xb8, 0x28, 0x1f, 0xe3, 0xdb,
	0xe2, 0x0d, 0xf8, 0xb6, 0x94, 0xc5, 0xb7, 0x70, 0x73, 0xbe, 0x2d, 0xdf, 0x02, 0xdf, 0x2e, 0xdc,
	0x90, 0x6f, 0x2b, 0x13, 0xf8, 0xb6, 0x7a, 0x73, 0xbe, 0xbd, 0x3b, 0xc2, 0xb7, 0xf5, 0x21, 0xdf,
	0x2e, 0xc6, 0x82, 0x30, 0xe4, 0x5d, 0x3d, 0xc2, 0xbb, 0x4b, 0xc3, 0x5a, 0x62, 0xf1, 0x4e, 0x84,
	0x7f, 0x6b, 0xc8, 0xbf, 0x24, 0x36, 0x2e, 0xfb, 0xa2, 0xe7, 0xf4, 0xbd, 0x69, 0xcf, 0x69, 0xfd,
	0x0f, 0x79, 0xa8, 0xe0, 0xaa, 0xfd, 0x50, 0x86, 0x21, 0xf9, 0x76, 0x8c, 0x72, 0x36, 0xd2, 0x57,
	0x59, 0xc9, 0x47, 0x2a, 0x22, 0xf2, 0x02, 0xca, 0x2a, 0x96, 0x65, 0x85, 0x8c, 0xfc, 0x33, 0x9a,
	0x02, 0x2f, 0x45, 0x11, 0xfd, 0x03, 0x93, 0x9d, 0x19, 0x98, 0x30, 0xe2, 0x1b, 0xf3, 0xbb, 0x10,
	0xe4, 0x77, 0xed, 0x37, 0xb9, 0x29, 0xea, 0xab, 0x4f, 0xc7, 0xd4, 0x57, 0x9b, 0x93, 0x5c, 0x1e,
	0x4f, 0x45, 0x64, 0x65, 0xe8, 0x40, 0x88, 0x22, 0x4a, 0xe5, 0x5f, 0xcf, 0x86, 0xc5, 0x66, 0x52,
	0x7f, 0x5a, 0xa2, 0x9a, 0xa6, 0xcc, 0x1a, 0xe6, 0xfe, 0xcc, 0x0d, 0x72, 0xff, 0x4a, 0xb5, 0x56,
	0x24, 0xb5, 0xe7, 0x6e, 0x9e, 0xda, 0xf3, 0xb7, 0x90, 0xda, 0xc5, 0x1b, 0xa6, 0x76, 0x69, 0x42,
	0x6a, 0xc3, 0xcd, 0x53, 0xbb, 0x3c, 0x92, 0xda, 0xd1, 0x82, 0x69, 0x21, 0xa5, 0x60, 0xaa, 0x0c,
	0x0b, 0xa6, 0x68, 0xa2, 0x56, 0xa7, 0x4e, 0xd4, 0xe7, 0x50, 0xc5, 0x25, 0xf8, 0x5c, 0x4d, 0x6e,
	0xe4, 0xa2, 0xa3, 0xc1, 0x3c, 0xce, 0x1b, 0x83, 0x2f, 0x68, 0xea, 0x7b, 0xa1, 0xee, 0xf7, 0x6c,
	0xc6, 0x5d, 0x7f, 0x30, 0xa2, 0xbb, 0x01, 0x55, 0x51, 0x08, 0x50, 0xeb, 0x08, 0xf1, 0xd1, 0x44,
	0x45, 0xf5, 0xa2, 0xb6, 0xfe, 0x1a, 0xca, 0x91, 0x75, 0x12, 0x5a, 0x91, 0x95, 0x3a, 0x0a, 0x2d,
	0x56, 0x22, 0xbd, 0xfb, 0x16, 0x79, 0x04, 0x73, 0xcc, 0xed, 0xfb, 0x6d, 0x34, 0x1a, 0x26, 0x17,
	0xf6, 0xea, 0x3d, 0x20, 0x08, 0x10, 0x35, 0x9e, 0x74, 0x71, 0x0f, 0xca, 0x11, 0xb3, 0x98, 0xeb,
	0x19, 0xf4, 0x14, 0xdd, 0xd0, 0xa8, 0xa6, 0xee, 0x46, 0x6a, 0x3b, 0xc7, 0xc1, 0xda, 0x2e, 0x89,
	0xf6, 0x29, 0x2c, 0xf8, 0x91, 0x70, 0x1d, 0x53, 0x88, 0x66, 0x05, 0x77, 0x4c, 0x57, 0xff, 0x3e,
	0xdc, 0x1b, 0x23, 0x14, 0xbb, 0x59, 0xe7, 0xe2, 0x37, 0x6b, 0xb1, 0x97, 0xf1, 0x8d, 0x08, 0x9a,
	0xba, 0x11, 0xf2, 0xb5, 0x8a, 0x90, 0x11, 0xcf, 0xbf, 0x11, 0xf2, 0x88, 0xf2, 0x39, 0x23, 0xb8,
	0x50, 0x50, 0x77, 0x60, 0x0e, 0x8d, 0x3d, 0x01, 0xb0, 0x2d, 0xea, 0x70, 0xfb, 0xc4, 0xa6, 0x7e,
	0x82, 0x71, 0x23, 0x23, 0xd1, 0xdb, 0x43, 0x3e, 0x7e, 0x7b, 0xd0, 0xa1, 0x28, 0xce, 0x02, 0x01,
	0x97, 0xe0, 0xd2, 0xb0, 0x5f, 0xb7, 0x80, 0x0c, 0xef, 0xb2, 0x41, 0x46, 0x8f, 0x4c, 0x24, 0xca,
	0x0b, 0xf9, 0xd4, 0xbb, 0x79, 0x2a, 0x2f, 0xe8, 0x7f, 0xcd, 0xc1, 0xdd, 0x24, 0xc6, 0x06, 0x54,
	0x55, 0xd0, 0x85, 0x71, 0x8e, 0x11, 0xab, 0x7a, 0x83, 0xb2, 0x7b, 0x19, 0x66, 0x19, 0x37, 0x7d,
	0x8e, 0x93, 0x53, 0x0d, 0xb2, 0x08, 0x05, 0xea, 0xa8, 0x13, 0xa2, 0x60, 0x88, 0x4f, 0xb2, 0x02,
	0x73, 0x8c, 0xfb, 0xa6, 0x63, 0xa9, 0xc2, 0xd2, 0xc0, 0x96, 0xd0, 0xf7, 0x4e, 0xc5, 0x0a, 0xcc,
	0x2a, 0x7d, 0xd9, 0x10, 0x8b, 0xe6, 0x53, 0x66, 0x5b, 0x7d, 0x75, 0xad, 0x2d, 0x19, 0x41, 0x53,
	0xc8, 0x77, 0x7c, 0xb7, 0xef, 0x69, 0xf3, 0x4a, 0x5e, 0x36, 0xc2, 0x47, 0x93, 0x62, 0xe4, 0xd1,
	0xe4, 0xcf, 0x39, 0x28, 0x06, 0x4c, 0x4e, 0x56, 0xa1, 0xc8, 0xcd, 0xcb, 0x68, 0xe6, 0xcd, 0xcb,
	0xf6, 0xbe, 0xf4, 0xa0, 0x43, 0x9d, 0x3e, 0xc3, 0xf0, 0x51, 0x0d, 0x49, 0x11, 0x1e, 0x6d, 0xdb,
	0x58, 0xb0, 0x0b, 0x8a, 0x50, 0x4d, 0x41, 0x72, 0x6d, 0xb7, 0xd7, 0x73, 0x9d, 0x23, 0x79, 0x9e,
	0xcd, 0xc8, 0x51, 0x50, 0x5d, 0xaf, 0xc4, 0xa9, 0x16, 0x38, 0x33, 0xab, 0x88, 0x4c, 0x7c, 0x93,
	0x0f, 0xe0, 0x2e, 0x6b, 0xdb, 0x2a, 0x28, 0xda, 0x4a, 0x51, 0x4d, 0xac, 0x3a, 0xec, 0x96, 0xca,
	0xb8, 0x4e, 0xb6, 0x23, 0x27, 0x58, 0x32, 0xb0, 0xa5, 0xff, 0x14, 0xca, 0x07, 0x36, 0xe3, 0x06,
	0xfd, 0xa2, 0x4f, 0x19, 0x17, 0xee, 0x79, 0xa6, 0xf0, 0xb4, 0x27, 0xa7, 0x53, 0x30, 0x82, 0xa6,
	0xa4, 0x58, 0xb3, 0x43, 0x99, 0xfd, 0x25, 0xc5, 0x3d, 0x09, 0xdb, 0xc2, 0xf8, 0x89, 0x7c, 0xfa,
	0xc1, 0x39, 0x61, 0x6b, 0xeb, 0x5f, 0xda, 0x90, 0x32, 0xa9, 0x7f, 0x6e, 0xb7, 0x29, 0xf9, 0x39,
	0xc0, 0x1e, 0xe5, 0xc1, 0x2e, 0x3f, 0x4c, 0x0f, 0xa7, 0x7d, 0xab, 0x56, 0x4b, 0x1f, 0xd5, 0x57,
	0x7e, 0xf5, 0xb7, 0x7f, 0xfe, 0x36, 0xbf, 0x48, 0xaa, 0x4d, 0x1c, 0x61, 0xcd, 0x37, 0xb6, 0xf5,
	0x96, 0x7c, 0x25, 0xed, 0x1f, 0xe2, 0xe1, 0xf8, 0x74, 0x32, 0x5b, 0xa8, 0x37, 0xab, 0x5a, 0xc6,
	0xbd, 0x69, 0x78, 0xff, 0xd4, 0x1f, 0x49, 0x54, 0x8d, 0xac, 0xc4, 0x51, 0x9b, 0xc1, 0x61, 0xfc,
	0x0e, 0xca, 0x7b, 0x94, 0xef, 0x04, 0xe7, 0xea, 0x6d, 0xc3, 0xaf, 0x4b, 0xf8, 0x55, 0xf2, 0x20,
	0x01, 0x1f, 0x1e, 0xe4, 0xef, 0xe0, 0xde, 0x1e, 0xe5, 0xc9, 0x17, 0x41, 0xf2, 0xf5, 0x31, 0xd6,
	0xc7, 0x3f, 0x1b, 0x66, 0xae, 0x79, 0x5d, 0xc2, 0xd7, 0x88, 0x96, 0x80, 0xf7, 0x03, 0x53, 0xe4,
	0x2d, 0x2c, 0x8f, 0xc1, 0x67, 0x13, 0xf6, 0x79, 0xba, 0xc9, 0x3f, 0x96, 0xe8, 0x6b, 0x64, 0x35,
	0x0d, 0x9d, 0x91, 0xdf, 0xe5, 0x80, 0xec, 0x51, 0x1e, 0x7f, 0xd3, 0x64, 0x64, 0xdc, 0x73, 0xdf,
	0xb8, 0x77, 0xcf, 0xda, 0xb3, 0x71, 0x55, 0x49, 0xea, 0xbb, 0x8a, 0xfe, 0x44, 0x7a, 0x54, 0x27,
	0x8f, 0x12, 0x1e, 0x75, 0x95, 0xed, 0xa0, 0x93, 0x78, 0xb0, 0x20, 0x72, 0x2c, 0xf4, 0x67, 0x5c,
	0xf1, 0x13, 0x49, 0xc2, 0xab, 0xba, 0xb1, 0x24, 0xdd, 0x28, 0x93, 0x52, 0xe8, 0x06, 0xf9, 0x05,
	0x54, 0x76, 0xe4, 0xad, 0x38, 0x88, 0x80, 0xf7, 0x32, 0x5f, 0x3c, 0x33, 0x77, 0x7d, 0x59, 0x9a,
	0xaf, 0xea, 0x43, 0xf3, 0xcf, 0x73, 0x9b, 0xe4, 0x14, 0x2a, 0xaa, 0x14, 0x0f, 0x10, 0xea, 0x93,
	0x6a, 0xfe, 0x4c, 0x90, 0x55, 0x09, 0x72, 0x6f, 0x2b, 0x91, 0xce, 0x02, 0xe9, 0x1d, 0x3c, 0x68,
	0x59, 0x96, 0xca, 0x68, 0xb3, 0x1b, 0x3b, 0xbf, 0x33, 0x03, 0x27, 0x28, 0x2c, 0x32, 0x71, 0x31,
	0xa8, 0xf4, 0x94, 0x84, 0x16, 0xf8, 0x5f, 0xc1, 0x72, 0xcb, 0xb2, 0x64, 0x4e, 0xdf, 0x32, 0xb8,
	0x2e, 0xc1, 0x1f, 0xea, 0x69, 0xe9, 0x2c, 0xd0, 0x2f, 0xa1, 0xda, 0xe2, 0xdc, 0x6c, 0x9f, 0x0e,
	0x0f, 0xd0, 0xcc, 0xad, 0x0c, 0xc4, 0x32, 0x81, 0xdf, 0x97, 0xc0, 0xef, 0xe9, 0xda, 0xb8, 0xc0,
	0x15, 0xf3, 0x13, 0xc8, 0x2e, 0x40, 0xcb, 0xb2, 0x82, 0x52, 0xf7, 0x71, 0xba, 0x39, 0x14, 0xb9,
	0xd6, 0x54, 0x83, 0x6b, 0x82, 0x00, 0x7c, 0x03, 0x55, 0xb1, 0xd1, 0xd1, 0xea, 0x76, 0xaa, 0xda,
	0x32, 0x13, 0x18, 0x73, 0x54, 0x5f, 0x4b, 0x6e, 0x70, 0xe4, 0x7e, 0x21, 0xc0, 0xdf, 0xc2, 0xfd,
	0xcf, 0x29, 0x3f, 0xf4, 0xe9, 0x79, 0xa2, 0x4e, 0xcf, 0x98, 0x38, 0x8a, 0x64, 0xe2, 0x6f, 0x48,
	0xfc, 0x75, 0xbd, 0x96, 0xc4, 0xf7, 0xe9, 0x39, 0xf6, 0x0c, 0xe1, 0x5f, 0xd1, 0x4b, 0xfe, 0xff,
	0x81, 0x17, 0xb7, 0xa0, 0x08, 0x7c, 0x17, 0x4a, 0x2d, 0xcb, 0xc2, 0x0a, 0x74, 0xe2, 0xb5, 0xf7,
	0x5a, 0x19, 0x85, 0xb7, 0x28, 0x81, 0x76, 0x00, 0x55, 0xc5, 0x4e, 0x61, 0x19, 0x95, 0x75, 0x5b,
	0xae, 0x65, 0x0d, 0xea, 0x77, 0xc8, 0xcf, 0xa0, 0xb2, 0x4b, 0xbb, 0x74, 0xc8, 0x44, 0xd9, 0x87,
	0xcd, 0xca, 0xc8, 0x63, 0xc8, 0x77, 0x7b, 0x1e, 0x1f, 0x04, 0x05, 0xc5, 0x66, 0xb2, 0xa0, 0xf8,
	0x12, 0x6a, 0xca, 0xfc, 0x0d, 0x18, 0x28, 0x0d, 0x13, 0xcb, 0x89, 0xcd, 0xb4, 0x72, 0xe2, 0x12,
	0x1e, 0x28, 0xec, 0xeb, 0xb2, 0x4f, 0x1a, 0x30, 0x16, 0x12, 0x9b, 0xa9, 0x85, 0x44, 0x1f, 0xaa,
	0xbb, 0x34, 0x46, 0x3b, 0x57, 0xa8, 0x21, 0xd2, 0x50, 0xb1, 0x7e, 0xd8, 0x4c, 0xa5, 0x1d, 0x72,
	0x16, 0xec, 0xe5, 0x15, 0x68, 0xe7, 0xaa, 0x73, 0x0c, 0x5f, 0x26, 0x2e, 0x60, 0x09, 0x77, 0xf6,
	0xea, 0x94, 0x93, 0x06, 0x8a, 0xcc, 0xba, 0x99, 0x45, 0x37, 0x64, 0x00, 0x9a, 0x41, 0x7b, 0xee,
	0x39, 0xbd, 0x1e, 0xdd, 0xa4, 0x61, 0x23, 0xc7, 0x6e, 0x66, 0x50, 0xcd, 0x10, 0xfa, 0x7a, 0x54,
	0x73, 0x55, 0xe8, 0x08, 0xcd, 0x90, 0x53, 0x58, 0x50, 0xcb, 0x3d, 0x35, 0xcd, 0x5c, 0x35, 0x6d,
	0x90, 0x62, 0xb6, 0xfb, 0x70, 0xdf, 0xf5, 0x3b, 0xa3, 0xe6, 0xb7, 0x17, 0x82, 0x9d, 0x14, 0xf6,
	0x0e, 0x73, 0x3f, 0xf9, 0x24, 0xf2, 0xbf, 0xbe, 0x94, 0xde, 0x36, 0x19, 0x6d, 0x76, 0xdc, 0x67,
	0x1d, 0xea, 0x48, 0xcc, 0x66, 0x68, 0xc3, 0xf4, 0x6c, 0x16, 0xc0, 0xbd, 0xc0, 0xdf, 0x7f, 0xe7,
	0x72, 0x7f, 0xcc, 0x17, 0x77, 0xf7, 0x77, 0x5e, 0xff, 0xb8, 0x75, 0xb8, 0x7f, 0x3c, 0x27, 0x55,
	0x3e, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0xd2, 0x36, 0xf1, 0xf3, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeatureServiceClient is the client API for FeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeatureServiceClient interface {
	// Retrieves the specified feature
	GetFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*Feature, error)
	// Retrieves all the biological parents features
	GetParents(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error)
	// Retrieves all biological children features
	GetChildren(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error)
	// Retrieves the feature(called reference or source feature) under whose
	// coordinate system the current feature is located. By default rank 0 is
	// assumed
	GetReferenceFeature(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*Feature, error)
	// Retrieves all reference features
	GetReferenceFeatures(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*FeatureCollection, error)
	// Retrieves all features that are located within the bounds of
	// referernce feature
	GetLocatedFeatures(ctx context.Context, in *LocatedFeatureFilter, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error)
	// List all features
	ListFeatures(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error)
	// Create a new feature
	CreateFeature(ctx context.Context, in *NewFeature, opts ...grpc.CallOption) (*Feature, error)
	// Update an existing feature
	UpdateFeature(ctx context.Context, in *FeatureUpdate, opts ...grpc.CallOption) (*Feature, error)
	// Add a new parental relation with an existing feature. In case of an
	// existing parent(s), it will be appended to the list.
	AddParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error)
	// Add a new child relation with an existing feature. In case of an
	// existing child, it will be appended to the list.
	AddChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error)
	// Attach a new location entry to connect to a referernce
	// feature. In case of any existing location(s), it will be
	// appended to the list. The reference feature referred in
	// the location needs to exist.
	AttachLocation(ctx context.Context, in *NewFeatureLocation, opts ...grpc.CallOption) (*Feature, error)
	// Add a new synonym.In case of existing synonym(s),
	// it will be appended to the list
	AddSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*Feature, error)
	// Add a new publication.In case of existing publication(s),
	// it will append it to the list
	AddPublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*Feature, error)
	// Sets the previous feature in the feature history.
	SetPrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error)
	// Sets the next feature in the feature history.
	SetNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error)
	// Add a new dbxref. In case of existing dbxref it will
	// append it to the list.
	AddDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*Feature, error)
	// Create a new organism entry
	CreateOrganism(ctx context.Context, in *Organism, opts ...grpc.CallOption) (*Organism, error)
	// Delete an existing feature
	DeleteFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a parental relationship with a feature
	DeleteParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a child relationship with a feature
	DeleteChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*empty.Empty, error)
	// Detach an existing location from reference feature
	DetachLocation(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a synonym from the feature.
	DeleteSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a publication from the feature.
	DeletePublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*empty.Empty, error)
	// Remove the previous feature from the feature history.
	RemovePrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*empty.Empty, error)
	// Remove the next feature from the feature history.
	RemoveNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete dbxref from a feature.
	DeleteDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*empty.Empty, error)
}

type featureServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeatureServiceClient(cc *grpc.ClientConn) FeatureServiceClient {
	return &featureServiceClient{cc}
}

func (c *featureServiceClient) GetFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetParents(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error) {
	out := new(FeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetParents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetChildren(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error) {
	out := new(FeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetReferenceFeature(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetReferenceFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetReferenceFeatures(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*FeatureCollection, error) {
	out := new(FeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetReferenceFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetLocatedFeatures(ctx context.Context, in *LocatedFeatureFilter, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error) {
	out := new(PaginatedFeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetLocatedFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) ListFeatures(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error) {
	out := new(PaginatedFeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/ListFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) CreateFeature(ctx context.Context, in *NewFeature, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/CreateFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) UpdateFeature(ctx context.Context, in *FeatureUpdate, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/UpdateFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddParentalRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddChildRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AttachLocation(ctx context.Context, in *NewFeatureLocation, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AttachLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddPublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) SetPrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/SetPrevFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) SetNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/SetNextFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddDbxref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) CreateOrganism(ctx context.Context, in *Organism, opts ...grpc.CallOption) (*Organism, error) {
	out := new(Organism)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/CreateOrganism", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteParentalRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteChildRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DetachLocation(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DetachLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeletePublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeletePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) RemovePrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/RemovePrevFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) RemoveNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/RemoveNextFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteDbxref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServiceServer is the server API for FeatureService service.
type FeatureServiceServer interface {
	// Retrieves the specified feature
	GetFeature(context.Context, *FeatureId) (*Feature, error)
	// Retrieves all the biological parents features
	GetParents(context.Context, *FeatureRelationFilter) (*FeatureCollection, error)
	// Retrieves all biological children features
	GetChildren(context.Context, *FeatureRelationFilter) (*FeatureCollection, error)
	// Retrieves the feature(called reference or source feature) under whose
	// coordinate system the current feature is located. By default rank 0 is
	// assumed
	GetReferenceFeature(context.Context, *ReferenceFeatureFilter) (*Feature, error)
	// Retrieves all reference features
	GetReferenceFeatures(context.Context, *FeatureId) (*FeatureCollection, error)
	// Retrieves all features that are located within the bounds of
	// referernce feature
	GetLocatedFeatures(context.Context, *LocatedFeatureFilter) (*PaginatedFeatureCollection, error)
	// List all features
	ListFeatures(context.Context, *ListRequest) (*PaginatedFeatureCollection, error)
	// Create a new feature
	CreateFeature(context.Context, *NewFeature) (*Feature, error)
	// Update an existing feature
	UpdateFeature(context.Context, *FeatureUpdate) (*Feature, error)
	// Add a new parental relation with an existing feature. In case of an
	// existing parent(s), it will be appended to the list.
	AddParentalRelationship(context.Context, *FeatureConnection) (*Feature, error)
	// Add a new child relation with an existing feature. In case of an
	// existing child, it will be appended to the list.
	AddChildRelationship(context.Context, *FeatureConnection) (*Feature, error)
	// Attach a new location entry to connect to a referernce
	// feature. In case of any existing location(s), it will be
	// appended to the list. The reference feature referred in
	// the location needs to exist.
	AttachLocation(context.Context, *NewFeatureLocation) (*Feature, error)
	// Add a new synonym.In case of existing synonym(s),
	// it will be appended to the list
	AddSynonym(context.Context, *FeatureSynonym) (*Feature, error)
	// Add a new publication.In case of existing publication(s),
	// it will append it to the list
	AddPublication(context.Context, *FeaturePublication) (*Feature, error)
	// Sets the previous feature in the feature history.
	SetPrevFeatureHistory(context.Context, *FeatureHistory) (*Feature, error)
	// Sets the next feature in the feature history.
	SetNextFeatureHistory(context.Context, *FeatureHistory) (*Feature, error)
	// Add a new dbxref. In case of existing dbxref it will
	// append it to the list.
	AddDbxref(context.Context, *FeatureDbxref) (*Feature, error)
	// Create a new organism entry
	CreateOrganism(context.Context, *Organism) (*Organism, error)
	// Delete an existing feature
	DeleteFeature(context.Context, *FeatureId) (*empty.Empty, error)
	// Delete a parental relationship with a feature
	DeleteParentalRelationship(context.Context, *FeatureConnection) (*empty.Empty, error)
	// Delete a child relationship with a feature
	DeleteChildRelationship(context.Context, *FeatureConnection) (*empty.Empty, error)
	// Detach an existing location from reference feature
	DetachLocation(context.Context, *ReferenceFeatureFilter) (*empty.Empty, error)
	// Delete a synonym from the feature.
	DeleteSynonym(context.Context, *FeatureSynonym) (*empty.Empty, error)
	// Delete a publication from the feature.
	DeletePublication(context.Context, *FeaturePublication) (*empty.Empty, error)
	// Remove the previous feature from the feature history.
	RemovePrevFeatureHistory(context.Context, *FeatureHistory) (*empty.Empty, error)
	// Remove the next feature from the feature history.
	RemoveNextFeatureHistory(context.Context, *FeatureHistory) (*empty.Empty, error)
	// Delete dbxref from a feature.
	DeleteDbxref(context.Context, *FeatureDbxref) (*empty.Empty, error)
}

func RegisterFeatureServiceServer(s *grpc.Server, srv FeatureServiceServer) {
	s.RegisterService(&_FeatureService_serviceDesc, srv)
}

func _FeatureService_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetFeature(ctx, req.(*FeatureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRelationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetParents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetParents(ctx, req.(*FeatureRelationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRelationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetChildren(ctx, req.(*FeatureRelationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetReferenceFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFeatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetReferenceFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetReferenceFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetReferenceFeature(ctx, req.(*ReferenceFeatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetReferenceFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetReferenceFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetReferenceFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetReferenceFeatures(ctx, req.(*FeatureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetLocatedFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocatedFeatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetLocatedFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetLocatedFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetLocatedFeatures(ctx, req.(*LocatedFeatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/ListFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).ListFeatures(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_CreateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFeature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).CreateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/CreateFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).CreateFeature(ctx, req.(*NewFeature))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_UpdateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).UpdateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/UpdateFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).UpdateFeature(ctx, req.(*FeatureUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddParentalRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddParentalRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddParentalRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddParentalRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddChildRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddChildRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddChildRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddChildRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AttachLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFeatureLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AttachLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AttachLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AttachLocation(ctx, req.(*NewFeatureLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureSynonym)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddSynonym(ctx, req.(*FeatureSynonym))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturePublication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddPublication(ctx, req.(*FeaturePublication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_SetPrevFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).SetPrevFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/SetPrevFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).SetPrevFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_SetNextFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).SetNextFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/SetNextFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).SetNextFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddDbxref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureDbxref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddDbxref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddDbxref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddDbxref(ctx, req.(*FeatureDbxref))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_CreateOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).CreateOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/CreateOrganism",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).CreateOrganism(ctx, req.(*Organism))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteFeature(ctx, req.(*FeatureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteParentalRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteParentalRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteParentalRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteParentalRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteChildRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteChildRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteChildRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteChildRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DetachLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFeatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DetachLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DetachLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DetachLocation(ctx, req.(*ReferenceFeatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureSynonym)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteSynonym(ctx, req.(*FeatureSynonym))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeletePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturePublication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeletePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeletePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeletePublication(ctx, req.(*FeaturePublication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_RemovePrevFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).RemovePrevFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/RemovePrevFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).RemovePrevFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_RemoveNextFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).RemoveNextFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/RemoveNextFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).RemoveNextFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteDbxref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureDbxref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteDbxref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteDbxref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteDbxref(ctx, req.(*FeatureDbxref))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.feature.FeatureService",
	HandlerType: (*FeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _FeatureService_GetFeature_Handler,
		},
		{
			MethodName: "GetParents",
			Handler:    _FeatureService_GetParents_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _FeatureService_GetChildren_Handler,
		},
		{
			MethodName: "GetReferenceFeature",
			Handler:    _FeatureService_GetReferenceFeature_Handler,
		},
		{
			MethodName: "GetReferenceFeatures",
			Handler:    _FeatureService_GetReferenceFeatures_Handler,
		},
		{
			MethodName: "GetLocatedFeatures",
			Handler:    _FeatureService_GetLocatedFeatures_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _FeatureService_ListFeatures_Handler,
		},
		{
			MethodName: "CreateFeature",
			Handler:    _FeatureService_CreateFeature_Handler,
		},
		{
			MethodName: "UpdateFeature",
			Handler:    _FeatureService_UpdateFeature_Handler,
		},
		{
			MethodName: "AddParentalRelationship",
			Handler:    _FeatureService_AddParentalRelationship_Handler,
		},
		{
			MethodName: "AddChildRelationship",
			Handler:    _FeatureService_AddChildRelationship_Handler,
		},
		{
			MethodName: "AttachLocation",
			Handler:    _FeatureService_AttachLocation_Handler,
		},
		{
			MethodName: "AddSynonym",
			Handler:    _FeatureService_AddSynonym_Handler,
		},
		{
			MethodName: "AddPublication",
			Handler:    _FeatureService_AddPublication_Handler,
		},
		{
			MethodName: "SetPrevFeatureHistory",
			Handler:    _FeatureService_SetPrevFeatureHistory_Handler,
		},
		{
			MethodName: "SetNextFeatureHistory",
			Handler:    _FeatureService_SetNextFeatureHistory_Handler,
		},
		{
			MethodName: "AddDbxref",
			Handler:    _FeatureService_AddDbxref_Handler,
		},
		{
			MethodName: "CreateOrganism",
			Handler:    _FeatureService_CreateOrganism_Handler,
		},
		{
			MethodName: "DeleteFeature",
			Handler:    _FeatureService_DeleteFeature_Handler,
		},
		{
			MethodName: "DeleteParentalRelationship",
			Handler:    _FeatureService_DeleteParentalRelationship_Handler,
		},
		{
			MethodName: "DeleteChildRelationship",
			Handler:    _FeatureService_DeleteChildRelationship_Handler,
		},
		{
			MethodName: "DetachLocation",
			Handler:    _FeatureService_DetachLocation_Handler,
		},
		{
			MethodName: "DeleteSynonym",
			Handler:    _FeatureService_DeleteSynonym_Handler,
		},
		{
			MethodName: "DeletePublication",
			Handler:    _FeatureService_DeletePublication_Handler,
		},
		{
			MethodName: "RemovePrevFeatureHistory",
			Handler:    _FeatureService_RemovePrevFeatureHistory_Handler,
		},
		{
			MethodName: "RemoveNextFeatureHistory",
			Handler:    _FeatureService_RemoveNextFeatureHistory_Handler,
		},
		{
			MethodName: "DeleteDbxref",
			Handler:    _FeatureService_DeleteDbxref_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature.proto",
}
