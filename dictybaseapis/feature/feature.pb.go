// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: dictybase/feature/feature.proto

package feature

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique feature identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FeatureId) Reset() {
	*x = FeatureId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureId) ProtoMessage() {}

func (x *FeatureId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureId.ProtoReflect.Descriptor instead.
func (*FeatureId) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FeatureRelationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId string `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// Type of relationship, generally a sequence ontology term
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *FeatureRelationFilter) Reset() {
	*x = FeatureRelationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureRelationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureRelationFilter) ProtoMessage() {}

func (x *FeatureRelationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureRelationFilter.ProtoReflect.Descriptor instead.
func (*FeatureRelationFilter) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureRelationFilter) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *FeatureRelationFilter) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type ReferenceFeatureFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId string `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// Used for feature with multiple locations, 0 is used as default.
	Rank int64 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *ReferenceFeatureFilter) Reset() {
	*x = ReferenceFeatureFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceFeatureFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceFeatureFilter) ProtoMessage() {}

func (x *ReferenceFeatureFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceFeatureFilter.ProtoReflect.Descriptor instead.
func (*ReferenceFeatureFilter) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{2}
}

func (x *ReferenceFeatureFilter) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *ReferenceFeatureFilter) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type LocatedFeatureFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of the reference feature
	FeatureId string `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// The biological type of feature, generally a sequence ontology term.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The `filter` field restricts no of features in the collection by using a
	// combination of custom start and end coordinates of reference feature. To
	// use it, supply the field name followed by the filter expression. It uses
	// the following syntax...
	//
	//	field_name operator value
	//
	// field_name - Any one of the allowed field name that are given below.
	//
	//   - start - leftmost boundary of location (number).
	//   - end   - rightmost boundary of location (number).
	//
	// operator - Defines the type of filter match to use. It could be any of
	// the following and all of them should be URL-encoded for http request.
	//
	//	>   Greater than
	//	<   Less than
	//	=<  Less than equal to
	//	>=  Greater than equal to
	//
	// value - The value must be a number here. If only one of the value is
	// given, the coordinate of reference feature is for the other by default.
	// URL-reserved
	// characters must be URL-encoded for http request.
	//
	//	filter: "start>=100"
	//	filter: "end<789"
	//
	// Filter can be combined using AND boolean logic. The AND is represented
	// using a semi-colon(;).
	//
	//	filter: "start>=89;end<=7430"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *LocatedFeatureFilter) Reset() {
	*x = LocatedFeatureFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocatedFeatureFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocatedFeatureFilter) ProtoMessage() {}

func (x *LocatedFeatureFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocatedFeatureFilter.ProtoReflect.Descriptor instead.
func (*LocatedFeatureFilter) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{3}
}

func (x *LocatedFeatureFilter) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *LocatedFeatureFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LocatedFeatureFilter) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Definition for creating new feature
type NewFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewFeature_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewFeature) Reset() {
	*x = NewFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFeature) ProtoMessage() {}

func (x *NewFeature) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFeature.ProtoReflect.Descriptor instead.
func (*NewFeature) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{4}
}

func (x *NewFeature) GetData() *NewFeature_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition of various feature fields for creating new feature
type NewFeatureAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the user who created the feature
	CreatedBy int64 `protobuf:"varint,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Identifier of the user who updated the feature
	UpdatedBy int64     `protobuf:"varint,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Dbxrefs   []*Dbxref `protobuf:"bytes,4,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	Organism  *Organism `protobuf:"bytes,5,opt,name=organism,proto3" json:"organism,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,6,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	// List of biological parent features
	Parents []*FeatureRelationship `protobuf:"bytes,7,rep,name=parents,proto3" json:"parents,omitempty"`
	// List of biological children feature
	Children []*FeatureRelationship `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	Location []*FeatureLocation     `protobuf:"bytes,9,rep,name=location,proto3" json:"location,omitempty"`
	// Alternate list of names
	Synonyms     []string       `protobuf:"bytes,10,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Publications []*Publication `protobuf:"bytes,11,rep,name=publications,proto3" json:"publications,omitempty"`
	// Indicates if the feature is generated(annotated) from the
	// result of an automated analysis
	IsAnalysis bool `protobuf:"varint,12,opt,name=is_analysis,json=isAnalysis,proto3" json:"is_analysis,omitempty"`
	// Version of this feature, it increase by 1 for the replacement
	Version int64 `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *NewFeatureAttributes) Reset() {
	*x = NewFeatureAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFeatureAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFeatureAttributes) ProtoMessage() {}

func (x *NewFeatureAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFeatureAttributes.ProtoReflect.Descriptor instead.
func (*NewFeatureAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{5}
}

func (x *NewFeatureAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewFeatureAttributes) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *NewFeatureAttributes) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *NewFeatureAttributes) GetDbxrefs() []*Dbxref {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *NewFeatureAttributes) GetOrganism() *Organism {
	if x != nil {
		return x.Organism
	}
	return nil
}

func (x *NewFeatureAttributes) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

func (x *NewFeatureAttributes) GetParents() []*FeatureRelationship {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *NewFeatureAttributes) GetChildren() []*FeatureRelationship {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *NewFeatureAttributes) GetLocation() []*FeatureLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NewFeatureAttributes) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *NewFeatureAttributes) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *NewFeatureAttributes) GetIsAnalysis() bool {
	if x != nil {
		return x.IsAnalysis
	}
	return false
}

func (x *NewFeatureAttributes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// List of features with pagination
type PaginatedFeatureCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FeatureData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta          `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *PaginatedFeatureCollection) Reset() {
	*x = PaginatedFeatureCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedFeatureCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedFeatureCollection) ProtoMessage() {}

func (x *PaginatedFeatureCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedFeatureCollection.ProtoReflect.Descriptor instead.
func (*PaginatedFeatureCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{6}
}

func (x *PaginatedFeatureCollection) GetData() []*FeatureData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PaginatedFeatureCollection) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// List of features
type FeatureCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FeatureData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FeatureCollection) Reset() {
	*x = FeatureCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureCollection) ProtoMessage() {}

func (x *FeatureCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureCollection.ProtoReflect.Descriptor instead.
func (*FeatureCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{7}
}

func (x *FeatureCollection) GetData() []*FeatureData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition of a biological entity
type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FeatureData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{8}
}

func (x *Feature) GetData() *FeatureData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The biological type of feature, generally a sequence ontology term
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique id
	Id         string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *FeatureAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *FeatureData) Reset() {
	*x = FeatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureData) ProtoMessage() {}

func (x *FeatureData) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureData.ProtoReflect.Descriptor instead.
func (*FeatureData) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{9}
}

func (x *FeatureData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeatureData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureData) GetAttributes() *FeatureAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Definition of various feature fields
type FeatureAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the user who created the feature
	CreatedBy int64 `protobuf:"varint,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Identifier of the user who updated the feature
	UpdatedBy int64 `protobuf:"varint,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Timestamp for creation and update
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Organism  *Organism              `protobuf:"bytes,6,opt,name=organism,proto3" json:"organism,omitempty"`
	// Toggle the obsolete status
	IsObsolete bool `protobuf:"varint,7,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	// List of biological parent features
	Parents []*FeatureRelationship `protobuf:"bytes,8,rep,name=parents,proto3" json:"parents,omitempty"`
	// List of biological children feature
	Children []*FeatureRelationship `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`
	// List of feature locations in the reference backend
	Location []*FeatureLocation `protobuf:"bytes,10,rep,name=location,proto3" json:"location,omitempty"`
	// Alternate list of names
	Synonyms     []string       `protobuf:"bytes,11,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Publications []*Publication `protobuf:"bytes,12,rep,name=publications,proto3" json:"publications,omitempty"`
	// Indicates if the feature is generated(annotated) from the
	// result of an automated analysis
	IsAnalysis bool `protobuf:"varint,13,opt,name=is_analysis,json=isAnalysis,proto3" json:"is_analysis,omitempty"`
	// Version of this feature, it increase by 1 for the replacement
	Version int64 `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	// Earlier instance of the feature that this one has replaced
	Dbxrefs []*Dbxref `protobuf:"bytes,15,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
}

func (x *FeatureAttributes) Reset() {
	*x = FeatureAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureAttributes) ProtoMessage() {}

func (x *FeatureAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureAttributes.ProtoReflect.Descriptor instead.
func (*FeatureAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{10}
}

func (x *FeatureAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureAttributes) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *FeatureAttributes) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *FeatureAttributes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeatureAttributes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FeatureAttributes) GetOrganism() *Organism {
	if x != nil {
		return x.Organism
	}
	return nil
}

func (x *FeatureAttributes) GetIsObsolete() bool {
	if x != nil {
		return x.IsObsolete
	}
	return false
}

func (x *FeatureAttributes) GetParents() []*FeatureRelationship {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *FeatureAttributes) GetChildren() []*FeatureRelationship {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *FeatureAttributes) GetLocation() []*FeatureLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FeatureAttributes) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *FeatureAttributes) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *FeatureAttributes) GetIsAnalysis() bool {
	if x != nil {
		return x.IsAnalysis
	}
	return false
}

func (x *FeatureAttributes) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FeatureAttributes) GetDbxrefs() []*Dbxref {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

// Definition for updating a feature
type FeatureUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FeatureUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// An optional mask specifying which fields to update.
	// Presence of this field allow partial updates.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *FeatureUpdate) Reset() {
	*x = FeatureUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureUpdate) ProtoMessage() {}

func (x *FeatureUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureUpdate.ProtoReflect.Descriptor instead.
func (*FeatureUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{11}
}

func (x *FeatureUpdate) GetData() *FeatureUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FeatureUpdate) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Definition of feature fields for updating a feature
type FeatureUpdateAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short human readable textual name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the user who updated the feature
	UpdatedBy int64     `protobuf:"varint,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Dbxrefs   []*Dbxref `protobuf:"bytes,3,rep,name=dbxrefs,proto3" json:"dbxrefs,omitempty"`
	Organism  *Organism `protobuf:"bytes,4,opt,name=organism,proto3" json:"organism,omitempty"`
	// List of biological parent features
	Parents []*FeatureRelationship `protobuf:"bytes,5,rep,name=parents,proto3" json:"parents,omitempty"`
	// List of biological children feature
	Children []*FeatureRelationship `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	Location []*FeatureLocation     `protobuf:"bytes,7,rep,name=location,proto3" json:"location,omitempty"`
	// aLTERNATe list of names
	Synonyms     []string       `protobuf:"bytes,8,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Publications []*Publication `protobuf:"bytes,9,rep,name=publications,proto3" json:"publications,omitempty"`
	// Indicates if the feature is generated(annotated) from the
	// result of an automated analysis
	IsAnalysis bool `protobuf:"varint,10,opt,name=is_analysis,json=isAnalysis,proto3" json:"is_analysis,omitempty"`
}

func (x *FeatureUpdateAttributes) Reset() {
	*x = FeatureUpdateAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureUpdateAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureUpdateAttributes) ProtoMessage() {}

func (x *FeatureUpdateAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureUpdateAttributes.ProtoReflect.Descriptor instead.
func (*FeatureUpdateAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{12}
}

func (x *FeatureUpdateAttributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureUpdateAttributes) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *FeatureUpdateAttributes) GetDbxrefs() []*Dbxref {
	if x != nil {
		return x.Dbxrefs
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetOrganism() *Organism {
	if x != nil {
		return x.Organism
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetParents() []*FeatureRelationship {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetChildren() []*FeatureRelationship {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetLocation() []*FeatureLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *FeatureUpdateAttributes) GetIsAnalysis() bool {
	if x != nil {
		return x.IsAnalysis
	}
	return false
}

// Defintion for managing synonym of a feature
type FeatureSynonym struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId string `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Synonym   string `protobuf:"bytes,2,opt,name=synonym,proto3" json:"synonym,omitempty"`
}

func (x *FeatureSynonym) Reset() {
	*x = FeatureSynonym{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureSynonym) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSynonym) ProtoMessage() {}

func (x *FeatureSynonym) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSynonym.ProtoReflect.Descriptor instead.
func (*FeatureSynonym) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{13}
}

func (x *FeatureSynonym) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *FeatureSynonym) GetSynonym() string {
	if x != nil {
		return x.Synonym
	}
	return ""
}

// Definition for managing a previous or next feature in the feature
// history
type FeatureHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId     string `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	LinkedFeature string `protobuf:"bytes,2,opt,name=linked_feature,json=linkedFeature,proto3" json:"linked_feature,omitempty"`
}

func (x *FeatureHistory) Reset() {
	*x = FeatureHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureHistory) ProtoMessage() {}

func (x *FeatureHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureHistory.ProtoReflect.Descriptor instead.
func (*FeatureHistory) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{14}
}

func (x *FeatureHistory) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *FeatureHistory) GetLinkedFeature() string {
	if x != nil {
		return x.LinkedFeature
	}
	return ""
}

// Container for linked publications
type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier that refers to a publication
	PublicationId string `protobuf:"bytes,1,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	// Source of this publication identifier
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{15}
}

func (x *Publication) GetPublicationId() string {
	if x != nil {
		return x.PublicationId
	}
	return ""
}

func (x *Publication) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Definition for managing publication with a feature
type FeaturePublication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId   string              `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Publication *FeaturePublication `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *FeaturePublication) Reset() {
	*x = FeaturePublication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturePublication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturePublication) ProtoMessage() {}

func (x *FeaturePublication) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturePublication.ProtoReflect.Descriptor instead.
func (*FeaturePublication) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{16}
}

func (x *FeaturePublication) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *FeaturePublication) GetPublication() *FeaturePublication {
	if x != nil {
		return x.Publication
	}
	return nil
}

// Definition for connecting two biologically related(parent or
// children) features
type FeatureConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId    string               `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Relationship *FeatureRelationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (x *FeatureConnection) Reset() {
	*x = FeatureConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConnection) ProtoMessage() {}

func (x *FeatureConnection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConnection.ProtoReflect.Descriptor instead.
func (*FeatureConnection) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{17}
}

func (x *FeatureConnection) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *FeatureConnection) GetRelationship() *FeatureRelationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

// Definition for a related feature
type FeatureRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of relationship, generally a sequence ontology term
	Relation string `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	// Related feature id
	FeatureId string `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
}

func (x *FeatureRelationship) Reset() {
	*x = FeatureRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureRelationship) ProtoMessage() {}

func (x *FeatureRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureRelationship.ProtoReflect.Descriptor instead.
func (*FeatureRelationship) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{18}
}

func (x *FeatureRelationship) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *FeatureRelationship) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

// Definition for managing dbxref with a feature
type FeatureDbxref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId string  `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Dbxref    *Dbxref `protobuf:"bytes,2,opt,name=dbxref,proto3" json:"dbxref,omitempty"`
}

func (x *FeatureDbxref) Reset() {
	*x = FeatureDbxref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDbxref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDbxref) ProtoMessage() {}

func (x *FeatureDbxref) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDbxref.ProtoReflect.Descriptor instead.
func (*FeatureDbxref) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{19}
}

func (x *FeatureDbxref) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *FeatureDbxref) GetDbxref() *Dbxref {
	if x != nil {
		return x.Dbxref
	}
	return nil
}

// An identifier typically from a bioinformatics database(NCBI,Uniprot,Ensembl etc.)
type Dbxref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier
	DbxrefId string `protobuf:"bytes,1,opt,name=dbxref_id,json=dbxrefId,proto3" json:"dbxref_id,omitempty"`
	Version  int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Source database
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *Dbxref) Reset() {
	*x = Dbxref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dbxref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dbxref) ProtoMessage() {}

func (x *Dbxref) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dbxref.ProtoReflect.Descriptor instead.
func (*Dbxref) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{20}
}

func (x *Dbxref) GetDbxrefId() string {
	if x != nil {
		return x.DbxrefId
	}
	return ""
}

func (x *Dbxref) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Dbxref) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// Definition for attaching a new location to a feature
type NewFeatureLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureId string           `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Location  *FeatureLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NewFeatureLocation) Reset() {
	*x = NewFeatureLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFeatureLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFeatureLocation) ProtoMessage() {}

func (x *NewFeatureLocation) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFeatureLocation.ProtoReflect.Descriptor instead.
func (*NewFeatureLocation) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{21}
}

func (x *NewFeatureLocation) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *NewFeatureLocation) GetLocation() *FeatureLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

// The location of a feature relative to another feature using space-based(interbase) coordinates.
type FeatureLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source or reference feature(identifier) which this location is relative to
	SourceFeatureId string `protobuf:"bytes,1,opt,name=source_feature_id,json=sourceFeatureId,proto3" json:"source_feature_id,omitempty"`
	// start/leftmost boundary of this location in linear range based on
	// interbase coordinates. To convert it to base-oriented system, add 1 to
	// this value.
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// End/rightmost boundary of this location in linear range based on
	// interbase coordinates. No conversion is needed to convert it to a base
	// oriented system.
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// Orientation of this location, should be one of 0,1, or -1
	Strand int64 `protobuf:"varint,4,opt,name=strand,proto3" json:"strand,omitempty"`
	// Phase of translation with respect to source feature, should be one of 0,1,or 2.
	Phase int64 `protobuf:"varint,5,opt,name=phase,proto3" json:"phase,omitempty"`
	// Alternate residues which differ from feature residues
	Residue string `protobuf:"bytes,6,opt,name=residue,proto3" json:"residue,omitempty"`
	// Represents derivable extra location of a feature. The default value 0 is
	// used for direct location. Any other derived location gets values greater
	// than 0. For example, the position of an exon on a BAC and in a global
	// chromosomal coordinates.
	Group int64 `protobuf:"varint,7,opt,name=group,proto3" json:"group,omitempty"`
	// Used for feature with multiple locations, 0 is used as default. For
	// example, a blast HSP has two locations, one on the query and one on the
	// subject.
	Rank int64 `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *FeatureLocation) Reset() {
	*x = FeatureLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureLocation) ProtoMessage() {}

func (x *FeatureLocation) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureLocation.ProtoReflect.Descriptor instead.
func (*FeatureLocation) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{22}
}

func (x *FeatureLocation) GetSourceFeatureId() string {
	if x != nil {
		return x.SourceFeatureId
	}
	return ""
}

func (x *FeatureLocation) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FeatureLocation) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *FeatureLocation) GetStrand() int64 {
	if x != nil {
		return x.Strand
	}
	return 0
}

func (x *FeatureLocation) GetPhase() int64 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *FeatureLocation) GetResidue() string {
	if x != nil {
		return x.Residue
	}
	return ""
}

func (x *FeatureLocation) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *FeatureLocation) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// Defintion of an organism entry
type Organism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Taxon identifier
	TaxonId string `protobuf:"bytes,1,opt,name=taxon_id,json=taxonId,proto3" json:"taxon_id,omitempty"`
	// Organism genus
	Genus string `protobuf:"bytes,2,opt,name=genus,proto3" json:"genus,omitempty"`
	// Organism species
	Species    string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	CommonName string `protobuf:"bytes,4,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Taxonomic rank
	Rank string `protobuf:"bytes,5,opt,name=rank,proto3" json:"rank,omitempty"`
	// Scientific name
	ScientificName string `protobuf:"bytes,6,opt,name=scientific_name,json=scientificName,proto3" json:"scientific_name,omitempty"`
	// Strain name
	Strain string `protobuf:"bytes,7,opt,name=strain,proto3" json:"strain,omitempty"`
}

func (x *Organism) Reset() {
	*x = Organism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism) ProtoMessage() {}

func (x *Organism) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism.ProtoReflect.Descriptor instead.
func (*Organism) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{23}
}

func (x *Organism) GetTaxonId() string {
	if x != nil {
		return x.TaxonId
	}
	return ""
}

func (x *Organism) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Organism) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Organism) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *Organism) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *Organism) GetScientificName() string {
	if x != nil {
		return x.ScientificName
	}
	return ""
}

func (x *Organism) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

// ListParameters defines fields for manipulating output of PaginatedFeatureCollection
type ListParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the list
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data return by the collection. To use
	// it, supply one or multiple allowed fields to filter followed
	// by a filter expression. It uses the following syntax...
	//
	//	field_name operator value
	//
	// field_name - Any one of the allowed field name that are given below.
	//
	//   - name      - feature name (string).
	//   - type      - The biological type of feature, generally a sequence ontology term (string)
	//   - species   - Organism species (string)
	//   - genus     - Organism genus (string)
	//   - strain    - Strain name of the organism (string)
	//   - taxon_id  - Taxon identifier (string)
	//   - obsolete  - Live or retired feature (bool)
	//   - analysis  - Feature as a result of analysis (bool)
	//
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded for http request.
	//
	//	==  Equals (URL encoding is %3D%3D)
	//	!=  Not equals
	//	~  Contains/matches substring (case insensitive)
	//	!~  Not contains substring (case insensitive)
	//	>   Greater than
	//	<   Less than
	//	=<  Less than equal to
	//	>=  Greater than equal to
	//
	// value - The value must be a string, a number or a boolean. URL-reserved
	// characters must be URL-encoded for http request.
	//
	//	filter: "name==pcA"
	//	filter: "name~scr"
	//	filter: "obsolete==true"
	//
	// Filter can be combined using OR or AND boolean logic.
	//
	//   - The OR is represented using a comma(,).
	//
	//   - The AND is represented using a semi-colon(;).
	//
	//   - AND and OR operators can be combined and AND takes precedence over OR.
	//
	//     filter: "name==pcA;obsolete==true;type=exon"
	//     filter: "name==transcription,name==gtx"
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListParameters) Reset() {
	*x = ListParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameters) ProtoMessage() {}

func (x *ListParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameters.ProtoReflect.Descriptor instead.
func (*ListParameters) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{24}
}

func (x *ListParameters) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ListParameters) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListParameters) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Metadata definition for traversing the collection
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the collection. Set the
	// cursor value parameter to the value of next_cursor to retrieve the next
	// set of collection using the same method
	NextCursor int64 `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Total number of records in the collection.
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{25}
}

func (x *Meta) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *Meta) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Meta) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NewFeature_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The biological type of feature, generally a sequence ontology term
	Type       string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *NewFeatureAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NewFeature_Data) Reset() {
	*x = NewFeature_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFeature_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFeature_Data) ProtoMessage() {}

func (x *NewFeature_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFeature_Data.ProtoReflect.Descriptor instead.
func (*NewFeature_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NewFeature_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewFeature_Data) GetAttributes() *NewFeatureAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type FeatureUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The biological type of feature, generally a sequence ontology term
	Type       string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *FeatureUpdateAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Id         string                   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FeatureUpdate_Data) Reset() {
	*x = FeatureUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_feature_feature_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureUpdate_Data) ProtoMessage() {}

func (x *FeatureUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_feature_feature_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureUpdate_Data.ProtoReflect.Descriptor instead.
func (*FeatureUpdate_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_feature_feature_proto_rawDescGZIP(), []int{11, 0}
}

func (x *FeatureUpdate_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeatureUpdate_Data) GetAttributes() *FeatureUpdateAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FeatureUpdate_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_dictybase_feature_feature_proto protoreflect.FileDescriptor

var file_dictybase_feature_feature_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x15, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x16, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x61, 0x0a, 0x14, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb1, 0x01,
	0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4e,
	0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x6b, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xe8, 0x04, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x44, 0x62, 0x78, 0x72, 0x65, 0x66, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x52, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x42, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x1a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a,
	0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x0b,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xf3, 0x05, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x41, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12,
	0x42, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x62, 0x78, 0x72,
	0x65, 0x66, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0d,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89,
	0x04, 0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x62, 0x78, 0x72, 0x65,
	0x66, 0x52, 0x07, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x49, 0x0a, 0x0e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0x56, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x54, 0x0a,
	0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x7c, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x7e, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x50, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x62,
	0x78, 0x72, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x62, 0x78, 0x72, 0x65, 0x66, 0x52, 0x06,
	0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x22, 0x6b, 0x0a, 0x06, 0x44, 0x62, 0x78, 0x72, 0x65, 0x66,
	0x12, 0x23, 0x0a, 0x09, 0x64, 0x62, 0x78, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x64, 0x62, 0x78,
	0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x22, 0xcb, 0x01, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x22, 0x56, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xce, 0x12,
	0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1a, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x27, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2d, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x2d, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x1a, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x1a,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x21, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x1a,
	0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44,
	0x62, 0x78, 0x72, 0x65, 0x66, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x62, 0x78, 0x72, 0x65, 0x66, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x1b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x1a, 0x1b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x21, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x76, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x62, 0x78, 0x72,
	0x65, 0x66, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x62,
	0x78, 0x72, 0x65, 0x66, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x75,
	0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x08, 0x44, 0x49, 0x43,
	0x54, 0x59, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dictybase_feature_feature_proto_rawDescOnce sync.Once
	file_dictybase_feature_feature_proto_rawDescData = file_dictybase_feature_feature_proto_rawDesc
)

func file_dictybase_feature_feature_proto_rawDescGZIP() []byte {
	file_dictybase_feature_feature_proto_rawDescOnce.Do(func() {
		file_dictybase_feature_feature_proto_rawDescData = protoimpl.X.CompressGZIP(file_dictybase_feature_feature_proto_rawDescData)
	})
	return file_dictybase_feature_feature_proto_rawDescData
}

var file_dictybase_feature_feature_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_dictybase_feature_feature_proto_goTypes = []interface{}{
	(*FeatureId)(nil),                  // 0: dictybase.feature.FeatureId
	(*FeatureRelationFilter)(nil),      // 1: dictybase.feature.FeatureRelationFilter
	(*ReferenceFeatureFilter)(nil),     // 2: dictybase.feature.ReferenceFeatureFilter
	(*LocatedFeatureFilter)(nil),       // 3: dictybase.feature.LocatedFeatureFilter
	(*NewFeature)(nil),                 // 4: dictybase.feature.NewFeature
	(*NewFeatureAttributes)(nil),       // 5: dictybase.feature.NewFeatureAttributes
	(*PaginatedFeatureCollection)(nil), // 6: dictybase.feature.PaginatedFeatureCollection
	(*FeatureCollection)(nil),          // 7: dictybase.feature.FeatureCollection
	(*Feature)(nil),                    // 8: dictybase.feature.Feature
	(*FeatureData)(nil),                // 9: dictybase.feature.FeatureData
	(*FeatureAttributes)(nil),          // 10: dictybase.feature.FeatureAttributes
	(*FeatureUpdate)(nil),              // 11: dictybase.feature.FeatureUpdate
	(*FeatureUpdateAttributes)(nil),    // 12: dictybase.feature.FeatureUpdateAttributes
	(*FeatureSynonym)(nil),             // 13: dictybase.feature.FeatureSynonym
	(*FeatureHistory)(nil),             // 14: dictybase.feature.FeatureHistory
	(*Publication)(nil),                // 15: dictybase.feature.Publication
	(*FeaturePublication)(nil),         // 16: dictybase.feature.FeaturePublication
	(*FeatureConnection)(nil),          // 17: dictybase.feature.FeatureConnection
	(*FeatureRelationship)(nil),        // 18: dictybase.feature.FeatureRelationship
	(*FeatureDbxref)(nil),              // 19: dictybase.feature.FeatureDbxref
	(*Dbxref)(nil),                     // 20: dictybase.feature.Dbxref
	(*NewFeatureLocation)(nil),         // 21: dictybase.feature.NewFeatureLocation
	(*FeatureLocation)(nil),            // 22: dictybase.feature.FeatureLocation
	(*Organism)(nil),                   // 23: dictybase.feature.Organism
	(*ListParameters)(nil),             // 24: dictybase.feature.ListParameters
	(*Meta)(nil),                       // 25: dictybase.feature.Meta
	(*NewFeature_Data)(nil),            // 26: dictybase.feature.NewFeature.Data
	(*FeatureUpdate_Data)(nil),         // 27: dictybase.feature.FeatureUpdate.Data
	(*timestamppb.Timestamp)(nil),      // 28: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),      // 29: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),              // 30: google.protobuf.Empty
}
var file_dictybase_feature_feature_proto_depIdxs = []int32{
	26, // 0: dictybase.feature.NewFeature.data:type_name -> dictybase.feature.NewFeature.Data
	20, // 1: dictybase.feature.NewFeatureAttributes.dbxrefs:type_name -> dictybase.feature.Dbxref
	23, // 2: dictybase.feature.NewFeatureAttributes.organism:type_name -> dictybase.feature.Organism
	18, // 3: dictybase.feature.NewFeatureAttributes.parents:type_name -> dictybase.feature.FeatureRelationship
	18, // 4: dictybase.feature.NewFeatureAttributes.children:type_name -> dictybase.feature.FeatureRelationship
	22, // 5: dictybase.feature.NewFeatureAttributes.location:type_name -> dictybase.feature.FeatureLocation
	15, // 6: dictybase.feature.NewFeatureAttributes.publications:type_name -> dictybase.feature.Publication
	9,  // 7: dictybase.feature.PaginatedFeatureCollection.data:type_name -> dictybase.feature.FeatureData
	25, // 8: dictybase.feature.PaginatedFeatureCollection.meta:type_name -> dictybase.feature.Meta
	9,  // 9: dictybase.feature.FeatureCollection.data:type_name -> dictybase.feature.FeatureData
	9,  // 10: dictybase.feature.Feature.data:type_name -> dictybase.feature.FeatureData
	10, // 11: dictybase.feature.FeatureData.attributes:type_name -> dictybase.feature.FeatureAttributes
	28, // 12: dictybase.feature.FeatureAttributes.created_at:type_name -> google.protobuf.Timestamp
	28, // 13: dictybase.feature.FeatureAttributes.updated_at:type_name -> google.protobuf.Timestamp
	23, // 14: dictybase.feature.FeatureAttributes.organism:type_name -> dictybase.feature.Organism
	18, // 15: dictybase.feature.FeatureAttributes.parents:type_name -> dictybase.feature.FeatureRelationship
	18, // 16: dictybase.feature.FeatureAttributes.children:type_name -> dictybase.feature.FeatureRelationship
	22, // 17: dictybase.feature.FeatureAttributes.location:type_name -> dictybase.feature.FeatureLocation
	15, // 18: dictybase.feature.FeatureAttributes.publications:type_name -> dictybase.feature.Publication
	20, // 19: dictybase.feature.FeatureAttributes.dbxrefs:type_name -> dictybase.feature.Dbxref
	27, // 20: dictybase.feature.FeatureUpdate.data:type_name -> dictybase.feature.FeatureUpdate.Data
	29, // 21: dictybase.feature.FeatureUpdate.update_mask:type_name -> google.protobuf.FieldMask
	20, // 22: dictybase.feature.FeatureUpdateAttributes.dbxrefs:type_name -> dictybase.feature.Dbxref
	23, // 23: dictybase.feature.FeatureUpdateAttributes.organism:type_name -> dictybase.feature.Organism
	18, // 24: dictybase.feature.FeatureUpdateAttributes.parents:type_name -> dictybase.feature.FeatureRelationship
	18, // 25: dictybase.feature.FeatureUpdateAttributes.children:type_name -> dictybase.feature.FeatureRelationship
	22, // 26: dictybase.feature.FeatureUpdateAttributes.location:type_name -> dictybase.feature.FeatureLocation
	15, // 27: dictybase.feature.FeatureUpdateAttributes.publications:type_name -> dictybase.feature.Publication
	16, // 28: dictybase.feature.FeaturePublication.publication:type_name -> dictybase.feature.FeaturePublication
	18, // 29: dictybase.feature.FeatureConnection.relationship:type_name -> dictybase.feature.FeatureRelationship
	20, // 30: dictybase.feature.FeatureDbxref.dbxref:type_name -> dictybase.feature.Dbxref
	22, // 31: dictybase.feature.NewFeatureLocation.location:type_name -> dictybase.feature.FeatureLocation
	5,  // 32: dictybase.feature.NewFeature.Data.attributes:type_name -> dictybase.feature.NewFeatureAttributes
	12, // 33: dictybase.feature.FeatureUpdate.Data.attributes:type_name -> dictybase.feature.FeatureUpdateAttributes
	0,  // 34: dictybase.feature.FeatureService.GetFeature:input_type -> dictybase.feature.FeatureId
	1,  // 35: dictybase.feature.FeatureService.GetParents:input_type -> dictybase.feature.FeatureRelationFilter
	1,  // 36: dictybase.feature.FeatureService.GetChildren:input_type -> dictybase.feature.FeatureRelationFilter
	2,  // 37: dictybase.feature.FeatureService.GetReferenceFeature:input_type -> dictybase.feature.ReferenceFeatureFilter
	0,  // 38: dictybase.feature.FeatureService.GetReferenceFeatures:input_type -> dictybase.feature.FeatureId
	3,  // 39: dictybase.feature.FeatureService.GetLocatedFeatures:input_type -> dictybase.feature.LocatedFeatureFilter
	24, // 40: dictybase.feature.FeatureService.ListFeatures:input_type -> dictybase.feature.ListParameters
	4,  // 41: dictybase.feature.FeatureService.CreateFeature:input_type -> dictybase.feature.NewFeature
	11, // 42: dictybase.feature.FeatureService.UpdateFeature:input_type -> dictybase.feature.FeatureUpdate
	17, // 43: dictybase.feature.FeatureService.AddParentalRelationship:input_type -> dictybase.feature.FeatureConnection
	17, // 44: dictybase.feature.FeatureService.AddChildRelationship:input_type -> dictybase.feature.FeatureConnection
	21, // 45: dictybase.feature.FeatureService.AttachLocation:input_type -> dictybase.feature.NewFeatureLocation
	13, // 46: dictybase.feature.FeatureService.AddSynonym:input_type -> dictybase.feature.FeatureSynonym
	16, // 47: dictybase.feature.FeatureService.AddPublication:input_type -> dictybase.feature.FeaturePublication
	14, // 48: dictybase.feature.FeatureService.SetPrevFeatureHistory:input_type -> dictybase.feature.FeatureHistory
	14, // 49: dictybase.feature.FeatureService.SetNextFeatureHistory:input_type -> dictybase.feature.FeatureHistory
	19, // 50: dictybase.feature.FeatureService.AddDbxref:input_type -> dictybase.feature.FeatureDbxref
	23, // 51: dictybase.feature.FeatureService.CreateOrganism:input_type -> dictybase.feature.Organism
	0,  // 52: dictybase.feature.FeatureService.DeleteFeature:input_type -> dictybase.feature.FeatureId
	17, // 53: dictybase.feature.FeatureService.DeleteParentalRelationship:input_type -> dictybase.feature.FeatureConnection
	17, // 54: dictybase.feature.FeatureService.DeleteChildRelationship:input_type -> dictybase.feature.FeatureConnection
	2,  // 55: dictybase.feature.FeatureService.DetachLocation:input_type -> dictybase.feature.ReferenceFeatureFilter
	13, // 56: dictybase.feature.FeatureService.DeleteSynonym:input_type -> dictybase.feature.FeatureSynonym
	16, // 57: dictybase.feature.FeatureService.DeletePublication:input_type -> dictybase.feature.FeaturePublication
	14, // 58: dictybase.feature.FeatureService.RemovePrevFeatureHistory:input_type -> dictybase.feature.FeatureHistory
	14, // 59: dictybase.feature.FeatureService.RemoveNextFeatureHistory:input_type -> dictybase.feature.FeatureHistory
	19, // 60: dictybase.feature.FeatureService.DeleteDbxref:input_type -> dictybase.feature.FeatureDbxref
	8,  // 61: dictybase.feature.FeatureService.GetFeature:output_type -> dictybase.feature.Feature
	7,  // 62: dictybase.feature.FeatureService.GetParents:output_type -> dictybase.feature.FeatureCollection
	7,  // 63: dictybase.feature.FeatureService.GetChildren:output_type -> dictybase.feature.FeatureCollection
	8,  // 64: dictybase.feature.FeatureService.GetReferenceFeature:output_type -> dictybase.feature.Feature
	7,  // 65: dictybase.feature.FeatureService.GetReferenceFeatures:output_type -> dictybase.feature.FeatureCollection
	6,  // 66: dictybase.feature.FeatureService.GetLocatedFeatures:output_type -> dictybase.feature.PaginatedFeatureCollection
	6,  // 67: dictybase.feature.FeatureService.ListFeatures:output_type -> dictybase.feature.PaginatedFeatureCollection
	8,  // 68: dictybase.feature.FeatureService.CreateFeature:output_type -> dictybase.feature.Feature
	8,  // 69: dictybase.feature.FeatureService.UpdateFeature:output_type -> dictybase.feature.Feature
	8,  // 70: dictybase.feature.FeatureService.AddParentalRelationship:output_type -> dictybase.feature.Feature
	8,  // 71: dictybase.feature.FeatureService.AddChildRelationship:output_type -> dictybase.feature.Feature
	8,  // 72: dictybase.feature.FeatureService.AttachLocation:output_type -> dictybase.feature.Feature
	8,  // 73: dictybase.feature.FeatureService.AddSynonym:output_type -> dictybase.feature.Feature
	8,  // 74: dictybase.feature.FeatureService.AddPublication:output_type -> dictybase.feature.Feature
	8,  // 75: dictybase.feature.FeatureService.SetPrevFeatureHistory:output_type -> dictybase.feature.Feature
	8,  // 76: dictybase.feature.FeatureService.SetNextFeatureHistory:output_type -> dictybase.feature.Feature
	8,  // 77: dictybase.feature.FeatureService.AddDbxref:output_type -> dictybase.feature.Feature
	23, // 78: dictybase.feature.FeatureService.CreateOrganism:output_type -> dictybase.feature.Organism
	30, // 79: dictybase.feature.FeatureService.DeleteFeature:output_type -> google.protobuf.Empty
	30, // 80: dictybase.feature.FeatureService.DeleteParentalRelationship:output_type -> google.protobuf.Empty
	30, // 81: dictybase.feature.FeatureService.DeleteChildRelationship:output_type -> google.protobuf.Empty
	30, // 82: dictybase.feature.FeatureService.DetachLocation:output_type -> google.protobuf.Empty
	30, // 83: dictybase.feature.FeatureService.DeleteSynonym:output_type -> google.protobuf.Empty
	30, // 84: dictybase.feature.FeatureService.DeletePublication:output_type -> google.protobuf.Empty
	30, // 85: dictybase.feature.FeatureService.RemovePrevFeatureHistory:output_type -> google.protobuf.Empty
	30, // 86: dictybase.feature.FeatureService.RemoveNextFeatureHistory:output_type -> google.protobuf.Empty
	30, // 87: dictybase.feature.FeatureService.DeleteDbxref:output_type -> google.protobuf.Empty
	61, // [61:88] is the sub-list for method output_type
	34, // [34:61] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_dictybase_feature_feature_proto_init() }
func file_dictybase_feature_feature_proto_init() {
	if File_dictybase_feature_feature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dictybase_feature_feature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureRelationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceFeatureFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocatedFeatureFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFeatureAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedFeatureCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureUpdateAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureSynonym); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturePublication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDbxref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dbxref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFeatureLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFeature_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_feature_feature_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dictybase_feature_feature_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dictybase_feature_feature_proto_goTypes,
		DependencyIndexes: file_dictybase_feature_feature_proto_depIdxs,
		MessageInfos:      file_dictybase_feature_feature_proto_msgTypes,
	}.Build()
	File_dictybase_feature_feature_proto = out.File
	file_dictybase_feature_feature_proto_rawDesc = nil
	file_dictybase_feature_feature_proto_goTypes = nil
	file_dictybase_feature_feature_proto_depIdxs = nil
}
