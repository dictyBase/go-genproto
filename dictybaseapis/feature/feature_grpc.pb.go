// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureServiceClient is the client API for FeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureServiceClient interface {
	// Retrieves the specified feature
	GetFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*Feature, error)
	// Retrieves all the biological parents features
	GetParents(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error)
	// Retrieves all biological children features
	GetChildren(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error)
	// Retrieves the feature(called reference or source feature) under whose
	// coordinate system the current feature is located. By default rank 0 is
	// assumed
	GetReferenceFeature(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*Feature, error)
	// Retrieves all reference features
	GetReferenceFeatures(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*FeatureCollection, error)
	// Retrieves all features that are located within the bounds of
	// referernce feature
	GetLocatedFeatures(ctx context.Context, in *LocatedFeatureFilter, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error)
	// Retrieves all features
	ListFeatures(ctx context.Context, in *ListParameters, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error)
	// Create a new feature
	CreateFeature(ctx context.Context, in *NewFeature, opts ...grpc.CallOption) (*Feature, error)
	// Update an existing feature
	UpdateFeature(ctx context.Context, in *FeatureUpdate, opts ...grpc.CallOption) (*Feature, error)
	// Add a new parental relation with an existing feature. In case of an
	// existing parent(s), it will be appended to the list.
	AddParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error)
	// Add a new child relation with an existing feature. In case of an
	// existing child, it will be appended to the list.
	AddChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error)
	// Attach a new location entry to connect to a referernce
	// feature. In case of any existing location(s), it will be
	// appended to the list. The reference feature referred in
	// the location needs to exist.
	AttachLocation(ctx context.Context, in *NewFeatureLocation, opts ...grpc.CallOption) (*Feature, error)
	// Add a new synonym.In case of existing synonym(s),
	// it will be appended to the list
	AddSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*Feature, error)
	// Add a new publication.In case of existing publication(s),
	// it will append it to the list
	AddPublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*Feature, error)
	// Sets the previous feature in the feature history.
	SetPrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error)
	// Sets the next feature in the feature history.
	SetNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error)
	// Add a new dbxref. In case of existing dbxref it will
	// append it to the list.
	AddDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*Feature, error)
	// Create a new organism entry
	CreateOrganism(ctx context.Context, in *Organism, opts ...grpc.CallOption) (*Organism, error)
	// Delete an existing feature
	DeleteFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a parental relationship with a feature
	DeleteParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a child relationship with a feature
	DeleteChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Detach an existing location from reference feature
	DetachLocation(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a synonym from the feature.
	DeleteSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a publication from the feature.
	DeletePublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove the previous feature from the feature history.
	RemovePrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove the next feature from the feature history.
	RemoveNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete dbxref from a feature.
	DeleteDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type featureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServiceClient(cc grpc.ClientConnInterface) FeatureServiceClient {
	return &featureServiceClient{cc}
}

func (c *featureServiceClient) GetFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetParents(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error) {
	out := new(FeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetParents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetChildren(ctx context.Context, in *FeatureRelationFilter, opts ...grpc.CallOption) (*FeatureCollection, error) {
	out := new(FeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetReferenceFeature(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetReferenceFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetReferenceFeatures(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*FeatureCollection, error) {
	out := new(FeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetReferenceFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) GetLocatedFeatures(ctx context.Context, in *LocatedFeatureFilter, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error) {
	out := new(PaginatedFeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/GetLocatedFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) ListFeatures(ctx context.Context, in *ListParameters, opts ...grpc.CallOption) (*PaginatedFeatureCollection, error) {
	out := new(PaginatedFeatureCollection)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/ListFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) CreateFeature(ctx context.Context, in *NewFeature, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/CreateFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) UpdateFeature(ctx context.Context, in *FeatureUpdate, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/UpdateFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddParentalRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddChildRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AttachLocation(ctx context.Context, in *NewFeatureLocation, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AttachLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddPublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) SetPrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/SetPrevFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) SetNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/SetNextFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) AddDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/AddDbxref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) CreateOrganism(ctx context.Context, in *Organism, opts ...grpc.CallOption) (*Organism, error) {
	out := new(Organism)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/CreateOrganism", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteFeature(ctx context.Context, in *FeatureId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteParentalRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteParentalRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteChildRelationship(ctx context.Context, in *FeatureConnection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteChildRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DetachLocation(ctx context.Context, in *ReferenceFeatureFilter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DetachLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteSynonym(ctx context.Context, in *FeatureSynonym, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeletePublication(ctx context.Context, in *FeaturePublication, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeletePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) RemovePrevFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/RemovePrevFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) RemoveNextFeatureHistory(ctx context.Context, in *FeatureHistory, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/RemoveNextFeatureHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) DeleteDbxref(ctx context.Context, in *FeatureDbxref, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.feature.FeatureService/DeleteDbxref", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServiceServer is the server API for FeatureService service.
// All implementations must embed UnimplementedFeatureServiceServer
// for forward compatibility
type FeatureServiceServer interface {
	// Retrieves the specified feature
	GetFeature(context.Context, *FeatureId) (*Feature, error)
	// Retrieves all the biological parents features
	GetParents(context.Context, *FeatureRelationFilter) (*FeatureCollection, error)
	// Retrieves all biological children features
	GetChildren(context.Context, *FeatureRelationFilter) (*FeatureCollection, error)
	// Retrieves the feature(called reference or source feature) under whose
	// coordinate system the current feature is located. By default rank 0 is
	// assumed
	GetReferenceFeature(context.Context, *ReferenceFeatureFilter) (*Feature, error)
	// Retrieves all reference features
	GetReferenceFeatures(context.Context, *FeatureId) (*FeatureCollection, error)
	// Retrieves all features that are located within the bounds of
	// referernce feature
	GetLocatedFeatures(context.Context, *LocatedFeatureFilter) (*PaginatedFeatureCollection, error)
	// Retrieves all features
	ListFeatures(context.Context, *ListParameters) (*PaginatedFeatureCollection, error)
	// Create a new feature
	CreateFeature(context.Context, *NewFeature) (*Feature, error)
	// Update an existing feature
	UpdateFeature(context.Context, *FeatureUpdate) (*Feature, error)
	// Add a new parental relation with an existing feature. In case of an
	// existing parent(s), it will be appended to the list.
	AddParentalRelationship(context.Context, *FeatureConnection) (*Feature, error)
	// Add a new child relation with an existing feature. In case of an
	// existing child, it will be appended to the list.
	AddChildRelationship(context.Context, *FeatureConnection) (*Feature, error)
	// Attach a new location entry to connect to a referernce
	// feature. In case of any existing location(s), it will be
	// appended to the list. The reference feature referred in
	// the location needs to exist.
	AttachLocation(context.Context, *NewFeatureLocation) (*Feature, error)
	// Add a new synonym.In case of existing synonym(s),
	// it will be appended to the list
	AddSynonym(context.Context, *FeatureSynonym) (*Feature, error)
	// Add a new publication.In case of existing publication(s),
	// it will append it to the list
	AddPublication(context.Context, *FeaturePublication) (*Feature, error)
	// Sets the previous feature in the feature history.
	SetPrevFeatureHistory(context.Context, *FeatureHistory) (*Feature, error)
	// Sets the next feature in the feature history.
	SetNextFeatureHistory(context.Context, *FeatureHistory) (*Feature, error)
	// Add a new dbxref. In case of existing dbxref it will
	// append it to the list.
	AddDbxref(context.Context, *FeatureDbxref) (*Feature, error)
	// Create a new organism entry
	CreateOrganism(context.Context, *Organism) (*Organism, error)
	// Delete an existing feature
	DeleteFeature(context.Context, *FeatureId) (*emptypb.Empty, error)
	// Delete a parental relationship with a feature
	DeleteParentalRelationship(context.Context, *FeatureConnection) (*emptypb.Empty, error)
	// Delete a child relationship with a feature
	DeleteChildRelationship(context.Context, *FeatureConnection) (*emptypb.Empty, error)
	// Detach an existing location from reference feature
	DetachLocation(context.Context, *ReferenceFeatureFilter) (*emptypb.Empty, error)
	// Delete a synonym from the feature.
	DeleteSynonym(context.Context, *FeatureSynonym) (*emptypb.Empty, error)
	// Delete a publication from the feature.
	DeletePublication(context.Context, *FeaturePublication) (*emptypb.Empty, error)
	// Remove the previous feature from the feature history.
	RemovePrevFeatureHistory(context.Context, *FeatureHistory) (*emptypb.Empty, error)
	// Remove the next feature from the feature history.
	RemoveNextFeatureHistory(context.Context, *FeatureHistory) (*emptypb.Empty, error)
	// Delete dbxref from a feature.
	DeleteDbxref(context.Context, *FeatureDbxref) (*emptypb.Empty, error)
	mustEmbedUnimplementedFeatureServiceServer()
}

// UnimplementedFeatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureServiceServer struct {
}

func (UnimplementedFeatureServiceServer) GetFeature(context.Context, *FeatureId) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedFeatureServiceServer) GetParents(context.Context, *FeatureRelationFilter) (*FeatureCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParents not implemented")
}
func (UnimplementedFeatureServiceServer) GetChildren(context.Context, *FeatureRelationFilter) (*FeatureCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedFeatureServiceServer) GetReferenceFeature(context.Context, *ReferenceFeatureFilter) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferenceFeature not implemented")
}
func (UnimplementedFeatureServiceServer) GetReferenceFeatures(context.Context, *FeatureId) (*FeatureCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferenceFeatures not implemented")
}
func (UnimplementedFeatureServiceServer) GetLocatedFeatures(context.Context, *LocatedFeatureFilter) (*PaginatedFeatureCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocatedFeatures not implemented")
}
func (UnimplementedFeatureServiceServer) ListFeatures(context.Context, *ListParameters) (*PaginatedFeatureCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedFeatureServiceServer) CreateFeature(context.Context, *NewFeature) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeature not implemented")
}
func (UnimplementedFeatureServiceServer) UpdateFeature(context.Context, *FeatureUpdate) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeature not implemented")
}
func (UnimplementedFeatureServiceServer) AddParentalRelationship(context.Context, *FeatureConnection) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParentalRelationship not implemented")
}
func (UnimplementedFeatureServiceServer) AddChildRelationship(context.Context, *FeatureConnection) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChildRelationship not implemented")
}
func (UnimplementedFeatureServiceServer) AttachLocation(context.Context, *NewFeatureLocation) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachLocation not implemented")
}
func (UnimplementedFeatureServiceServer) AddSynonym(context.Context, *FeatureSynonym) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSynonym not implemented")
}
func (UnimplementedFeatureServiceServer) AddPublication(context.Context, *FeaturePublication) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublication not implemented")
}
func (UnimplementedFeatureServiceServer) SetPrevFeatureHistory(context.Context, *FeatureHistory) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrevFeatureHistory not implemented")
}
func (UnimplementedFeatureServiceServer) SetNextFeatureHistory(context.Context, *FeatureHistory) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextFeatureHistory not implemented")
}
func (UnimplementedFeatureServiceServer) AddDbxref(context.Context, *FeatureDbxref) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDbxref not implemented")
}
func (UnimplementedFeatureServiceServer) CreateOrganism(context.Context, *Organism) (*Organism, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganism not implemented")
}
func (UnimplementedFeatureServiceServer) DeleteFeature(context.Context, *FeatureId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeature not implemented")
}
func (UnimplementedFeatureServiceServer) DeleteParentalRelationship(context.Context, *FeatureConnection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParentalRelationship not implemented")
}
func (UnimplementedFeatureServiceServer) DeleteChildRelationship(context.Context, *FeatureConnection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChildRelationship not implemented")
}
func (UnimplementedFeatureServiceServer) DetachLocation(context.Context, *ReferenceFeatureFilter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachLocation not implemented")
}
func (UnimplementedFeatureServiceServer) DeleteSynonym(context.Context, *FeatureSynonym) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSynonym not implemented")
}
func (UnimplementedFeatureServiceServer) DeletePublication(context.Context, *FeaturePublication) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublication not implemented")
}
func (UnimplementedFeatureServiceServer) RemovePrevFeatureHistory(context.Context, *FeatureHistory) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrevFeatureHistory not implemented")
}
func (UnimplementedFeatureServiceServer) RemoveNextFeatureHistory(context.Context, *FeatureHistory) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextFeatureHistory not implemented")
}
func (UnimplementedFeatureServiceServer) DeleteDbxref(context.Context, *FeatureDbxref) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDbxref not implemented")
}
func (UnimplementedFeatureServiceServer) mustEmbedUnimplementedFeatureServiceServer() {}

// UnsafeFeatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServiceServer will
// result in compilation errors.
type UnsafeFeatureServiceServer interface {
	mustEmbedUnimplementedFeatureServiceServer()
}

func RegisterFeatureServiceServer(s grpc.ServiceRegistrar, srv FeatureServiceServer) {
	s.RegisterService(&FeatureService_ServiceDesc, srv)
}

func _FeatureService_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetFeature(ctx, req.(*FeatureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRelationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetParents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetParents(ctx, req.(*FeatureRelationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRelationFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetChildren(ctx, req.(*FeatureRelationFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetReferenceFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFeatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetReferenceFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetReferenceFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetReferenceFeature(ctx, req.(*ReferenceFeatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetReferenceFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetReferenceFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetReferenceFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetReferenceFeatures(ctx, req.(*FeatureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_GetLocatedFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocatedFeatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).GetLocatedFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/GetLocatedFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).GetLocatedFeatures(ctx, req.(*LocatedFeatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/ListFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).ListFeatures(ctx, req.(*ListParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_CreateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFeature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).CreateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/CreateFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).CreateFeature(ctx, req.(*NewFeature))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_UpdateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).UpdateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/UpdateFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).UpdateFeature(ctx, req.(*FeatureUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddParentalRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddParentalRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddParentalRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddParentalRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddChildRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddChildRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddChildRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddChildRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AttachLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFeatureLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AttachLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AttachLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AttachLocation(ctx, req.(*NewFeatureLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureSynonym)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddSynonym(ctx, req.(*FeatureSynonym))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturePublication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddPublication(ctx, req.(*FeaturePublication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_SetPrevFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).SetPrevFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/SetPrevFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).SetPrevFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_SetNextFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).SetNextFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/SetNextFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).SetNextFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_AddDbxref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureDbxref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).AddDbxref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/AddDbxref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).AddDbxref(ctx, req.(*FeatureDbxref))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_CreateOrganism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organism)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).CreateOrganism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/CreateOrganism",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).CreateOrganism(ctx, req.(*Organism))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteFeature(ctx, req.(*FeatureId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteParentalRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteParentalRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteParentalRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteParentalRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteChildRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteChildRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteChildRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteChildRelationship(ctx, req.(*FeatureConnection))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DetachLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFeatureFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DetachLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DetachLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DetachLocation(ctx, req.(*ReferenceFeatureFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureSynonym)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteSynonym(ctx, req.(*FeatureSynonym))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeletePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturePublication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeletePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeletePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeletePublication(ctx, req.(*FeaturePublication))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_RemovePrevFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).RemovePrevFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/RemovePrevFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).RemovePrevFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_RemoveNextFeatureHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).RemoveNextFeatureHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/RemoveNextFeatureHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).RemoveNextFeatureHistory(ctx, req.(*FeatureHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_DeleteDbxref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureDbxref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).DeleteDbxref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.feature.FeatureService/DeleteDbxref",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).DeleteDbxref(ctx, req.(*FeatureDbxref))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureService_ServiceDesc is the grpc.ServiceDesc for FeatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.feature.FeatureService",
	HandlerType: (*FeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _FeatureService_GetFeature_Handler,
		},
		{
			MethodName: "GetParents",
			Handler:    _FeatureService_GetParents_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _FeatureService_GetChildren_Handler,
		},
		{
			MethodName: "GetReferenceFeature",
			Handler:    _FeatureService_GetReferenceFeature_Handler,
		},
		{
			MethodName: "GetReferenceFeatures",
			Handler:    _FeatureService_GetReferenceFeatures_Handler,
		},
		{
			MethodName: "GetLocatedFeatures",
			Handler:    _FeatureService_GetLocatedFeatures_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _FeatureService_ListFeatures_Handler,
		},
		{
			MethodName: "CreateFeature",
			Handler:    _FeatureService_CreateFeature_Handler,
		},
		{
			MethodName: "UpdateFeature",
			Handler:    _FeatureService_UpdateFeature_Handler,
		},
		{
			MethodName: "AddParentalRelationship",
			Handler:    _FeatureService_AddParentalRelationship_Handler,
		},
		{
			MethodName: "AddChildRelationship",
			Handler:    _FeatureService_AddChildRelationship_Handler,
		},
		{
			MethodName: "AttachLocation",
			Handler:    _FeatureService_AttachLocation_Handler,
		},
		{
			MethodName: "AddSynonym",
			Handler:    _FeatureService_AddSynonym_Handler,
		},
		{
			MethodName: "AddPublication",
			Handler:    _FeatureService_AddPublication_Handler,
		},
		{
			MethodName: "SetPrevFeatureHistory",
			Handler:    _FeatureService_SetPrevFeatureHistory_Handler,
		},
		{
			MethodName: "SetNextFeatureHistory",
			Handler:    _FeatureService_SetNextFeatureHistory_Handler,
		},
		{
			MethodName: "AddDbxref",
			Handler:    _FeatureService_AddDbxref_Handler,
		},
		{
			MethodName: "CreateOrganism",
			Handler:    _FeatureService_CreateOrganism_Handler,
		},
		{
			MethodName: "DeleteFeature",
			Handler:    _FeatureService_DeleteFeature_Handler,
		},
		{
			MethodName: "DeleteParentalRelationship",
			Handler:    _FeatureService_DeleteParentalRelationship_Handler,
		},
		{
			MethodName: "DeleteChildRelationship",
			Handler:    _FeatureService_DeleteChildRelationship_Handler,
		},
		{
			MethodName: "DetachLocation",
			Handler:    _FeatureService_DetachLocation_Handler,
		},
		{
			MethodName: "DeleteSynonym",
			Handler:    _FeatureService_DeleteSynonym_Handler,
		},
		{
			MethodName: "DeletePublication",
			Handler:    _FeatureService_DeletePublication_Handler,
		},
		{
			MethodName: "RemovePrevFeatureHistory",
			Handler:    _FeatureService_RemovePrevFeatureHistory_Handler,
		},
		{
			MethodName: "RemoveNextFeatureHistory",
			Handler:    _FeatureService_RemoveNextFeatureHistory_Handler,
		},
		{
			MethodName: "DeleteDbxref",
			Handler:    _FeatureService_DeleteDbxref_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictybase/feature/feature.proto",
}
