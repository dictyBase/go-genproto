// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: dictybase/publication/publication.proto

package publication

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the publication
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublicationId) Reset() {
	*x = PublicationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationId) ProtoMessage() {}

func (x *PublicationId) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationId.ProtoReflect.Descriptor instead.
func (*PublicationId) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{0}
}

func (x *PublicationId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Definition of an individual publication
type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Publication_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{1}
}

func (x *Publication) GetData() *Publication_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition of various publication attributes
type PublicationAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Digital object identifier for publication
	Doi string `protobuf:"bytes,1,opt,name=doi,proto3" json:"doi,omitempty"`
	// Title of publication
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Abstract of publication
	Abstract string `protobuf:"bytes,3,opt,name=abstract,proto3" json:"abstract,omitempty"`
	// Journal where the publication was published
	Journal string `protobuf:"bytes,4,opt,name=journal,proto3" json:"journal,omitempty"`
	// Date publication was published
	PubDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=pub_date,json=pubDate,proto3" json:"pub_date,omitempty"`
	// Volume of the publication
	Volume string `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	// Pages containing the publication
	Pages string `protobuf:"bytes,7,opt,name=pages,proto3" json:"pages,omitempty"`
	// International Standard Serial Number of publication
	Issn string `protobuf:"bytes,8,opt,name=issn,proto3" json:"issn,omitempty"`
	// Type of publication (i.e. "journal_article")
	PubType string `protobuf:"bytes,9,opt,name=pub_type,json=pubType,proto3" json:"pub_type,omitempty"`
	// Source of the publication (i.e. "pubmed")
	Source string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	// Issue of the publication
	Issue string `protobuf:"bytes,11,opt,name=issue,proto3" json:"issue,omitempty"`
	// Status of the publication
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// List of authors of the publication
	Authors []*Author `protobuf:"bytes,13,rep,name=authors,proto3" json:"authors,omitempty"`
}

func (x *PublicationAttributes) Reset() {
	*x = PublicationAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationAttributes) ProtoMessage() {}

func (x *PublicationAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationAttributes.ProtoReflect.Descriptor instead.
func (*PublicationAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{2}
}

func (x *PublicationAttributes) GetDoi() string {
	if x != nil {
		return x.Doi
	}
	return ""
}

func (x *PublicationAttributes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PublicationAttributes) GetAbstract() string {
	if x != nil {
		return x.Abstract
	}
	return ""
}

func (x *PublicationAttributes) GetJournal() string {
	if x != nil {
		return x.Journal
	}
	return ""
}

func (x *PublicationAttributes) GetPubDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PubDate
	}
	return nil
}

func (x *PublicationAttributes) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *PublicationAttributes) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *PublicationAttributes) GetIssn() string {
	if x != nil {
		return x.Issn
	}
	return ""
}

func (x *PublicationAttributes) GetPubType() string {
	if x != nil {
		return x.PubType
	}
	return ""
}

func (x *PublicationAttributes) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PublicationAttributes) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *PublicationAttributes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PublicationAttributes) GetAuthors() []*Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

// Definition for creating a new publication
type NewPublication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *NewPublication_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NewPublication) Reset() {
	*x = NewPublication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPublication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPublication) ProtoMessage() {}

func (x *NewPublication) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPublication.ProtoReflect.Descriptor instead.
func (*NewPublication) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{3}
}

func (x *NewPublication) GetData() *NewPublication_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Definition for updating an existing publication
type PublicationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublicationUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublicationUpdate) Reset() {
	*x = PublicationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationUpdate) ProtoMessage() {}

func (x *PublicationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationUpdate.ProtoReflect.Descriptor instead.
func (*PublicationUpdate) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{4}
}

func (x *PublicationUpdate) GetData() *PublicationUpdate_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Defines attributes for updating an existing publication
type PublicationUpdateAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date of publication
	PubDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=pub_date,json=pubDate,proto3" json:"pub_date,omitempty"`
	// Volume of the publication
	Volume string `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	// Pages containing the publication
	Pages string `protobuf:"bytes,3,opt,name=pages,proto3" json:"pages,omitempty"`
	// Type of publication (i.e. "journal_article")
	PubType string `protobuf:"bytes,4,opt,name=pub_type,json=pubType,proto3" json:"pub_type,omitempty"`
	// Source of the publication (i.e. "pubmed")
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// Status of the publication
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// List of authors of the publication
	Authors []*Author `protobuf:"bytes,7,rep,name=authors,proto3" json:"authors,omitempty"`
}

func (x *PublicationUpdateAttributes) Reset() {
	*x = PublicationUpdateAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationUpdateAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationUpdateAttributes) ProtoMessage() {}

func (x *PublicationUpdateAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationUpdateAttributes.ProtoReflect.Descriptor instead.
func (*PublicationUpdateAttributes) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{5}
}

func (x *PublicationUpdateAttributes) GetPubDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PubDate
	}
	return nil
}

func (x *PublicationUpdateAttributes) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *PublicationUpdateAttributes) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *PublicationUpdateAttributes) GetPubType() string {
	if x != nil {
		return x.PubType
	}
	return ""
}

func (x *PublicationUpdateAttributes) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PublicationUpdateAttributes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PublicationUpdateAttributes) GetAuthors() []*Author {
	if x != nil {
		return x.Authors
	}
	return nil
}

// List of publications
type PublicationCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PublicationCollection_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta                         `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *PublicationCollection) Reset() {
	*x = PublicationCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationCollection) ProtoMessage() {}

func (x *PublicationCollection) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationCollection.ProtoReflect.Descriptor instead.
func (*PublicationCollection) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{6}
}

func (x *PublicationCollection) GetData() []*PublicationCollection_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublicationCollection) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Defines fields for manipulating output of Publication collection
type ListPublicationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the list
	Cursor int64 `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The `filter` field restricts the data return by the collection. To use
	// it, supply one or multiple allowed fields to filter followed
	// by a filter expression. It uses the following syntax...
	//        field_name operator expression
	//
	// The following fields of `PublicationAttributes` definition are allowed to
	// be used for filtering
	//   * journal            - Journal where the publication was published (string)
	//   * year               - Year publication was published (string)
	//   * pub_date           - Date of publication (string)
	//   * pub_type           - Type of publication (string)
	//   * source             - Source of the publication (string)
	//   * issue              - Issue of the publication (string)
	//   * status             - Status of the publication (string)
	//   * author             - Authors of the publication (string)
	//
	// field_name - Any one of the allowed field_name of the `PublicationAttributes` definition.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded for http request.
	//
	//        Operators for strings
	//              =~   Contains substring
	//              !~   Not contains substring
	//              ===  Equals
	//              !==  Not equals
	//
	//        Operators for number
	//              ==  Equals
	//              >   Greater than
	//              <   Less than
	//              =<  Less than equal to
	//              >=  Greater than equal to
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded for http request.
	//
	//           filter: "pub_type===journal_article"
	//           filter: "source===pubmed"
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	//
	//           filter: "year==2008;journal===Genesis"
	//
	// Can also accept multiple authors.
	//           filter: "author===Vandelay;author===VanNostrand"
	//
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListPublicationParameters) Reset() {
	*x = ListPublicationParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicationParameters) ProtoMessage() {}

func (x *ListPublicationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicationParameters.ProtoReflect.Descriptor instead.
func (*ListPublicationParameters) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{7}
}

func (x *ListPublicationParameters) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *ListPublicationParameters) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPublicationParameters) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Definition of an individual author
type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last name of the author
	LastName string `protobuf:"bytes,1,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// First name of the author
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Any initials of the author
	Initials string `protobuf:"bytes,3,opt,name=initials,proto3" json:"initials,omitempty"`
	// Ranking of the author
	Rank int64 `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{8}
}

func (x *Author) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Author) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Author) GetInitials() string {
	if x != nil {
		return x.Initials
	}
	return ""
}

func (x *Author) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// Metadata definition for traversing the collection
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique pointer to the next set of result in the collection. Set the
	// cursor value parameter to the value of next_cursor to retrieve the next
	// set of collection using the same method
	NextCursor int64 `protobuf:"varint,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Maximum number of records that can be fetch per request
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Total number of records in the collection.
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{9}
}

func (x *Meta) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *Meta) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Meta) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Publication_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name, by default should be publication
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the publication
	Id         string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *PublicationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Publication_Data) Reset() {
	*x = Publication_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication_Data) ProtoMessage() {}

func (x *Publication_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication_Data.ProtoReflect.Descriptor instead.
func (*Publication_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Publication_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Publication_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Publication_Data) GetAttributes() *PublicationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type NewPublication_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name, by default should be publication
	Type       string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes *PublicationAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NewPublication_Data) Reset() {
	*x = NewPublication_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPublication_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPublication_Data) ProtoMessage() {}

func (x *NewPublication_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPublication_Data.ProtoReflect.Descriptor instead.
func (*NewPublication_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{3, 0}
}

func (x *NewPublication_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewPublication_Data) GetAttributes() *PublicationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type PublicationUpdate_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name, by default should be publication
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the publication
	Id         string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *PublicationUpdateAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PublicationUpdate_Data) Reset() {
	*x = PublicationUpdate_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationUpdate_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationUpdate_Data) ProtoMessage() {}

func (x *PublicationUpdate_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationUpdate_Data.ProtoReflect.Descriptor instead.
func (*PublicationUpdate_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PublicationUpdate_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublicationUpdate_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicationUpdate_Data) GetAttributes() *PublicationUpdateAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type PublicationCollection_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name, by default should be publication
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier for the publication
	Id         string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes *PublicationAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PublicationCollection_Data) Reset() {
	*x = PublicationCollection_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dictybase_publication_publication_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationCollection_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationCollection_Data) ProtoMessage() {}

func (x *PublicationCollection_Data) ProtoReflect() protoreflect.Message {
	mi := &file_dictybase_publication_publication_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationCollection_Data.ProtoReflect.Descriptor instead.
func (*PublicationCollection_Data) Descriptor() ([]byte, []int) {
	return file_dictybase_publication_publication_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PublicationCollection_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublicationCollection_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicationCollection_Data) GetAttributes() *PublicationAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_dictybase_publication_publication_proto protoreflect.FileDescriptor

var file_dictybase_publication_publication_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b,
	0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xcc, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x78, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x88,
	0x03, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x75, 0x62, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x73, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x4e, 0x65,
	0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x68, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x86, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x1b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x75, 0x62, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x73, 0x22, 0x99, 0x02, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x74,
	0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x60, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x1a, 0x78, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x61, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x74, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x53, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x84, 0x04, 0x0a, 0x12,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x22, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x22, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x2c, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x42, 0x85, 0x01, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x79,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x79, 0x62, 0x61, 0x73, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf8, 0x01, 0x01, 0xa2,
	0x02, 0x08, 0x44, 0x49, 0x43, 0x54, 0x59, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dictybase_publication_publication_proto_rawDescOnce sync.Once
	file_dictybase_publication_publication_proto_rawDescData = file_dictybase_publication_publication_proto_rawDesc
)

func file_dictybase_publication_publication_proto_rawDescGZIP() []byte {
	file_dictybase_publication_publication_proto_rawDescOnce.Do(func() {
		file_dictybase_publication_publication_proto_rawDescData = protoimpl.X.CompressGZIP(file_dictybase_publication_publication_proto_rawDescData)
	})
	return file_dictybase_publication_publication_proto_rawDescData
}

var file_dictybase_publication_publication_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_dictybase_publication_publication_proto_goTypes = []interface{}{
	(*PublicationId)(nil),               // 0: dictybase.publication.PublicationId
	(*Publication)(nil),                 // 1: dictybase.publication.Publication
	(*PublicationAttributes)(nil),       // 2: dictybase.publication.PublicationAttributes
	(*NewPublication)(nil),              // 3: dictybase.publication.NewPublication
	(*PublicationUpdate)(nil),           // 4: dictybase.publication.PublicationUpdate
	(*PublicationUpdateAttributes)(nil), // 5: dictybase.publication.PublicationUpdateAttributes
	(*PublicationCollection)(nil),       // 6: dictybase.publication.PublicationCollection
	(*ListPublicationParameters)(nil),   // 7: dictybase.publication.ListPublicationParameters
	(*Author)(nil),                      // 8: dictybase.publication.Author
	(*Meta)(nil),                        // 9: dictybase.publication.Meta
	(*Publication_Data)(nil),            // 10: dictybase.publication.Publication.Data
	(*NewPublication_Data)(nil),         // 11: dictybase.publication.NewPublication.Data
	(*PublicationUpdate_Data)(nil),      // 12: dictybase.publication.PublicationUpdate.Data
	(*PublicationCollection_Data)(nil),  // 13: dictybase.publication.PublicationCollection.Data
	(*timestamppb.Timestamp)(nil),       // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 15: google.protobuf.Empty
}
var file_dictybase_publication_publication_proto_depIdxs = []int32{
	10, // 0: dictybase.publication.Publication.data:type_name -> dictybase.publication.Publication.Data
	14, // 1: dictybase.publication.PublicationAttributes.pub_date:type_name -> google.protobuf.Timestamp
	8,  // 2: dictybase.publication.PublicationAttributes.authors:type_name -> dictybase.publication.Author
	11, // 3: dictybase.publication.NewPublication.data:type_name -> dictybase.publication.NewPublication.Data
	12, // 4: dictybase.publication.PublicationUpdate.data:type_name -> dictybase.publication.PublicationUpdate.Data
	14, // 5: dictybase.publication.PublicationUpdateAttributes.pub_date:type_name -> google.protobuf.Timestamp
	8,  // 6: dictybase.publication.PublicationUpdateAttributes.authors:type_name -> dictybase.publication.Author
	13, // 7: dictybase.publication.PublicationCollection.data:type_name -> dictybase.publication.PublicationCollection.Data
	9,  // 8: dictybase.publication.PublicationCollection.meta:type_name -> dictybase.publication.Meta
	2,  // 9: dictybase.publication.Publication.Data.attributes:type_name -> dictybase.publication.PublicationAttributes
	2,  // 10: dictybase.publication.NewPublication.Data.attributes:type_name -> dictybase.publication.PublicationAttributes
	5,  // 11: dictybase.publication.PublicationUpdate.Data.attributes:type_name -> dictybase.publication.PublicationUpdateAttributes
	2,  // 12: dictybase.publication.PublicationCollection.Data.attributes:type_name -> dictybase.publication.PublicationAttributes
	0,  // 13: dictybase.publication.PublicationService.GetPublication:input_type -> dictybase.publication.PublicationId
	3,  // 14: dictybase.publication.PublicationService.CreatePublication:input_type -> dictybase.publication.NewPublication
	4,  // 15: dictybase.publication.PublicationService.UpdatePublication:input_type -> dictybase.publication.PublicationUpdate
	0,  // 16: dictybase.publication.PublicationService.DeletePublication:input_type -> dictybase.publication.PublicationId
	7,  // 17: dictybase.publication.PublicationService.ListPublications:input_type -> dictybase.publication.ListPublicationParameters
	1,  // 18: dictybase.publication.PublicationService.GetPublication:output_type -> dictybase.publication.Publication
	1,  // 19: dictybase.publication.PublicationService.CreatePublication:output_type -> dictybase.publication.Publication
	1,  // 20: dictybase.publication.PublicationService.UpdatePublication:output_type -> dictybase.publication.Publication
	15, // 21: dictybase.publication.PublicationService.DeletePublication:output_type -> google.protobuf.Empty
	6,  // 22: dictybase.publication.PublicationService.ListPublications:output_type -> dictybase.publication.PublicationCollection
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_dictybase_publication_publication_proto_init() }
func file_dictybase_publication_publication_proto_init() {
	if File_dictybase_publication_publication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dictybase_publication_publication_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPublication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationUpdateAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicationParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPublication_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationUpdate_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dictybase_publication_publication_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationCollection_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dictybase_publication_publication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dictybase_publication_publication_proto_goTypes,
		DependencyIndexes: file_dictybase_publication_publication_proto_depIdxs,
		MessageInfos:      file_dictybase_publication_publication_proto_msgTypes,
	}.Build()
	File_dictybase_publication_publication_proto = out.File
	file_dictybase_publication_publication_proto_rawDesc = nil
	file_dictybase_publication_publication_proto_goTypes = nil
	file_dictybase_publication_publication_proto_depIdxs = nil
}
