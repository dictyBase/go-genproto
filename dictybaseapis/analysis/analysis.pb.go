// Code generated by protoc-gen-go. DO NOT EDIT.
// source: analysis.proto

package analysis

import (
	_ "."
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Various parameters required for creating a blast database
type BlastDbRequest struct {
	// sequence needed for database, provided in chunks
	SeqChunk []byte `protobuf:"bytes,1,opt,name=seq_chunk,json=seqChunk,proto3" json:"seq_chunk,omitempty"`
	// ncbi taxonid of the organism
	TaxonId string `protobuf:"bytes,2,opt,name=taxon_id,json=taxonId,proto3" json:"taxon_id,omitempty"`
	// name of the database
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// human readable description of the database
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Type of sequence, nucleotide or protein
	Seqtype              string   `protobuf:"bytes,5,opt,name=seqtype,proto3" json:"seqtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlastDbRequest) Reset()         { *m = BlastDbRequest{} }
func (m *BlastDbRequest) String() string { return proto.CompactTextString(m) }
func (*BlastDbRequest) ProtoMessage()    {}
func (*BlastDbRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f40f047c7fd56f, []int{0}
}

func (m *BlastDbRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlastDbRequest.Unmarshal(m, b)
}
func (m *BlastDbRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlastDbRequest.Marshal(b, m, deterministic)
}
func (m *BlastDbRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlastDbRequest.Merge(m, src)
}
func (m *BlastDbRequest) XXX_Size() int {
	return xxx_messageInfo_BlastDbRequest.Size(m)
}
func (m *BlastDbRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlastDbRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlastDbRequest proto.InternalMessageInfo

func (m *BlastDbRequest) GetSeqChunk() []byte {
	if m != nil {
		return m.SeqChunk
	}
	return nil
}

func (m *BlastDbRequest) GetTaxonId() string {
	if m != nil {
		return m.TaxonId
	}
	return ""
}

func (m *BlastDbRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlastDbRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BlastDbRequest) GetSeqtype() string {
	if m != nil {
		return m.Seqtype
	}
	return ""
}

// Similar to the BlastDbParams except the sequence chunks
type BlastDbParams struct {
	// name of the sequence file
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// ncbi taxonid of the organism
	TaxonId string `protobuf:"bytes,2,opt,name=taxon_id,json=taxonId,proto3" json:"taxon_id,omitempty"`
	// name of the database
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// human readable description of the database
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Type of sequence, nucleotide or protein
	Seqtype              string   `protobuf:"bytes,6,opt,name=seqtype,proto3" json:"seqtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlastDbParams) Reset()         { *m = BlastDbParams{} }
func (m *BlastDbParams) String() string { return proto.CompactTextString(m) }
func (*BlastDbParams) ProtoMessage()    {}
func (*BlastDbParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f40f047c7fd56f, []int{1}
}

func (m *BlastDbParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlastDbParams.Unmarshal(m, b)
}
func (m *BlastDbParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlastDbParams.Marshal(b, m, deterministic)
}
func (m *BlastDbParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlastDbParams.Merge(m, src)
}
func (m *BlastDbParams) XXX_Size() int {
	return xxx_messageInfo_BlastDbParams.Size(m)
}
func (m *BlastDbParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BlastDbParams.DiscardUnknown(m)
}

var xxx_messageInfo_BlastDbParams proto.InternalMessageInfo

func (m *BlastDbParams) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *BlastDbParams) GetTaxonId() string {
	if m != nil {
		return m.TaxonId
	}
	return ""
}

func (m *BlastDbParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlastDbParams) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BlastDbParams) GetSeqtype() string {
	if m != nil {
		return m.Seqtype
	}
	return ""
}

func init() {
	proto.RegisterType((*BlastDbRequest)(nil), "dictybase.analysis.BlastDbRequest")
	proto.RegisterType((*BlastDbParams)(nil), "dictybase.analysis.BlastDbParams")
}

func init() { proto.RegisterFile("analysis.proto", fileDescriptor_f1f40f047c7fd56f) }

var fileDescriptor_f1f40f047c7fd56f = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x91, 0x3f, 0x8f, 0xd3, 0x40,
	0x10, 0xc5, 0xd9, 0x70, 0x97, 0x73, 0x56, 0xe4, 0x4e, 0xda, 0xe2, 0x64, 0xf9, 0x4e, 0x22, 0xb8,
	0x4a, 0xc3, 0x5a, 0x82, 0x92, 0x86, 0x73, 0x42, 0x91, 0x06, 0x2c, 0x43, 0x01, 0x34, 0xd1, 0xd8,
	0x9e, 0x38, 0x2b, 0xec, 0x5d, 0xdb, 0xbb, 0x8e, 0xf0, 0xd7, 0xa1, 0x85, 0xef, 0x84, 0xc4, 0xa7,
	0xa0, 0x44, 0xfe, 0x87, 0x64, 0x91, 0x9a, 0xce, 0x7e, 0x6f, 0xe6, 0xcd, 0x5b, 0xfd, 0xe8, 0x35,
	0x48, 0xc8, 0x1a, 0x2d, 0x34, 0x2f, 0x2a, 0x65, 0x14, 0x63, 0x89, 0x88, 0x4d, 0x13, 0x81, 0x46,
	0x3e, 0x3a, 0xce, 0x5d, 0xaa, 0x54, 0x9a, 0xa1, 0xd7, 0x4d, 0x44, 0xf5, 0xc1, 0xc3, 0xbc, 0x30,
	0x4d, 0xbf, 0xe0, 0xdc, 0x0f, 0x26, 0x14, 0xc2, 0x03, 0x29, 0x95, 0x01, 0x23, 0x94, 0x1c, 0xe2,
	0x9c, 0x9b, 0x13, 0x64, 0x22, 0x01, 0xa3, 0xaa, 0x5e, 0x70, 0x7f, 0x10, 0x7a, 0xed, 0x67, 0xa0,
	0xcd, 0x36, 0x0a, 0xb1, 0xac, 0x51, 0x1b, 0x76, 0x47, 0x17, 0x1a, 0xcb, 0x7d, 0x7c, 0xac, 0xe5,
	0x17, 0x9b, 0xac, 0xc8, 0xfa, 0x49, 0x68, 0x69, 0x2c, 0x37, 0xed, 0x3f, 0x7b, 0x46, 0x2d, 0x03,
	0x5f, 0x95, 0xdc, 0x8b, 0xc4, 0x9e, 0xad, 0xc8, 0x7a, 0xe1, 0xcf, 0x7f, 0xfd, 0x7c, 0x3a, 0xfb,
	0x48, 0xc2, 0xab, 0x4e, 0xdf, 0x25, 0xcc, 0xa1, 0x17, 0x12, 0x72, 0xb4, 0x1f, 0x4f, 0xec, 0x4e,
	0x63, 0xf7, 0xf4, 0xd2, 0x08, 0x93, 0xa1, 0x7d, 0x31, 0x31, 0x7b, 0x91, 0xad, 0xe8, 0x95, 0xc6,
	0xd2, 0x34, 0x05, 0xda, 0x97, 0xd3, 0xec, 0x41, 0x76, 0xbf, 0x13, 0xba, 0x1c, 0xea, 0x06, 0x50,
	0x41, 0xae, 0xdb, 0xb6, 0x07, 0x91, 0xe1, 0xbe, 0x3b, 0xd9, 0xb6, 0x5d, 0x84, 0x56, 0x2b, 0xbc,
	0x6d, 0xcf, 0xfd, 0xaf, 0xb6, 0xf3, 0xb3, 0x6d, 0x5f, 0x44, 0xf4, 0xe6, 0x61, 0x80, 0xf6, 0x1e,
	0xab, 0x93, 0x88, 0x91, 0xbd, 0xa3, 0xcb, 0x4d, 0x85, 0x60, 0x70, 0x78, 0x05, 0x73, 0xf9, 0xbf,
	0x84, 0xf9, 0x94, 0x88, 0x73, 0xcb, 0x7b, 0xa8, 0x7c, 0x24, 0xce, 0xdf, 0xb4, 0xc4, 0xdd, 0x47,
	0x6b, 0xe2, 0x37, 0xf4, 0x56, 0x55, 0xe9, 0x99, 0x10, 0x7f, 0x39, 0xde, 0x0e, 0xda, 0xad, 0x80,
	0x7c, 0x7e, 0x9d, 0x0a, 0x73, 0xac, 0x23, 0x1e, 0xab, 0xdc, 0xeb, 0xe6, 0x7d, 0xd0, 0xe8, 0xa5,
	0xea, 0x79, 0x8a, 0xb2, 0x4b, 0xf6, 0xfe, 0xa6, 0x40, 0x21, 0xb4, 0x37, 0x26, 0xbd, 0x1a, 0x3f,
	0x7e, 0x13, 0xf2, 0x6d, 0x66, 0x6d, 0x77, 0x9b, 0x0f, 0x9f, 0x1e, 0x82, 0x5d, 0x34, 0xef, 0x96,
	0x5e, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x05, 0x6a, 0x73, 0x0d, 0xb4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	// Create a blast database from the provided sequence
	CreateBlastDb(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_CreateBlastDbClient, error)
}

type analysisServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalysisServiceClient(cc *grpc.ClientConn) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) CreateBlastDb(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_CreateBlastDbClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalysisService_serviceDesc.Streams[0], "/dictybase.analysis.AnalysisService/CreateBlastDb", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceCreateBlastDbClient{stream}
	return x, nil
}

type AnalysisService_CreateBlastDbClient interface {
	Send(*BlastDbRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type analysisServiceCreateBlastDbClient struct {
	grpc.ClientStream
}

func (x *analysisServiceCreateBlastDbClient) Send(m *BlastDbRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceCreateBlastDbClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
type AnalysisServiceServer interface {
	// Create a blast database from the provided sequence
	CreateBlastDb(AnalysisService_CreateBlastDbServer) error
}

// UnimplementedAnalysisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnalysisServiceServer struct {
}

func (*UnimplementedAnalysisServiceServer) CreateBlastDb(srv AnalysisService_CreateBlastDbServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBlastDb not implemented")
}

func RegisterAnalysisServiceServer(s *grpc.Server, srv AnalysisServiceServer) {
	s.RegisterService(&_AnalysisService_serviceDesc, srv)
}

func _AnalysisService_CreateBlastDb_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).CreateBlastDb(&analysisServiceCreateBlastDbServer{stream})
}

type AnalysisService_CreateBlastDbServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*BlastDbRequest, error)
	grpc.ServerStream
}

type analysisServiceCreateBlastDbServer struct {
	grpc.ServerStream
}

func (x *analysisServiceCreateBlastDbServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceCreateBlastDbServer) Recv() (*BlastDbRequest, error) {
	m := new(BlastDbRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.analysis.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateBlastDb",
			Handler:       _AnalysisService_CreateBlastDb_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "analysis.proto",
}
