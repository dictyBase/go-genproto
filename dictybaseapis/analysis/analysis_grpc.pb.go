// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package analysis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	// Create a blast database from the provided sequence
	CreateBlastDb(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_CreateBlastDbClient, error)
}

type analysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisServiceClient(cc grpc.ClientConnInterface) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) CreateBlastDb(ctx context.Context, opts ...grpc.CallOption) (AnalysisService_CreateBlastDbClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalysisService_ServiceDesc.Streams[0], "/dictybase.analysis.AnalysisService/CreateBlastDb", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceCreateBlastDbClient{stream}
	return x, nil
}

type AnalysisService_CreateBlastDbClient interface {
	Send(*BlastDbRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type analysisServiceCreateBlastDbClient struct {
	grpc.ClientStream
}

func (x *analysisServiceCreateBlastDbClient) Send(m *BlastDbRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analysisServiceCreateBlastDbClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
// All implementations must embed UnimplementedAnalysisServiceServer
// for forward compatibility
type AnalysisServiceServer interface {
	// Create a blast database from the provided sequence
	CreateBlastDb(AnalysisService_CreateBlastDbServer) error
	mustEmbedUnimplementedAnalysisServiceServer()
}

// UnimplementedAnalysisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalysisServiceServer struct {
}

func (UnimplementedAnalysisServiceServer) CreateBlastDb(AnalysisService_CreateBlastDbServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBlastDb not implemented")
}
func (UnimplementedAnalysisServiceServer) mustEmbedUnimplementedAnalysisServiceServer() {}

// UnsafeAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisServiceServer will
// result in compilation errors.
type UnsafeAnalysisServiceServer interface {
	mustEmbedUnimplementedAnalysisServiceServer()
}

func RegisterAnalysisServiceServer(s grpc.ServiceRegistrar, srv AnalysisServiceServer) {
	s.RegisterService(&AnalysisService_ServiceDesc, srv)
}

func _AnalysisService_CreateBlastDb_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalysisServiceServer).CreateBlastDb(&analysisServiceCreateBlastDbServer{stream})
}

type AnalysisService_CreateBlastDbServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*BlastDbRequest, error)
	grpc.ServerStream
}

type analysisServiceCreateBlastDbServer struct {
	grpc.ServerStream
}

func (x *analysisServiceCreateBlastDbServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analysisServiceCreateBlastDbServer) Recv() (*BlastDbRequest, error) {
	m := new(BlastDbRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisService_ServiceDesc is the grpc.ServiceDesc for AnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.analysis.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateBlastDb",
			Handler:       _AnalysisService_CreateBlastDb_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dictybase/analysis/analysis.proto",
}
