// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	UpdateUserRequest
	CreateUserRequest
	User
	UserCollection
	UserData
	UserAttributes
	ExistingUserRelationships
	NewUserRelationships
	UpdateRoleRequest
	CreateRoleRequest
	Role
	RoleCollection
	RoleData
	RoleAttributes
	ExistingRoleRelationships
	NewRoleRelationships
	UpdatePermissionRequest
	CreatePermissionRequest
	Permission
	PermissionCollection
	PermissionData
	PermissionAttributes
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf4 "github.com/golang/protobuf/ptypes/any"
import dictybase_api_jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"
import dictybase_api_jsonapi1 "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateUserRequest struct {
	Data *UpdateUserRequest_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// An optional mask specifying which fields to update.
	// Presence of this field allow partial updates.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateUserRequest) GetData() *UpdateUserRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateUserRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type UpdateUserRequest_Data struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Unique id, required
	Id            int64                 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attributes    *UserAttributes       `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty"`
	Relationships *NewUserRelationships `protobuf:"bytes,4,opt,name=relationships" json:"relationships,omitempty"`
}

func (m *UpdateUserRequest_Data) Reset()                    { *m = UpdateUserRequest_Data{} }
func (m *UpdateUserRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest_Data) ProtoMessage()               {}
func (*UpdateUserRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *UpdateUserRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdateUserRequest_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateUserRequest_Data) GetAttributes() *UserAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateUserRequest_Data) GetRelationships() *NewUserRelationships {
	if m != nil {
		return m.Relationships
	}
	return nil
}

type CreateUserRequest struct {
	Data *CreateUserRequest_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateUserRequest) GetData() *CreateUserRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// The payload for new user
type CreateUserRequest_Data struct {
	Type          string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Attributes    *UserAttributes       `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
	Relationships *NewUserRelationships `protobuf:"bytes,3,opt,name=relationships" json:"relationships,omitempty"`
}

func (m *CreateUserRequest_Data) Reset()                    { *m = CreateUserRequest_Data{} }
func (m *CreateUserRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest_Data) ProtoMessage()               {}
func (*CreateUserRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *CreateUserRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateUserRequest_Data) GetAttributes() *UserAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CreateUserRequest_Data) GetRelationships() *NewUserRelationships {
	if m != nil {
		return m.Relationships
	}
	return nil
}

// A user resource.
type User struct {
	Data     *UserData               `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Included []*google_protobuf4.Any `protobuf:"bytes,3,rep,name=included" json:"included,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *User) GetIncluded() []*google_protobuf4.Any {
	if m != nil {
		return m.Included
	}
	return nil
}

// A user collection resource.
type UserCollection struct {
	Data     []*UserData                            `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Links    *dictybase_api_jsonapi.PaginationLinks `protobuf:"bytes,2,opt,name=links" json:"links,omitempty"`
	Meta     *dictybase_api_jsonapi.Meta            `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	Included []*google_protobuf4.Any                `protobuf:"bytes,4,rep,name=included" json:"included,omitempty"`
}

func (m *UserCollection) Reset()                    { *m = UserCollection{} }
func (m *UserCollection) String() string            { return proto.CompactTextString(m) }
func (*UserCollection) ProtoMessage()               {}
func (*UserCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserCollection) GetData() []*UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserCollection) GetLinks() *dictybase_api_jsonapi.PaginationLinks {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *UserCollection) GetMeta() *dictybase_api_jsonapi.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UserCollection) GetIncluded() []*google_protobuf4.Any {
	if m != nil {
		return m.Included
	}
	return nil
}

// A top level container for user data.
type UserData struct {
	// The resource name.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Unique id.
	Id            int64                        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attributes    *UserAttributes              `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty"`
	Links         *dictybase_api_jsonapi.Links `protobuf:"bytes,4,opt,name=links" json:"links,omitempty"`
	Relationships *ExistingUserRelationships   `protobuf:"bytes,5,opt,name=relationships" json:"relationships,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UserData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserData) GetAttributes() *UserAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UserData) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *UserData) GetRelationships() *ExistingUserRelationships {
	if m != nil {
		return m.Relationships
	}
	return nil
}

// A container for user fields.
type UserAttributes struct {
	// First name.
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// Last name.
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// Email.
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// Organization in which the user belong.
	Organization string `protobuf:"bytes,4,opt,name=organization" json:"organization,omitempty"`
	// Group in which the user belong.
	GroupName string `protobuf:"bytes,5,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	// Address.
	FirstAddress string `protobuf:"bytes,6,opt,name=first_address,json=firstAddress" json:"first_address,omitempty"`
	// More address.
	SecondAddress string `protobuf:"bytes,7,opt,name=second_address,json=secondAddress" json:"second_address,omitempty"`
	// City.
	City string `protobuf:"bytes,8,opt,name=city" json:"city,omitempty"`
	// State.
	State string `protobuf:"bytes,9,opt,name=state" json:"state,omitempty"`
	// Zipcode.
	Zipcode string `protobuf:"bytes,10,opt,name=zipcode" json:"zipcode,omitempty"`
	// Country.
	Country string `protobuf:"bytes,11,opt,name=country" json:"country,omitempty"`
	// Phone no.
	Phone string `protobuf:"bytes,12,opt,name=phone" json:"phone,omitempty"`
	// Current status of user.
	IsActive bool `protobuf:"varint,13,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// Timestamp for creation and update
	CreatedAt *google_protobuf2.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf2.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *UserAttributes) Reset()                    { *m = UserAttributes{} }
func (m *UserAttributes) String() string            { return proto.CompactTextString(m) }
func (*UserAttributes) ProtoMessage()               {}
func (*UserAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserAttributes) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserAttributes) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserAttributes) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserAttributes) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UserAttributes) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *UserAttributes) GetFirstAddress() string {
	if m != nil {
		return m.FirstAddress
	}
	return ""
}

func (m *UserAttributes) GetSecondAddress() string {
	if m != nil {
		return m.SecondAddress
	}
	return ""
}

func (m *UserAttributes) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserAttributes) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *UserAttributes) GetZipcode() string {
	if m != nil {
		return m.Zipcode
	}
	return ""
}

func (m *UserAttributes) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserAttributes) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserAttributes) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UserAttributes) GetCreatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *UserAttributes) GetUpdatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// The relationship definition for existing users.
type ExistingUserRelationships struct {
	Roles *ExistingUserRelationships_Roles `protobuf:"bytes,1,opt,name=roles" json:"roles,omitempty"`
}

func (m *ExistingUserRelationships) Reset()                    { *m = ExistingUserRelationships{} }
func (m *ExistingUserRelationships) String() string            { return proto.CompactTextString(m) }
func (*ExistingUserRelationships) ProtoMessage()               {}
func (*ExistingUserRelationships) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExistingUserRelationships) GetRoles() *ExistingUserRelationships_Roles {
	if m != nil {
		return m.Roles
	}
	return nil
}

// Relationships with role resource.
type ExistingUserRelationships_Roles struct {
	// Http links with role resource.
	Links *dictybase_api_jsonapi.Links `protobuf:"bytes,1,opt,name=links" json:"links,omitempty"`
	// A role [resource identifier object](http://jsonapi.org/format/#document-resource-identifier-objects).
	Data []*dictybase_api_jsonapi.Data `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *ExistingUserRelationships_Roles) Reset()         { *m = ExistingUserRelationships_Roles{} }
func (m *ExistingUserRelationships_Roles) String() string { return proto.CompactTextString(m) }
func (*ExistingUserRelationships_Roles) ProtoMessage()    {}
func (*ExistingUserRelationships_Roles) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

func (m *ExistingUserRelationships_Roles) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *ExistingUserRelationships_Roles) GetData() []*dictybase_api_jsonapi.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// The relationship definition for creating new users.
type NewUserRelationships struct {
	Roles *NewUserRelationships_Roles `protobuf:"bytes,1,opt,name=roles" json:"roles,omitempty"`
}

func (m *NewUserRelationships) Reset()                    { *m = NewUserRelationships{} }
func (m *NewUserRelationships) String() string            { return proto.CompactTextString(m) }
func (*NewUserRelationships) ProtoMessage()               {}
func (*NewUserRelationships) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NewUserRelationships) GetRoles() *NewUserRelationships_Roles {
	if m != nil {
		return m.Roles
	}
	return nil
}

// Relationships with role resource.
type NewUserRelationships_Roles struct {
	// A role [resource identifier object](http://jsonapi.org/format/#document-resource-identifier-objects).
	Data []*dictybase_api_jsonapi.Data `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *NewUserRelationships_Roles) Reset()                    { *m = NewUserRelationships_Roles{} }
func (m *NewUserRelationships_Roles) String() string            { return proto.CompactTextString(m) }
func (*NewUserRelationships_Roles) ProtoMessage()               {}
func (*NewUserRelationships_Roles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *NewUserRelationships_Roles) GetData() []*dictybase_api_jsonapi.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateRoleRequest struct {
	Data *UpdateRoleRequest_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// An optional mask specifying which fields to update.
	// Presence of this field allow partial updates.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateRoleRequest) Reset()                    { *m = UpdateRoleRequest{} }
func (m *UpdateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleRequest) ProtoMessage()               {}
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateRoleRequest) GetData() *UpdateRoleRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateRoleRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type UpdateRoleRequest_Data struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Unique id, required
	Id            int64                      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attributes    *RoleAttributes            `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty"`
	Relationships *ExistingRoleRelationships `protobuf:"bytes,4,opt,name=relationships" json:"relationships,omitempty"`
}

func (m *UpdateRoleRequest_Data) Reset()                    { *m = UpdateRoleRequest_Data{} }
func (m *UpdateRoleRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleRequest_Data) ProtoMessage()               {}
func (*UpdateRoleRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *UpdateRoleRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdateRoleRequest_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateRoleRequest_Data) GetAttributes() *RoleAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateRoleRequest_Data) GetRelationships() *ExistingRoleRelationships {
	if m != nil {
		return m.Relationships
	}
	return nil
}

type CreateRoleRequest struct {
	Data *CreateRoleRequest_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CreateRoleRequest) Reset()                    { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()               {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateRoleRequest) GetData() *CreateRoleRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// The payload for new role
type CreateRoleRequest_Data struct {
	Type          string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Attributes    *RoleAttributes       `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
	Relationships *NewRoleRelationships `protobuf:"bytes,3,opt,name=relationships" json:"relationships,omitempty"`
}

func (m *CreateRoleRequest_Data) Reset()                    { *m = CreateRoleRequest_Data{} }
func (m *CreateRoleRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRequest_Data) ProtoMessage()               {}
func (*CreateRoleRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *CreateRoleRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateRoleRequest_Data) GetAttributes() *RoleAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CreateRoleRequest_Data) GetRelationships() *NewRoleRelationships {
	if m != nil {
		return m.Relationships
	}
	return nil
}

// A definition for managing user roles.
type Role struct {
	Data     *RoleData               `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Included []*google_protobuf4.Any `protobuf:"bytes,3,rep,name=included" json:"included,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Role) GetData() *RoleData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Role) GetIncluded() []*google_protobuf4.Any {
	if m != nil {
		return m.Included
	}
	return nil
}

// A role collection definition.
type RoleCollection struct {
	Data     []*RoleData                  `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Links    *dictybase_api_jsonapi.Links `protobuf:"bytes,2,opt,name=links" json:"links,omitempty"`
	Included []*google_protobuf4.Any      `protobuf:"bytes,3,rep,name=included" json:"included,omitempty"`
}

func (m *RoleCollection) Reset()                    { *m = RoleCollection{} }
func (m *RoleCollection) String() string            { return proto.CompactTextString(m) }
func (*RoleCollection) ProtoMessage()               {}
func (*RoleCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RoleCollection) GetData() []*RoleData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RoleCollection) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *RoleCollection) GetIncluded() []*google_protobuf4.Any {
	if m != nil {
		return m.Included
	}
	return nil
}

// A top level container for role data.
type RoleData struct {
	Type          string                       `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id            int64                        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attributes    *RoleAttributes              `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty"`
	Links         *dictybase_api_jsonapi.Links `protobuf:"bytes,4,opt,name=links" json:"links,omitempty"`
	Relationships *ExistingRoleRelationships   `protobuf:"bytes,5,opt,name=relationships" json:"relationships,omitempty"`
}

func (m *RoleData) Reset()                    { *m = RoleData{} }
func (m *RoleData) String() string            { return proto.CompactTextString(m) }
func (*RoleData) ProtoMessage()               {}
func (*RoleData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RoleData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoleData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoleData) GetAttributes() *RoleAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RoleData) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *RoleData) GetRelationships() *ExistingRoleRelationships {
	if m != nil {
		return m.Relationships
	}
	return nil
}

// A container for role fields.
type RoleAttributes struct {
	Role        string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Timestamp for creation and update
	CreatedAt *google_protobuf2.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf2.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *RoleAttributes) Reset()                    { *m = RoleAttributes{} }
func (m *RoleAttributes) String() string            { return proto.CompactTextString(m) }
func (*RoleAttributes) ProtoMessage()               {}
func (*RoleAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RoleAttributes) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RoleAttributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoleAttributes) GetCreatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RoleAttributes) GetUpdatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// The relationship definition for existing roles.
type ExistingRoleRelationships struct {
	Permissions *ExistingRoleRelationships_Permissions `protobuf:"bytes,1,opt,name=permissions" json:"permissions,omitempty"`
	Users       *ExistingRoleRelationships_Users       `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
}

func (m *ExistingRoleRelationships) Reset()                    { *m = ExistingRoleRelationships{} }
func (m *ExistingRoleRelationships) String() string            { return proto.CompactTextString(m) }
func (*ExistingRoleRelationships) ProtoMessage()               {}
func (*ExistingRoleRelationships) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExistingRoleRelationships) GetPermissions() *ExistingRoleRelationships_Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ExistingRoleRelationships) GetUsers() *ExistingRoleRelationships_Users {
	if m != nil {
		return m.Users
	}
	return nil
}

// Relationships with permission definition.
type ExistingRoleRelationships_Permissions struct {
	Links *dictybase_api_jsonapi.Links  `protobuf:"bytes,1,opt,name=links" json:"links,omitempty"`
	Data  []*dictybase_api_jsonapi.Data `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *ExistingRoleRelationships_Permissions) Reset()         { *m = ExistingRoleRelationships_Permissions{} }
func (m *ExistingRoleRelationships_Permissions) String() string { return proto.CompactTextString(m) }
func (*ExistingRoleRelationships_Permissions) ProtoMessage()    {}
func (*ExistingRoleRelationships_Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

func (m *ExistingRoleRelationships_Permissions) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *ExistingRoleRelationships_Permissions) GetData() []*dictybase_api_jsonapi.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// Relationships with user definition.
type ExistingRoleRelationships_Users struct {
	Links *dictybase_api_jsonapi.Links  `protobuf:"bytes,1,opt,name=links" json:"links,omitempty"`
	Data  []*dictybase_api_jsonapi.Data `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *ExistingRoleRelationships_Users) Reset()         { *m = ExistingRoleRelationships_Users{} }
func (m *ExistingRoleRelationships_Users) String() string { return proto.CompactTextString(m) }
func (*ExistingRoleRelationships_Users) ProtoMessage()    {}
func (*ExistingRoleRelationships_Users) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 1}
}

func (m *ExistingRoleRelationships_Users) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *ExistingRoleRelationships_Users) GetData() []*dictybase_api_jsonapi.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// The relationship definition for creating new roles.
type NewRoleRelationships struct {
	Permissions *NewRoleRelationships_Permissions `protobuf:"bytes,1,opt,name=permissions" json:"permissions,omitempty"`
	Users       *NewRoleRelationships_Users       `protobuf:"bytes,2,opt,name=users" json:"users,omitempty"`
}

func (m *NewRoleRelationships) Reset()                    { *m = NewRoleRelationships{} }
func (m *NewRoleRelationships) String() string            { return proto.CompactTextString(m) }
func (*NewRoleRelationships) ProtoMessage()               {}
func (*NewRoleRelationships) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *NewRoleRelationships) GetPermissions() *NewRoleRelationships_Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *NewRoleRelationships) GetUsers() *NewRoleRelationships_Users {
	if m != nil {
		return m.Users
	}
	return nil
}

type NewRoleRelationships_Permissions struct {
	Data []*dictybase_api_jsonapi.Data `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *NewRoleRelationships_Permissions) Reset()         { *m = NewRoleRelationships_Permissions{} }
func (m *NewRoleRelationships_Permissions) String() string { return proto.CompactTextString(m) }
func (*NewRoleRelationships_Permissions) ProtoMessage()    {}
func (*NewRoleRelationships_Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

func (m *NewRoleRelationships_Permissions) GetData() []*dictybase_api_jsonapi.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type NewRoleRelationships_Users struct {
	Data []*dictybase_api_jsonapi.Data `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *NewRoleRelationships_Users) Reset()                    { *m = NewRoleRelationships_Users{} }
func (m *NewRoleRelationships_Users) String() string            { return proto.CompactTextString(m) }
func (*NewRoleRelationships_Users) ProtoMessage()               {}
func (*NewRoleRelationships_Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 1} }

func (m *NewRoleRelationships_Users) GetData() []*dictybase_api_jsonapi.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdatePermissionRequest struct {
	Data *UpdatePermissionRequest_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// An optional mask specifying which fields to update.
	// Presence of this field allow partial updates.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdatePermissionRequest) Reset()                    { *m = UpdatePermissionRequest{} }
func (m *UpdatePermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePermissionRequest) ProtoMessage()               {}
func (*UpdatePermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdatePermissionRequest) GetData() *UpdatePermissionRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdatePermissionRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type UpdatePermissionRequest_Data struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Unique id, required
	Id         int64                 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attributes *PermissionAttributes `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *UpdatePermissionRequest_Data) Reset()         { *m = UpdatePermissionRequest_Data{} }
func (m *UpdatePermissionRequest_Data) String() string { return proto.CompactTextString(m) }
func (*UpdatePermissionRequest_Data) ProtoMessage()    {}
func (*UpdatePermissionRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

func (m *UpdatePermissionRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdatePermissionRequest_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePermissionRequest_Data) GetAttributes() *PermissionAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type CreatePermissionRequest struct {
	Data *CreatePermissionRequest_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CreatePermissionRequest) Reset()                    { *m = CreatePermissionRequest{} }
func (m *CreatePermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePermissionRequest) ProtoMessage()               {}
func (*CreatePermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreatePermissionRequest) GetData() *CreatePermissionRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// The payload for new user
type CreatePermissionRequest_Data struct {
	Type       string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Attributes *PermissionAttributes `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *CreatePermissionRequest_Data) Reset()         { *m = CreatePermissionRequest_Data{} }
func (m *CreatePermissionRequest_Data) String() string { return proto.CompactTextString(m) }
func (*CreatePermissionRequest_Data) ProtoMessage()    {}
func (*CreatePermissionRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

func (m *CreatePermissionRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreatePermissionRequest_Data) GetAttributes() *PermissionAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A resource for managing user permission.
type Permission struct {
	Data *PermissionData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Permission) GetData() *PermissionData {
	if m != nil {
		return m.Data
	}
	return nil
}

// A permission collection resource.
type PermissionCollection struct {
	Data  []*PermissionData            `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Links *dictybase_api_jsonapi.Links `protobuf:"bytes,2,opt,name=links" json:"links,omitempty"`
}

func (m *PermissionCollection) Reset()                    { *m = PermissionCollection{} }
func (m *PermissionCollection) String() string            { return proto.CompactTextString(m) }
func (*PermissionCollection) ProtoMessage()               {}
func (*PermissionCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PermissionCollection) GetData() []*PermissionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PermissionCollection) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

// A top level container for permission data.
type PermissionData struct {
	// The resource name.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Unique id.
	Id         int64                        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attributes *PermissionAttributes        `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty"`
	Links      *dictybase_api_jsonapi.Links `protobuf:"bytes,4,opt,name=links" json:"links,omitempty"`
}

func (m *PermissionData) Reset()                    { *m = PermissionData{} }
func (m *PermissionData) String() string            { return proto.CompactTextString(m) }
func (*PermissionData) ProtoMessage()               {}
func (*PermissionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PermissionData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PermissionData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PermissionData) GetAttributes() *PermissionAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *PermissionData) GetLinks() *dictybase_api_jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

// A container for permission fields.
type PermissionAttributes struct {
	// Kind of permission.
	Permission string `protobuf:"bytes,1,opt,name=permission" json:"permission,omitempty"`
	// Brief description of the type of permission.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Timestamp for creation and update
	CreatedAt *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *PermissionAttributes) Reset()                    { *m = PermissionAttributes{} }
func (m *PermissionAttributes) String() string            { return proto.CompactTextString(m) }
func (*PermissionAttributes) ProtoMessage()               {}
func (*PermissionAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PermissionAttributes) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *PermissionAttributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PermissionAttributes) GetCreatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PermissionAttributes) GetUpdatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateUserRequest)(nil), "dictybase.user.UpdateUserRequest")
	proto.RegisterType((*UpdateUserRequest_Data)(nil), "dictybase.user.UpdateUserRequest.Data")
	proto.RegisterType((*CreateUserRequest)(nil), "dictybase.user.CreateUserRequest")
	proto.RegisterType((*CreateUserRequest_Data)(nil), "dictybase.user.CreateUserRequest.Data")
	proto.RegisterType((*User)(nil), "dictybase.user.User")
	proto.RegisterType((*UserCollection)(nil), "dictybase.user.UserCollection")
	proto.RegisterType((*UserData)(nil), "dictybase.user.UserData")
	proto.RegisterType((*UserAttributes)(nil), "dictybase.user.UserAttributes")
	proto.RegisterType((*ExistingUserRelationships)(nil), "dictybase.user.ExistingUserRelationships")
	proto.RegisterType((*ExistingUserRelationships_Roles)(nil), "dictybase.user.ExistingUserRelationships.Roles")
	proto.RegisterType((*NewUserRelationships)(nil), "dictybase.user.NewUserRelationships")
	proto.RegisterType((*NewUserRelationships_Roles)(nil), "dictybase.user.NewUserRelationships.Roles")
	proto.RegisterType((*UpdateRoleRequest)(nil), "dictybase.user.UpdateRoleRequest")
	proto.RegisterType((*UpdateRoleRequest_Data)(nil), "dictybase.user.UpdateRoleRequest.Data")
	proto.RegisterType((*CreateRoleRequest)(nil), "dictybase.user.CreateRoleRequest")
	proto.RegisterType((*CreateRoleRequest_Data)(nil), "dictybase.user.CreateRoleRequest.Data")
	proto.RegisterType((*Role)(nil), "dictybase.user.Role")
	proto.RegisterType((*RoleCollection)(nil), "dictybase.user.RoleCollection")
	proto.RegisterType((*RoleData)(nil), "dictybase.user.RoleData")
	proto.RegisterType((*RoleAttributes)(nil), "dictybase.user.RoleAttributes")
	proto.RegisterType((*ExistingRoleRelationships)(nil), "dictybase.user.ExistingRoleRelationships")
	proto.RegisterType((*ExistingRoleRelationships_Permissions)(nil), "dictybase.user.ExistingRoleRelationships.Permissions")
	proto.RegisterType((*ExistingRoleRelationships_Users)(nil), "dictybase.user.ExistingRoleRelationships.Users")
	proto.RegisterType((*NewRoleRelationships)(nil), "dictybase.user.NewRoleRelationships")
	proto.RegisterType((*NewRoleRelationships_Permissions)(nil), "dictybase.user.NewRoleRelationships.Permissions")
	proto.RegisterType((*NewRoleRelationships_Users)(nil), "dictybase.user.NewRoleRelationships.Users")
	proto.RegisterType((*UpdatePermissionRequest)(nil), "dictybase.user.UpdatePermissionRequest")
	proto.RegisterType((*UpdatePermissionRequest_Data)(nil), "dictybase.user.UpdatePermissionRequest.Data")
	proto.RegisterType((*CreatePermissionRequest)(nil), "dictybase.user.CreatePermissionRequest")
	proto.RegisterType((*CreatePermissionRequest_Data)(nil), "dictybase.user.CreatePermissionRequest.Data")
	proto.RegisterType((*Permission)(nil), "dictybase.user.Permission")
	proto.RegisterType((*PermissionCollection)(nil), "dictybase.user.PermissionCollection")
	proto.RegisterType((*PermissionData)(nil), "dictybase.user.PermissionData")
	proto.RegisterType((*PermissionAttributes)(nil), "dictybase.user.PermissionAttributes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	// Gets the specified user
	GetUser(ctx context.Context, in *dictybase_api_jsonapi1.GetRequest, opts ...grpc.CallOption) (*User, error)
	// Gets all related roles
	GetRelatedRoles(ctx context.Context, in *dictybase_api_jsonapi1.RelationshipRequest, opts ...grpc.CallOption) (*RoleCollection, error)
	// List all users
	ListUsers(ctx context.Context, in *dictybase_api_jsonapi1.ListRequest, opts ...grpc.CallOption) (*UserCollection, error)
	// Create an user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Create relationship links with roles
	CreateRoleRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Update an user
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Update relationship links with roles
	UpdateRoleRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Delete an user
	DeleteUser(ctx context.Context, in *dictybase_api_jsonapi1.DeleteRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Delete relationship links with roles
	DeleteRoleRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *dictybase_api_jsonapi1.GetRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRelatedRoles(ctx context.Context, in *dictybase_api_jsonapi1.RelationshipRequest, opts ...grpc.CallOption) (*RoleCollection, error) {
	out := new(RoleCollection)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/GetRelatedRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *dictybase_api_jsonapi1.ListRequest, opts ...grpc.CallOption) (*UserCollection, error) {
	out := new(UserCollection)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateRoleRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/CreateRoleRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateRoleRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/UpdateRoleRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *dictybase_api_jsonapi1.DeleteRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteRoleRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.UserService/DeleteRoleRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	// Gets the specified user
	GetUser(context.Context, *dictybase_api_jsonapi1.GetRequest) (*User, error)
	// Gets all related roles
	GetRelatedRoles(context.Context, *dictybase_api_jsonapi1.RelationshipRequest) (*RoleCollection, error)
	// List all users
	ListUsers(context.Context, *dictybase_api_jsonapi1.ListRequest) (*UserCollection, error)
	// Create an user
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	// Create relationship links with roles
	CreateRoleRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	// Update an user
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	// Update relationship links with roles
	UpdateRoleRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	// Delete an user
	DeleteUser(context.Context, *dictybase_api_jsonapi1.DeleteRequest) (*google_protobuf3.Empty, error)
	// Delete relationship links with roles
	DeleteRoleRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*dictybase_api_jsonapi1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRelatedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRelatedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/GetRelatedRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRelatedRoles(ctx, req.(*dictybase_api_jsonapi1.RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*dictybase_api_jsonapi1.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateRoleRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateRoleRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/CreateRoleRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateRoleRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateRoleRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateRoleRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/UpdateRoleRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateRoleRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*dictybase_api_jsonapi1.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteRoleRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteRoleRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.UserService/DeleteRoleRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteRoleRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetRelatedRoles",
			Handler:    _UserService_GetRelatedRoles_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "CreateRoleRelationship",
			Handler:    _UserService_CreateRoleRelationship_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateRoleRelationship",
			Handler:    _UserService_UpdateRoleRelationship_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteRoleRelationship",
			Handler:    _UserService_DeleteRoleRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// Client API for RoleService service

type RoleServiceClient interface {
	// Gets the specified role
	GetRole(ctx context.Context, in *dictybase_api_jsonapi1.GetRequest, opts ...grpc.CallOption) (*Role, error)
	// Gets all related users
	GetRelatedUsers(ctx context.Context, in *dictybase_api_jsonapi1.RelationshipRequest, opts ...grpc.CallOption) (*UserCollection, error)
	// Gets all related permissions
	GetRelatedPermissions(ctx context.Context, in *dictybase_api_jsonapi1.RelationshipRequest, opts ...grpc.CallOption) (*PermissionCollection, error)
	// List all roles
	ListRoles(ctx context.Context, in *dictybase_api_jsonapi1.SimpleListRequest, opts ...grpc.CallOption) (*RoleCollection, error)
	// Create an role
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	CreateUserRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	CreatePermissionRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Update an role
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	UpdateUserRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	UpdatePermissionRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Delete an role
	DeleteRole(ctx context.Context, in *dictybase_api_jsonapi1.DeleteRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	DeleteUserRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	DeletePermissionRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type roleServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoleServiceClient(cc *grpc.ClientConn) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *dictybase_api_jsonapi1.GetRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRelatedUsers(ctx context.Context, in *dictybase_api_jsonapi1.RelationshipRequest, opts ...grpc.CallOption) (*UserCollection, error) {
	out := new(UserCollection)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/GetRelatedUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRelatedPermissions(ctx context.Context, in *dictybase_api_jsonapi1.RelationshipRequest, opts ...grpc.CallOption) (*PermissionCollection, error) {
	out := new(PermissionCollection)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/GetRelatedPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListRoles(ctx context.Context, in *dictybase_api_jsonapi1.SimpleListRequest, opts ...grpc.CallOption) (*RoleCollection, error) {
	out := new(RoleCollection)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateUserRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/CreateUserRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreatePermissionRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/CreatePermissionRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateUserRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/UpdateUserRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdatePermissionRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/UpdatePermissionRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *dictybase_api_jsonapi1.DeleteRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteUserRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/DeleteUserRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeletePermissionRelationship(ctx context.Context, in *dictybase_api_jsonapi.DataCollection, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.RoleService/DeletePermissionRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceServer interface {
	// Gets the specified role
	GetRole(context.Context, *dictybase_api_jsonapi1.GetRequest) (*Role, error)
	// Gets all related users
	GetRelatedUsers(context.Context, *dictybase_api_jsonapi1.RelationshipRequest) (*UserCollection, error)
	// Gets all related permissions
	GetRelatedPermissions(context.Context, *dictybase_api_jsonapi1.RelationshipRequest) (*PermissionCollection, error)
	// List all roles
	ListRoles(context.Context, *dictybase_api_jsonapi1.SimpleListRequest) (*RoleCollection, error)
	// Create an role
	CreateRole(context.Context, *CreateRoleRequest) (*Role, error)
	CreateUserRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	CreatePermissionRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	// Update an role
	UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error)
	UpdateUserRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	UpdatePermissionRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	// Delete an role
	DeleteRole(context.Context, *dictybase_api_jsonapi1.DeleteRequest) (*google_protobuf3.Empty, error)
	DeleteUserRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
	DeletePermissionRelationship(context.Context, *dictybase_api_jsonapi.DataCollection) (*google_protobuf3.Empty, error)
}

func RegisterRoleServiceServer(s *grpc.Server, srv RoleServiceServer) {
	s.RegisterService(&_RoleService_serviceDesc, srv)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*dictybase_api_jsonapi1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRelatedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRelatedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/GetRelatedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRelatedUsers(ctx, req.(*dictybase_api_jsonapi1.RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRelatedPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRelatedPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/GetRelatedPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRelatedPermissions(ctx, req.(*dictybase_api_jsonapi1.RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.SimpleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListRoles(ctx, req.(*dictybase_api_jsonapi1.SimpleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreateUserRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateUserRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/CreateUserRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateUserRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreatePermissionRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreatePermissionRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/CreatePermissionRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreatePermissionRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateUserRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateUserRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/UpdateUserRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateUserRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdatePermissionRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdatePermissionRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/UpdatePermissionRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdatePermissionRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*dictybase_api_jsonapi1.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteUserRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteUserRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/DeleteUserRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteUserRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeletePermissionRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi.DataCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeletePermissionRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.RoleService/DeletePermissionRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeletePermissionRelationship(ctx, req.(*dictybase_api_jsonapi.DataCollection))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.user.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
		{
			MethodName: "GetRelatedUsers",
			Handler:    _RoleService_GetRelatedUsers_Handler,
		},
		{
			MethodName: "GetRelatedPermissions",
			Handler:    _RoleService_GetRelatedPermissions_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RoleService_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RoleService_CreateRole_Handler,
		},
		{
			MethodName: "CreateUserRelationship",
			Handler:    _RoleService_CreateUserRelationship_Handler,
		},
		{
			MethodName: "CreatePermissionRelationship",
			Handler:    _RoleService_CreatePermissionRelationship_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateUserRelationship",
			Handler:    _RoleService_UpdateUserRelationship_Handler,
		},
		{
			MethodName: "UpdatePermissionRelationship",
			Handler:    _RoleService_UpdatePermissionRelationship_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "DeleteUserRelationship",
			Handler:    _RoleService_DeleteUserRelationship_Handler,
		},
		{
			MethodName: "DeletePermissionRelationship",
			Handler:    _RoleService_DeletePermissionRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// Client API for PermissionService service

type PermissionServiceClient interface {
	// Gets the specified permission
	GetPermission(ctx context.Context, in *dictybase_api_jsonapi1.GetRequest, opts ...grpc.CallOption) (*Permission, error)
	// List all permissions
	ListPermissions(ctx context.Context, in *dictybase_api_jsonapi1.SimpleListRequest, opts ...grpc.CallOption) (*PermissionCollection, error)
	// Create an permission
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	// Update an permission
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	// Delete an permission
	DeletePermission(ctx context.Context, in *dictybase_api_jsonapi1.DeleteRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type permissionServiceClient struct {
	cc *grpc.ClientConn
}

func NewPermissionServiceClient(cc *grpc.ClientConn) PermissionServiceClient {
	return &permissionServiceClient{cc}
}

func (c *permissionServiceClient) GetPermission(ctx context.Context, in *dictybase_api_jsonapi1.GetRequest, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := grpc.Invoke(ctx, "/dictybase.user.PermissionService/GetPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ListPermissions(ctx context.Context, in *dictybase_api_jsonapi1.SimpleListRequest, opts ...grpc.CallOption) (*PermissionCollection, error) {
	out := new(PermissionCollection)
	err := grpc.Invoke(ctx, "/dictybase.user.PermissionService/ListPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := grpc.Invoke(ctx, "/dictybase.user.PermissionService/CreatePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := grpc.Invoke(ctx, "/dictybase.user.PermissionService/UpdatePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) DeletePermission(ctx context.Context, in *dictybase_api_jsonapi1.DeleteRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/dictybase.user.PermissionService/DeletePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PermissionService service

type PermissionServiceServer interface {
	// Gets the specified permission
	GetPermission(context.Context, *dictybase_api_jsonapi1.GetRequest) (*Permission, error)
	// List all permissions
	ListPermissions(context.Context, *dictybase_api_jsonapi1.SimpleListRequest) (*PermissionCollection, error)
	// Create an permission
	CreatePermission(context.Context, *CreatePermissionRequest) (*Permission, error)
	// Update an permission
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*Permission, error)
	// Delete an permission
	DeletePermission(context.Context, *dictybase_api_jsonapi1.DeleteRequest) (*google_protobuf3.Empty, error)
}

func RegisterPermissionServiceServer(s *grpc.Server, srv PermissionServiceServer) {
	s.RegisterService(&_PermissionService_serviceDesc, srv)
}

func _PermissionService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.PermissionService/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetPermission(ctx, req.(*dictybase_api_jsonapi1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.SimpleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.PermissionService/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ListPermissions(ctx, req.(*dictybase_api_jsonapi1.SimpleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.PermissionService/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.PermissionService/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dictybase_api_jsonapi1.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.user.PermissionService/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).DeletePermission(ctx, req.(*dictybase_api_jsonapi1.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PermissionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.user.PermissionService",
	HandlerType: (*PermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermission",
			Handler:    _PermissionService_GetPermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _PermissionService_ListPermissions_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _PermissionService_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _PermissionService_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionService_DeletePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6f, 0xdb, 0x46,
	0x16, 0x07, 0x25, 0x39, 0x96, 0x9e, 0x6c, 0x25, 0x9e, 0x78, 0x63, 0x59, 0xf1, 0x26, 0x5e, 0x26,
	0xd9, 0xf5, 0x0a, 0x59, 0x29, 0xd0, 0x62, 0x81, 0x6c, 0xb2, 0x08, 0xec, 0xc4, 0xd9, 0x20, 0x45,
	0x3e, 0x0c, 0x26, 0x41, 0xd2, 0x5e, 0x5c, 0x5a, 0x1c, 0x2b, 0x53, 0x53, 0x24, 0x4b, 0x8e, 0x92,
	0x28, 0x45, 0x7b, 0x68, 0x6f, 0x01, 0x8a, 0x02, 0xed, 0xb9, 0x97, 0xa2, 0xc8, 0xb1, 0xbd, 0xf5,
	0xd2, 0xf6, 0x58, 0xa0, 0xe8, 0xa1, 0x28, 0xd0, 0x3f, 0xa0, 0x97, 0x1e, 0x7a, 0xef, 0x25, 0xc7,
	0x62, 0x66, 0x48, 0x71, 0x48, 0x8a, 0x32, 0x65, 0xcb, 0xee, 0xc5, 0x16, 0x67, 0xde, 0xf7, 0xbc,
	0xf7, 0xfb, 0x91, 0x03, 0xd0, 0xf3, 0xb0, 0xdb, 0x70, 0x5c, 0x9b, 0xda, 0xa8, 0x62, 0x90, 0x36,
	0xed, 0x6f, 0xe9, 0x1e, 0x6e, 0xb0, 0xd5, 0xda, 0x52, 0xc7, 0xb6, 0x3b, 0x26, 0x6e, 0xea, 0x0e,
	0x69, 0xea, 0x96, 0x65, 0x53, 0x9d, 0x12, 0xdb, 0xf2, 0x84, 0x74, 0x6d, 0xd9, 0xdf, 0xe5, 0x4f,
	0x5b, 0xbd, 0xed, 0xe6, 0x36, 0xc1, 0xa6, 0xb1, 0xd9, 0xd5, 0xbd, 0x1d, 0x5f, 0xe2, 0x74, 0x5c,
	0x82, 0x92, 0x2e, 0xf6, 0xa8, 0xde, 0x75, 0x7c, 0x81, 0x93, 0x71, 0x01, 0xdc, 0x75, 0x68, 0xdf,
	0xdf, 0x5c, 0x8c, 0x6f, 0xea, 0x56, 0xb0, 0x75, 0x66, 0x10, 0x28, 0x8f, 0xed, 0x2d, 0xcf, 0xb6,
	0xd8, 0x7f, 0x47, 0xef, 0x9b, 0xb6, 0x6e, 0x8c, 0x16, 0x72, 0xf1, 0xdb, 0x3d, 0xec, 0x51, 0x21,
	0xa4, 0x7e, 0x97, 0x83, 0xb9, 0x07, 0x8e, 0xa1, 0x53, 0xfc, 0xc0, 0xc3, 0xae, 0x26, 0xf6, 0xd0,
	0x25, 0x28, 0x18, 0x3a, 0xd5, 0xab, 0xca, 0xb2, 0xb2, 0x52, 0x6e, 0xfd, 0xbd, 0x11, 0xad, 0x4b,
	0x23, 0xa1, 0xd0, 0x58, 0xd7, 0xa9, 0xae, 0x71, 0x1d, 0x74, 0x19, 0xca, 0x3d, 0xbe, 0xcf, 0x2b,
	0x51, 0xcd, 0x71, 0x13, 0xb5, 0x86, 0x48, 0xa6, 0x11, 0x24, 0xd3, 0xf8, 0x3f, 0x2b, 0xd6, 0x6d,
	0xdd, 0xdb, 0xd1, 0x40, 0x88, 0xb3, 0xdf, 0xb5, 0xaf, 0x14, 0x28, 0x30, 0x5b, 0x08, 0x41, 0x81,
	0xf6, 0x1d, 0xcc, 0x23, 0x28, 0x69, 0xfc, 0x37, 0xaa, 0x40, 0x8e, 0x18, 0xdc, 0x60, 0x5e, 0xcb,
	0x11, 0x03, 0x5d, 0x01, 0xd0, 0x29, 0x75, 0xc9, 0x56, 0x8f, 0x62, 0xaf, 0x9a, 0xe7, 0x8e, 0x4e,
	0x25, 0x62, 0xf5, 0xb0, 0xbb, 0x36, 0x90, 0xd2, 0x24, 0x0d, 0xf4, 0x1a, 0xcc, 0xba, 0xd8, 0x14,
	0x67, 0xfa, 0x98, 0x38, 0x5e, 0xb5, 0xc0, 0x4d, 0x9c, 0x8d, 0x9b, 0xb8, 0x83, 0x9f, 0x8a, 0x5c,
	0x25, 0x59, 0x2d, 0xaa, 0xaa, 0xbe, 0x52, 0x60, 0xee, 0x9a, 0x8b, 0xc7, 0xab, 0x63, 0x42, 0x41,
	0xaa, 0x63, 0xed, 0xe5, 0xa8, 0x52, 0x44, 0x53, 0xcf, 0xed, 0x3f, 0xf5, 0xfc, 0xde, 0x53, 0xdf,
	0x86, 0x02, 0x93, 0x41, 0xe7, 0x23, 0xc9, 0x56, 0x87, 0x45, 0x23, 0xb5, 0xc9, 0x05, 0x28, 0x12,
	0xab, 0x6d, 0xf6, 0x0c, 0x6c, 0x54, 0xf3, 0xcb, 0xf9, 0x95, 0x72, 0x6b, 0x3e, 0xd1, 0x23, 0x6b,
	0x56, 0x5f, 0x1b, 0x48, 0xa9, 0xbf, 0x28, 0x50, 0x61, 0x46, 0xae, 0xd9, 0xa6, 0x89, 0xdb, 0xcc,
	0xbf, 0xe4, 0x32, 0x9f, 0xc1, 0xe5, 0xff, 0x60, 0xca, 0x24, 0xd6, 0x4e, 0x50, 0x2f, 0xf9, 0x38,
	0x74, 0x87, 0x34, 0xfc, 0x01, 0x69, 0x6c, 0xe8, 0x1d, 0x62, 0xf1, 0xfc, 0x6e, 0x31, 0x69, 0x4d,
	0x28, 0xa1, 0x26, 0x14, 0xba, 0x98, 0xea, 0x7e, 0xa5, 0x4e, 0xa6, 0x28, 0xdf, 0xc6, 0xcc, 0x1d,
	0x13, 0x8c, 0x64, 0x58, 0xc8, 0x94, 0xe1, 0xef, 0x0a, 0x14, 0x83, 0x98, 0x0f, 0x65, 0x02, 0x5a,
	0x41, 0x45, 0x44, 0xe7, 0x2f, 0xa5, 0x24, 0x15, 0xa9, 0xc3, 0xdd, 0x78, 0xeb, 0x4c, 0x71, 0xdd,
	0x7f, 0xc6, 0xdd, 0x5e, 0x7f, 0x46, 0x3c, 0x4a, 0xac, 0xce, 0xee, 0xa3, 0x93, 0x17, 0xe7, 0x1a,
	0xc6, 0x88, 0xfe, 0x0a, 0xb0, 0x4d, 0x5c, 0x8f, 0x6e, 0x5a, 0x7a, 0x37, 0xa8, 0x40, 0x89, 0xaf,
	0xdc, 0xd1, 0xbb, 0x18, 0x9d, 0x84, 0x92, 0xa9, 0x07, 0xbb, 0x39, 0xbe, 0x5b, 0x64, 0x0b, 0x7c,
	0x73, 0x1e, 0xa6, 0x70, 0x57, 0x27, 0x26, 0x2f, 0x47, 0x49, 0x13, 0x0f, 0x48, 0x85, 0x19, 0xdb,
	0xed, 0xe8, 0x16, 0x79, 0xce, 0x3d, 0xf3, 0x84, 0x4b, 0x5a, 0x64, 0x8d, 0x79, 0xed, 0xb8, 0x76,
	0xcf, 0x11, 0x76, 0xa7, 0x84, 0x57, 0xbe, 0xc2, 0x0d, 0x9f, 0x81, 0x59, 0x11, 0x94, 0x6e, 0x18,
	0x2e, 0xf6, 0xbc, 0xea, 0x11, 0x61, 0x83, 0x2f, 0xae, 0x89, 0x35, 0x74, 0x0e, 0x2a, 0x1e, 0x6e,
	0xdb, 0x96, 0x31, 0x90, 0x9a, 0xe6, 0x52, 0xb3, 0x62, 0x35, 0x10, 0x43, 0x50, 0x68, 0x13, 0xda,
	0xaf, 0x16, 0xc5, 0xe1, 0xb2, 0xdf, 0x2c, 0x70, 0x8f, 0xea, 0x14, 0x57, 0x4b, 0x22, 0x70, 0xfe,
	0x80, 0xaa, 0x30, 0xfd, 0x9c, 0x38, 0x6d, 0xdb, 0xc0, 0x55, 0xe0, 0xeb, 0xc1, 0x23, 0xdb, 0x69,
	0xdb, 0x3d, 0x8b, 0xba, 0xfd, 0x6a, 0x59, 0xec, 0xf8, 0x8f, 0xcc, 0x92, 0xf3, 0xd8, 0xb6, 0x70,
	0x75, 0x46, 0x58, 0xe2, 0x0f, 0xac, 0x6a, 0xc4, 0xdb, 0xd4, 0xdb, 0x94, 0x3c, 0xc1, 0xd5, 0xd9,
	0x65, 0x65, 0xa5, 0xa8, 0x15, 0x89, 0xb7, 0xc6, 0x9f, 0xd1, 0x7f, 0x01, 0xda, 0x1c, 0x8d, 0x8c,
	0x4d, 0x9d, 0x56, 0x2b, 0x29, 0xa0, 0x7d, 0x3f, 0xe0, 0x2f, 0xad, 0xe4, 0x4b, 0xaf, 0x51, 0xa6,
	0x2a, 0x10, 0x9c, 0xab, 0x1e, 0xdd, 0x5d, 0xd5, 0x97, 0x5e, 0xa3, 0xea, 0x4f, 0x0a, 0x2c, 0xa6,
	0xf6, 0x09, 0xba, 0x0e, 0x53, 0xae, 0x6d, 0x62, 0xcf, 0x47, 0x94, 0x66, 0xe6, 0x0e, 0x6b, 0x68,
	0x4c, 0x4d, 0x13, 0xda, 0x35, 0x13, 0xa6, 0xf8, 0x73, 0xd8, 0xed, 0x4a, 0xf6, 0x6e, 0x6f, 0xfa,
	0x08, 0x93, 0xe3, 0x03, 0x9c, 0x36, 0xf5, 0x21, 0xc8, 0xa8, 0x1f, 0x2b, 0x30, 0x3f, 0x0c, 0x35,
	0xd1, 0x6a, 0x34, 0x9b, 0x7a, 0x16, 0xa8, 0x8d, 0x26, 0x72, 0x31, 0x48, 0xa4, 0x19, 0x81, 0xbd,
	0x0c, 0x41, 0xfd, 0x30, 0x60, 0x79, 0x66, 0x60, 0x2c, 0x96, 0x97, 0x14, 0x26, 0xc6, 0xf2, 0x5f,
	0x4f, 0x9c, 0xe5, 0x59, 0x94, 0x29, 0x18, 0x77, 0x77, 0x38, 0xcb, 0xa7, 0xe2, 0x95, 0x48, 0x38,
	0x13, 0xd5, 0x8f, 0x51, 0xcc, 0x84, 0xc2, 0x64, 0xa9, 0x7e, 0x44, 0xfe, 0x63, 0x50, 0xfd, 0xae,
	0xa9, 0x6f, 0x43, 0x81, 0xc9, 0xec, 0x46, 0xf5, 0x4c, 0x66, 0x5f, 0x54, 0xff, 0xb9, 0x02, 0x15,
	0x66, 0x24, 0x3b, 0xd5, 0xc7, 0x5c, 0xb6, 0xa2, 0x54, 0x9f, 0x69, 0xd4, 0xc7, 0x0f, 0x93, 0xf1,
	0x75, 0xe0, 0xf8, 0x50, 0x7a, 0xf9, 0x30, 0xf8, 0x7a, 0xd7, 0x26, 0xf8, 0xc6, 0x3f, 0x1c, 0x89,
	0xaf, 0x11, 0x14, 0x18, 0x44, 0x05, 0xb9, 0xb3, 0xdf, 0x68, 0x19, 0xca, 0x06, 0xf6, 0xda, 0x2e,
	0x71, 0x38, 0xe1, 0x0a, 0x9a, 0x96, 0x97, 0xfe, 0x24, 0xce, 0xf9, 0x34, 0x1f, 0x72, 0x4e, 0x22,
	0x57, 0xf4, 0x10, 0xca, 0x0e, 0x76, 0xbb, 0xc4, 0xf3, 0xd8, 0x92, 0xdf, 0xe0, 0xff, 0xc9, 0x5c,
	0xab, 0xc6, 0x46, 0xa8, 0xac, 0xc9, 0x96, 0x18, 0x99, 0x31, 0xd5, 0xa0, 0x23, 0x9b, 0xd9, 0x4d,
	0x32, 0x56, 0xf0, 0x34, 0xa1, 0x5d, 0x73, 0xa1, 0x2c, 0xb9, 0x38, 0x14, 0x4a, 0x63, 0x04, 0xca,
	0x63, 0x38, 0x1c, 0x02, 0x7d, 0x99, 0xe3, 0x04, 0x9a, 0x3c, 0x1a, 0x6d, 0xd8, 0xd1, 0x5c, 0xc8,
	0x02, 0x63, 0xe9, 0xa7, 0xb2, 0x1a, 0x3d, 0x95, 0x7a, 0x26, 0x6b, 0x91, 0x03, 0xb9, 0x12, 0x3d,
	0x90, 0x71, 0xa9, 0x99, 0x91, 0xba, 0x28, 0xee, 0xd8, 0xa4, 0xfe, 0x22, 0x07, 0x0b, 0x82, 0xa3,
	0xc3, 0x00, 0x02, 0x36, 0x5a, 0x8d, 0x00, 0xf4, 0xf9, 0xe1, 0xd4, 0x9e, 0x50, 0x9b, 0x18, 0xc1,
	0x3b, 0x63, 0xf0, 0xfb, 0xfa, 0x10, 0x4c, 0x4c, 0x90, 0x53, 0x18, 0xea, 0x70, 0x64, 0x54, 0xbf,
	0x55, 0x60, 0x41, 0x70, 0xec, 0xd8, 0xc5, 0x48, 0x51, 0x93, 0x0f, 0xe9, 0xcd, 0x11, 0xf9, 0xac,
	0x0f, 0xe1, 0xe7, 0xf1, 0xe3, 0x5f, 0x05, 0x08, 0x65, 0x50, 0x2b, 0x12, 0xf1, 0xa9, 0x74, 0x6b,
	0x52, 0x3b, 0xbc, 0x07, 0xf3, 0xe1, 0xba, 0x44, 0x9c, 0xad, 0x48, 0x5f, 0x65, 0xb2, 0xb5, 0x17,
	0xfa, 0x54, 0xbf, 0x50, 0xa0, 0x12, 0x35, 0x76, 0x78, 0xc7, 0xbf, 0x17, 0x62, 0x54, 0x7f, 0x54,
	0xe4, 0x8a, 0x49, 0x6c, 0x76, 0x0a, 0x20, 0xc4, 0x08, 0x3f, 0x78, 0x69, 0x65, 0x6c, 0x66, 0xcb,
	0xef, 0x9d, 0xd9, 0x0a, 0x63, 0x30, 0x5b, 0xeb, 0xb7, 0x69, 0x28, 0x33, 0x2c, 0xb9, 0x87, 0xdd,
	0x27, 0xa4, 0x8d, 0xd1, 0x43, 0x98, 0xbe, 0x81, 0x29, 0xbf, 0x9b, 0xf9, 0x5b, 0x4a, 0x41, 0x6e,
	0x60, 0xea, 0xb7, 0x7b, 0x6d, 0x7e, 0xd8, 0xbd, 0x81, 0x7a, 0xfc, 0xfd, 0x9f, 0x7f, 0xfd, 0x24,
	0x37, 0x8b, 0xca, 0x4d, 0x0e, 0x77, 0xcd, 0x77, 0x88, 0xf1, 0x2e, 0x7a, 0x06, 0x47, 0xb9, 0xa2,
	0xc9, 0x1c, 0x8b, 0x4f, 0x92, 0x7a, 0x8a, 0x03, 0x19, 0x39, 0x03, 0x4f, 0x43, 0xdf, 0x78, 0xc2,
	0x8e, 0x55, 0x17, 0xb9, 0xcf, 0xe3, 0x68, 0x4e, 0xf2, 0xd9, 0xe4, 0x9f, 0x40, 0x68, 0x13, 0x4a,
	0xb7, 0x88, 0x47, 0x05, 0x62, 0xaa, 0xa9, 0xa7, 0xec, 0xd1, 0x54, 0x5f, 0xd1, 0x1b, 0x24, 0xb5,
	0xc2, 0x7d, 0x15, 0xd1, 0x11, 0xe1, 0x0b, 0x3d, 0x02, 0x08, 0x6f, 0xe5, 0x22, 0x65, 0x1b, 0x7e,
	0x63, 0x97, 0x52, 0xb6, 0x39, 0x6e, 0xb6, 0xac, 0xfa, 0x66, 0x2f, 0x29, 0x75, 0xf4, 0x81, 0x02,
	0x27, 0xe4, 0xaf, 0x80, 0xb0, 0x2e, 0xe8, 0xdc, 0x08, 0xb0, 0x0f, 0x63, 0xad, 0x9d, 0x48, 0xb4,
	0xc1, 0xf5, 0xae, 0x43, 0xfb, 0x6a, 0x9d, 0x3b, 0x3b, 0xab, 0x9e, 0x8e, 0xd4, 0x4b, 0xa6, 0x2c,
	0x51, 0x3d, 0x16, 0xc5, 0x23, 0x80, 0xf0, 0xf6, 0x36, 0x99, 0x5f, 0xe2, 0x66, 0x77, 0x74, 0x7e,
	0xad, 0x58, 0x7e, 0xf2, 0x27, 0xe3, 0xc4, 0xf3, 0x6b, 0x65, 0xc9, 0x6f, 0x13, 0x60, 0x1d, 0x9b,
	0xd8, 0xcf, 0xef, 0x6c, 0x9a, 0x63, 0x2e, 0x12, 0xa4, 0x98, 0xe6, 0xd7, 0xef, 0xfd, 0x7a, 0xa4,
	0xf7, 0x59, 0x9a, 0xbe, 0xfa, 0xc1, 0xa4, 0x59, 0xcf, 0x90, 0x66, 0xeb, 0xcb, 0x19, 0x28, 0x33,
	0xff, 0xd1, 0x51, 0xe7, 0xdf, 0x66, 0x7b, 0x19, 0x75, 0xa6, 0x28, 0x8d, 0x3a, 0x77, 0x33, 0x64,
	0xd4, 0xc5, 0xd8, 0xed, 0x6b, 0xd4, 0x63, 0xe3, 0x17, 0x8e, 0x7a, 0xe8, 0xd3, 0x9f, 0xc4, 0x17,
	0x0a, 0xfc, 0x25, 0x74, 0x2d, 0xbf, 0x63, 0x8d, 0x13, 0xc0, 0x08, 0x2a, 0x91, 0xc2, 0x38, 0xcd,
	0xc3, 0x58, 0x44, 0x0b, 0x72, 0x18, 0xf2, 0x7b, 0x22, 0x16, 0xb8, 0x23, 0xb0, 0x6e, 0x25, 0xc5,
	0xff, 0x3d, 0xd2, 0x75, 0x4c, 0x3c, 0x12, 0x7d, 0x62, 0x48, 0x17, 0xa2, 0x8f, 0x80, 0xb7, 0x01,
	0xfa, 0x24, 0x4e, 0x72, 0xf8, 0x25, 0x42, 0xca, 0x49, 0x86, 0xe8, 0x33, 0x98, 0x8b, 0x10, 0x7d,
	0xe2, 0x97, 0x4c, 0x93, 0x43, 0x1f, 0xa9, 0x76, 0xd1, 0xb6, 0x1d, 0x60, 0xc4, 0x87, 0x0a, 0x2c,
	0x25, 0x5f, 0xb7, 0x26, 0x17, 0x4b, 0x83, 0xc7, 0xb2, 0xa2, 0x9e, 0x49, 0x39, 0x47, 0xf9, 0x77,
	0x04, 0x0d, 0x87, 0xd7, 0x3b, 0x71, 0x03, 0x36, 0xba, 0xde, 0xad, 0x58, 0xbd, 0x65, 0x30, 0x3d,
	0x08, 0x34, 0xdc, 0xbd, 0xde, 0x1f, 0x29, 0xb0, 0x94, 0x7c, 0xd7, 0x9f, 0x5c, 0x2c, 0x17, 0x78,
	0x2c, 0xf5, 0xd6, 0xb9, 0xf4, 0x58, 0x62, 0x15, 0x1f, 0xe0, 0x33, 0xaf, 0xf8, 0xa4, 0xf0, 0x59,
	0x02, 0xac, 0x10, 0x9f, 0x0f, 0xa8, 0xf0, 0xf5, 0xac, 0x85, 0x17, 0x51, 0x1c, 0x68, 0xe1, 0xeb,
	0x99, 0x0b, 0xdf, 0xfa, 0xbe, 0x00, 0x73, 0x61, 0x2c, 0x01, 0x6f, 0x10, 0x98, 0xbd, 0x81, 0xa9,
	0xf4, 0xe5, 0x91, 0x81, 0x3d, 0x6a, 0xe9, 0x90, 0x2a, 0xe1, 0xb9, 0x3c, 0x75, 0xfc, 0x60, 0x9e,
	0xc2, 0x51, 0x06, 0x8d, 0x32, 0x90, 0x67, 0x07, 0xd2, 0x6c, 0x30, 0x3e, 0xcf, 0xbd, 0x57, 0xd0,
	0x4c, 0x04, 0xbb, 0x1d, 0x38, 0x16, 0xc7, 0x1c, 0xf4, 0x8f, 0x8c, 0x1f, 0x81, 0x23, 0x93, 0x5d,
	0xe0, 0xee, 0xe6, 0xd4, 0x99, 0x78, 0x93, 0x3b, 0x70, 0x2c, 0x3e, 0x75, 0x49, 0x8f, 0x29, 0xdf,
	0xe0, 0x59, 0x3c, 0xb6, 0x12, 0x1e, 0x77, 0xe0, 0x58, 0xbc, 0xdd, 0xf6, 0x39, 0x5c, 0xfe, 0x49,
	0xd6, 0x93, 0x27, 0x79, 0x95, 0x00, 0xb2, 0xdd, 0x4e, 0x2c, 0xcc, 0xab, 0x25, 0x36, 0x6f, 0x1b,
	0xcc, 0xc8, 0x86, 0xf2, 0xc6, 0xc5, 0x0e, 0xa1, 0x8f, 0x7b, 0x5b, 0x8d, 0xb6, 0xdd, 0x6d, 0x72,
	0xb9, 0xab, 0xba, 0x87, 0x9b, 0x1d, 0xfb, 0x5f, 0x1d, 0x6c, 0x71, 0x47, 0xcd, 0x81, 0xb6, 0xee,
	0x10, 0x31, 0x38, 0x97, 0xd9, 0x9f, 0x57, 0x8a, 0xf2, 0x59, 0xae, 0xb8, 0x7e, 0xf3, 0xda, 0xfd,
	0xd7, 0xd7, 0x36, 0x6e, 0x6e, 0x1d, 0xe1, 0xc2, 0xff, 0xfe, 0x23, 0x00, 0x00, 0xff, 0xff, 0xe1,
	0xac, 0xa1, 0xc0, 0xa6, 0x21, 0x00, 0x00,
}
