// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content.proto

package content

import (
	_ "."
	context "context"
	fmt "fmt"
	jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Content struct {
	Data                 *ContentData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Links                *jsonapi.Links `protobuf:"bytes,2,opt,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{0}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetData() *ContentData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Content) GetLinks() *jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

type ContentData struct {
	// The resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Unique id
	Id                   int64              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *ContentAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Links                *jsonapi.Links     `protobuf:"bytes,4,opt,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ContentData) Reset()         { *m = ContentData{} }
func (m *ContentData) String() string { return proto.CompactTextString(m) }
func (*ContentData) ProtoMessage()    {}
func (*ContentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{1}
}

func (m *ContentData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentData.Unmarshal(m, b)
}
func (m *ContentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentData.Marshal(b, m, deterministic)
}
func (m *ContentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentData.Merge(m, src)
}
func (m *ContentData) XXX_Size() int {
	return xxx_messageInfo_ContentData.Size(m)
}
func (m *ContentData) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentData.DiscardUnknown(m)
}

var xxx_messageInfo_ContentData proto.InternalMessageInfo

func (m *ContentData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ContentData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ContentData) GetAttributes() *ContentAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ContentData) GetLinks() *jsonapi.Links {
	if m != nil {
		return m.Links
	}
	return nil
}

// Definition of various content fields
type ContentAttributes struct {
	// page name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// page slug. Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	// id of the user who created the content
	CreatedBy int64 `protobuf:"varint,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// id of the user who updated the content
	UpdatedBy int64 `protobuf:"varint,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Timestamp for creation and update
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// serialized page content(for example serialized draft js object)
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	// namespace for the page
	Namespace            string   `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentAttributes) Reset()         { *m = ContentAttributes{} }
func (m *ContentAttributes) String() string { return proto.CompactTextString(m) }
func (*ContentAttributes) ProtoMessage()    {}
func (*ContentAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{2}
}

func (m *ContentAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentAttributes.Unmarshal(m, b)
}
func (m *ContentAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentAttributes.Marshal(b, m, deterministic)
}
func (m *ContentAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentAttributes.Merge(m, src)
}
func (m *ContentAttributes) XXX_Size() int {
	return xxx_messageInfo_ContentAttributes.Size(m)
}
func (m *ContentAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ContentAttributes proto.InternalMessageInfo

func (m *ContentAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContentAttributes) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *ContentAttributes) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *ContentAttributes) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *ContentAttributes) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ContentAttributes) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ContentAttributes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ContentAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ContentRequest struct {
	// Url slug
	// Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
	// The slug name should be unique
	Slug                 string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentRequest) Reset()         { *m = ContentRequest{} }
func (m *ContentRequest) String() string { return proto.CompactTextString(m) }
func (*ContentRequest) ProtoMessage()    {}
func (*ContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{3}
}

func (m *ContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentRequest.Unmarshal(m, b)
}
func (m *ContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentRequest.Marshal(b, m, deterministic)
}
func (m *ContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentRequest.Merge(m, src)
}
func (m *ContentRequest) XXX_Size() int {
	return xxx_messageInfo_ContentRequest.Size(m)
}
func (m *ContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContentRequest proto.InternalMessageInfo

func (m *ContentRequest) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

type ContentIdRequest struct {
	// Unique id to identify content
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentIdRequest) Reset()         { *m = ContentIdRequest{} }
func (m *ContentIdRequest) String() string { return proto.CompactTextString(m) }
func (*ContentIdRequest) ProtoMessage()    {}
func (*ContentIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{4}
}

func (m *ContentIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentIdRequest.Unmarshal(m, b)
}
func (m *ContentIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentIdRequest.Marshal(b, m, deterministic)
}
func (m *ContentIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentIdRequest.Merge(m, src)
}
func (m *ContentIdRequest) XXX_Size() int {
	return xxx_messageInfo_ContentIdRequest.Size(m)
}
func (m *ContentIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContentIdRequest proto.InternalMessageInfo

func (m *ContentIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Definition for fields that are needed for storing the content
type NewContentAttributes struct {
	// page name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// user id who is creating this content
	// The existence of user will be verified(not implemented yet)
	// using the `user` microservice backend.
	CreatedBy int64 `protobuf:"varint,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// page content, expected to be serialized `JSON` string.
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// namespace for the page, it is prepended to the
	// name to generate an unique slug.
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewContentAttributes) Reset()         { *m = NewContentAttributes{} }
func (m *NewContentAttributes) String() string { return proto.CompactTextString(m) }
func (*NewContentAttributes) ProtoMessage()    {}
func (*NewContentAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{5}
}

func (m *NewContentAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewContentAttributes.Unmarshal(m, b)
}
func (m *NewContentAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewContentAttributes.Marshal(b, m, deterministic)
}
func (m *NewContentAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewContentAttributes.Merge(m, src)
}
func (m *NewContentAttributes) XXX_Size() int {
	return xxx_messageInfo_NewContentAttributes.Size(m)
}
func (m *NewContentAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NewContentAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NewContentAttributes proto.InternalMessageInfo

func (m *NewContentAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewContentAttributes) GetCreatedBy() int64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *NewContentAttributes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewContentAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Definition for storing new content
type StoreContentRequest struct {
	Data                 *StoreContentRequest_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StoreContentRequest) Reset()         { *m = StoreContentRequest{} }
func (m *StoreContentRequest) String() string { return proto.CompactTextString(m) }
func (*StoreContentRequest) ProtoMessage()    {}
func (*StoreContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{6}
}

func (m *StoreContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreContentRequest.Unmarshal(m, b)
}
func (m *StoreContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreContentRequest.Marshal(b, m, deterministic)
}
func (m *StoreContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreContentRequest.Merge(m, src)
}
func (m *StoreContentRequest) XXX_Size() int {
	return xxx_messageInfo_StoreContentRequest.Size(m)
}
func (m *StoreContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StoreContentRequest proto.InternalMessageInfo

func (m *StoreContentRequest) GetData() *StoreContentRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type StoreContentRequest_Data struct {
	// resource name
	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes           *NewContentAttributes `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StoreContentRequest_Data) Reset()         { *m = StoreContentRequest_Data{} }
func (m *StoreContentRequest_Data) String() string { return proto.CompactTextString(m) }
func (*StoreContentRequest_Data) ProtoMessage()    {}
func (*StoreContentRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{6, 0}
}

func (m *StoreContentRequest_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreContentRequest_Data.Unmarshal(m, b)
}
func (m *StoreContentRequest_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreContentRequest_Data.Marshal(b, m, deterministic)
}
func (m *StoreContentRequest_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreContentRequest_Data.Merge(m, src)
}
func (m *StoreContentRequest_Data) XXX_Size() int {
	return xxx_messageInfo_StoreContentRequest_Data.Size(m)
}
func (m *StoreContentRequest_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreContentRequest_Data.DiscardUnknown(m)
}

var xxx_messageInfo_StoreContentRequest_Data proto.InternalMessageInfo

func (m *StoreContentRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StoreContentRequest_Data) GetAttributes() *NewContentAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Fields that can be updated
// Changing either or both of name and namespace
// attributes alter the slug for the page
type ExistingContentAttributes struct {
	// user id who is updating this content
	// The existence of user will be verified(not implemented yet)
	// using the `user` microservice backend.
	UpdatedBy int64 `protobuf:"varint,1,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// serialized page content(for example serialized draft js object)
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistingContentAttributes) Reset()         { *m = ExistingContentAttributes{} }
func (m *ExistingContentAttributes) String() string { return proto.CompactTextString(m) }
func (*ExistingContentAttributes) ProtoMessage()    {}
func (*ExistingContentAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{7}
}

func (m *ExistingContentAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistingContentAttributes.Unmarshal(m, b)
}
func (m *ExistingContentAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistingContentAttributes.Marshal(b, m, deterministic)
}
func (m *ExistingContentAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingContentAttributes.Merge(m, src)
}
func (m *ExistingContentAttributes) XXX_Size() int {
	return xxx_messageInfo_ExistingContentAttributes.Size(m)
}
func (m *ExistingContentAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingContentAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingContentAttributes proto.InternalMessageInfo

func (m *ExistingContentAttributes) GetUpdatedBy() int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *ExistingContentAttributes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UpdateContentRequest struct {
	Data *UpdateContentRequest_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Id   int64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// An optional mask specifying which fields to update.
	// Presence of this field allow partial updates.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateContentRequest) Reset()         { *m = UpdateContentRequest{} }
func (m *UpdateContentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateContentRequest) ProtoMessage()    {}
func (*UpdateContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{8}
}

func (m *UpdateContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateContentRequest.Unmarshal(m, b)
}
func (m *UpdateContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateContentRequest.Marshal(b, m, deterministic)
}
func (m *UpdateContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContentRequest.Merge(m, src)
}
func (m *UpdateContentRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateContentRequest.Size(m)
}
func (m *UpdateContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContentRequest proto.InternalMessageInfo

func (m *UpdateContentRequest) GetData() *UpdateContentRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateContentRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateContentRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type UpdateContentRequest_Data struct {
	// resource name
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// unique id
	Id                   int64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *ExistingContentAttributes `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *UpdateContentRequest_Data) Reset()         { *m = UpdateContentRequest_Data{} }
func (m *UpdateContentRequest_Data) String() string { return proto.CompactTextString(m) }
func (*UpdateContentRequest_Data) ProtoMessage()    {}
func (*UpdateContentRequest_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_61cc9617ce0cf609, []int{8, 0}
}

func (m *UpdateContentRequest_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateContentRequest_Data.Unmarshal(m, b)
}
func (m *UpdateContentRequest_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateContentRequest_Data.Marshal(b, m, deterministic)
}
func (m *UpdateContentRequest_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContentRequest_Data.Merge(m, src)
}
func (m *UpdateContentRequest_Data) XXX_Size() int {
	return xxx_messageInfo_UpdateContentRequest_Data.Size(m)
}
func (m *UpdateContentRequest_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContentRequest_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContentRequest_Data proto.InternalMessageInfo

func (m *UpdateContentRequest_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdateContentRequest_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateContentRequest_Data) GetAttributes() *ExistingContentAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*Content)(nil), "dictybase.content.Content")
	proto.RegisterType((*ContentData)(nil), "dictybase.content.ContentData")
	proto.RegisterType((*ContentAttributes)(nil), "dictybase.content.ContentAttributes")
	proto.RegisterType((*ContentRequest)(nil), "dictybase.content.ContentRequest")
	proto.RegisterType((*ContentIdRequest)(nil), "dictybase.content.ContentIdRequest")
	proto.RegisterType((*NewContentAttributes)(nil), "dictybase.content.NewContentAttributes")
	proto.RegisterType((*StoreContentRequest)(nil), "dictybase.content.StoreContentRequest")
	proto.RegisterType((*StoreContentRequest_Data)(nil), "dictybase.content.StoreContentRequest.Data")
	proto.RegisterType((*ExistingContentAttributes)(nil), "dictybase.content.ExistingContentAttributes")
	proto.RegisterType((*UpdateContentRequest)(nil), "dictybase.content.UpdateContentRequest")
	proto.RegisterType((*UpdateContentRequest_Data)(nil), "dictybase.content.UpdateContentRequest.Data")
}

func init() { proto.RegisterFile("content.proto", fileDescriptor_61cc9617ce0cf609) }

var fileDescriptor_61cc9617ce0cf609 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x2e, 0x69, 0xf9, 0x47, 0xe3, 0x58, 0x55, 0x36, 0x4e, 0xaa, 0xb0, 0x4e, 0xed, 0x32, 0x4e,
	0x13, 0x24, 0x36, 0x59, 0xa8, 0xa7, 0x34, 0x40, 0x5b, 0x31, 0x4e, 0x53, 0x03, 0x69, 0x61, 0xd0,
	0x29, 0xd0, 0x5f, 0x04, 0x2b, 0x71, 0x43, 0x6f, 0x4d, 0x91, 0x0c, 0xb9, 0x4a, 0x43, 0x07, 0xb9,
	0xf4, 0xd4, 0x7b, 0x1f, 0xa0, 0x40, 0x2f, 0x3d, 0xf4, 0xd0, 0x07, 0xe8, 0x63, 0xf4, 0x01, 0x02,
	0x04, 0x7d, 0x88, 0x1e, 0x83, 0x5d, 0x2e, 0xff, 0x44, 0x4a, 0xd1, 0x45, 0x5c, 0xee, 0x7c, 0x33,
	0xdf, 0xcc, 0xb7, 0x33, 0x2b, 0xc2, 0xc6, 0x28, 0xf0, 0x19, 0xf1, 0x99, 0x11, 0x46, 0x01, 0x0b,
	0xd0, 0x79, 0x87, 0x8e, 0x58, 0x32, 0xc4, 0x31, 0x31, 0xa4, 0x41, 0xdb, 0x72, 0x83, 0xc0, 0xf5,
	0x88, 0x89, 0x43, 0x6a, 0x62, 0xdf, 0x0f, 0x18, 0x66, 0x34, 0xf0, 0xe3, 0xd4, 0x41, 0xdb, 0x91,
	0x56, 0xf1, 0x36, 0x9c, 0x3c, 0x36, 0x1f, 0x53, 0xe2, 0x39, 0x8f, 0xc6, 0x38, 0x3e, 0x95, 0x88,
	0xed, 0x69, 0x04, 0xa3, 0x63, 0x12, 0x33, 0x3c, 0x0e, 0x25, 0xe0, 0xdd, 0x69, 0x00, 0x19, 0x87,
	0x2c, 0x91, 0xc6, 0xab, 0x79, 0x42, 0x22, 0x81, 0x9f, 0xe2, 0xc0, 0xe7, 0xcf, 0x10, 0x27, 0x5e,
	0x80, 0x9d, 0xf9, 0xa0, 0x88, 0x3c, 0x99, 0x90, 0x58, 0x96, 0xa6, 0xbd, 0xfd, 0x14, 0x7b, 0xd4,
	0xc1, 0x2c, 0x88, 0xd2, 0x0d, 0xfd, 0x09, 0xac, 0xde, 0x4d, 0x6b, 0x44, 0x7d, 0x68, 0x39, 0x98,
	0xe1, 0x9e, 0xb2, 0xa3, 0xdc, 0x58, 0xef, 0xbf, 0x67, 0xd4, 0x54, 0x30, 0x24, 0xf2, 0x00, 0x33,
	0x6c, 0x0b, 0x2c, 0xea, 0xc3, 0xb2, 0x47, 0xfd, 0xd3, 0xb8, 0xa7, 0x0a, 0xa7, 0xad, 0x92, 0x13,
	0x0e, 0xa9, 0x21, 0x93, 0x30, 0x1e, 0x70, 0x8c, 0x9d, 0x42, 0xf5, 0xbf, 0x14, 0x58, 0x2f, 0x45,
	0x42, 0x08, 0x5a, 0x2c, 0x09, 0x89, 0xe0, 0x6d, 0xdb, 0x62, 0x8d, 0x3a, 0xa0, 0x52, 0x47, 0x04,
	0x5d, 0xb2, 0x55, 0xea, 0xa0, 0x03, 0x00, 0xcc, 0x58, 0x44, 0x87, 0x13, 0x46, 0xe2, 0xde, 0x92,
	0x20, 0xdb, 0x9d, 0x9d, 0xe1, 0x20, 0xc7, 0xda, 0x25, 0xbf, 0x22, 0xdb, 0xd6, 0xe2, 0xd9, 0xfe,
	0xa9, 0xc2, 0xf9, 0x5a, 0x54, 0x9e, 0xb3, 0x8f, 0xc7, 0x79, 0xce, 0x7c, 0xcd, 0xf7, 0x62, 0x6f,
	0xe2, 0x8a, 0xac, 0xdb, 0xb6, 0x58, 0xa3, 0x2b, 0x00, 0xa3, 0x88, 0x60, 0x46, 0x9c, 0x47, 0xc3,
	0x44, 0xe4, 0xbd, 0x64, 0xb7, 0xe5, 0x8e, 0x95, 0x70, 0xf3, 0x24, 0x74, 0x32, 0x73, 0x2b, 0x35,
	0xcb, 0x1d, 0x2b, 0x41, 0xb7, 0x0b, 0x6f, 0xcc, 0x7a, 0xcb, 0x22, 0x69, 0xcd, 0x48, 0x3b, 0xc5,
	0xc8, 0x3a, 0xc5, 0x78, 0x98, 0xb5, 0x52, 0x1e, 0x79, 0xc0, 0xb8, 0x6b, 0x16, 0x19, 0xb3, 0xde,
	0xca, 0x9b, 0x5d, 0x25, 0x7a, 0xc0, 0x50, 0x0f, 0x56, 0xa5, 0x9c, 0xbd, 0x55, 0x51, 0x4a, 0xf6,
	0x8a, 0xb6, 0xa0, 0xcd, 0x2b, 0x8d, 0x43, 0x3c, 0x22, 0xbd, 0x35, 0x61, 0x2b, 0x36, 0xf4, 0x5d,
	0xe8, 0x48, 0xa1, 0xec, 0xb4, 0xe7, 0x72, 0x45, 0x94, 0x42, 0x11, 0x5d, 0x87, 0xae, 0x44, 0x1d,
	0x3a, 0x19, 0x2e, 0x3d, 0x6d, 0x25, 0x3b, 0x6d, 0xfd, 0x6f, 0x05, 0x36, 0xbf, 0x22, 0x3f, 0xd7,
	0x65, 0xbf, 0x51, 0x96, 0xdd, 0xda, 0x7c, 0xf5, 0x72, 0xbb, 0x0b, 0x9d, 0xef, 0xf1, 0xfe, 0xd9,
	0xde, 0x60, 0xff, 0x6c, 0xef, 0xc3, 0xfd, 0xdb, 0x3f, 0xde, 0x92, 0x87, 0x71, 0xad, 0x22, 0xbc,
	0x68, 0x24, 0x6b, 0xe5, 0xd5, 0xcb, 0x6d, 0xb5, 0xfb, 0x56, 0xf9, 0x00, 0x76, 0x8a, 0x5a, 0x97,
	0x44, 0x4c, 0x81, 0xf9, 0x46, 0x29, 0x6a, 0xde, 0x2d, 0xd7, 0xdc, 0xaa, 0x60, 0x4a, 0xb5, 0xff,
	0xa3, 0xc0, 0x85, 0x63, 0x16, 0x44, 0x64, 0x4a, 0x81, 0x4f, 0x2b, 0x33, 0x75, 0xab, 0xa1, 0x63,
	0x1b, 0xbc, 0x8c, 0x62, 0xc0, 0xb4, 0x11, 0xb4, 0x66, 0x0e, 0xc9, 0xfd, 0xca, 0x50, 0xa4, 0x13,
	0x78, 0xbd, 0x81, 0xa2, 0x49, 0xca, 0xf2, 0x5c, 0xe8, 0x0e, 0x5c, 0xbe, 0xf7, 0x8c, 0xc6, 0x8c,
	0xfa, 0x6e, 0x5d, 0xf3, 0x6b, 0x95, 0x1e, 0x55, 0xaa, 0x4a, 0x16, 0xbd, 0x5a, 0x52, 0x52, 0x6d,
	0x54, 0x52, 0xff, 0x5d, 0x85, 0xcd, 0xaf, 0x05, 0x7e, 0x4a, 0xa4, 0xcf, 0x2a, 0x22, 0xed, 0x35,
	0x54, 0xd0, 0xe4, 0x56, 0x52, 0xa9, 0x76, 0x5d, 0xdc, 0x81, 0xf5, 0x34, 0x33, 0x71, 0x07, 0xcb,
	0xfb, 0xa2, 0xde, 0xfe, 0x9f, 0xf3, 0x6b, 0xfa, 0x4b, 0x1c, 0x9f, 0xda, 0xb2, 0x44, 0xbe, 0xd6,
	0x9e, 0xcd, 0x91, 0x7c, 0x9a, 0xe8, 0x41, 0xc3, 0xbd, 0xd4, 0x54, 0xc0, 0x4c, 0x79, 0xcb, 0xe7,
	0xd0, 0xff, 0x75, 0x39, 0x1f, 0xa1, 0x63, 0x12, 0x3d, 0xa5, 0x23, 0x82, 0x42, 0xe8, 0xde, 0x27,
	0x4c, 0x6e, 0x5a, 0xc9, 0x31, 0xbf, 0x54, 0xde, 0x9f, 0x7d, 0xf1, 0x49, 0x6d, 0x34, 0x6d, 0x36,
	0x44, 0xbf, 0xf2, 0xcb, 0xbf, 0xff, 0xfd, 0xa6, 0xbe, 0x83, 0x2e, 0x9a, 0xd2, 0x12, 0x9b, 0x7c,
	0x32, 0xcd, 0xe7, 0xfc, 0xf7, 0x05, 0x22, 0x00, 0x05, 0x23, 0xba, 0x3a, 0x3b, 0x50, 0x3e, 0xbf,
	0x73, 0xd9, 0x2e, 0x09, 0xb6, 0x2e, 0xea, 0x14, 0x6c, 0xcf, 0xa9, 0xf3, 0x02, 0x9d, 0xc0, 0xb9,
	0x72, 0xeb, 0xa3, 0x0f, 0x16, 0x9b, 0x8d, 0xb9, 0x5c, 0x9b, 0x82, 0xab, 0xa3, 0xb7, 0x73, 0xae,
	0x8f, 0x95, 0x9b, 0x28, 0x80, 0x8d, 0x4a, 0xff, 0xa0, 0xeb, 0x0b, 0x76, 0xd8, 0x5c, 0xae, 0xcb,
	0x82, 0xeb, 0x42, 0x7f, 0xaa, 0x2e, 0x4e, 0xe8, 0xc0, 0xc6, 0x01, 0xf1, 0x48, 0x41, 0xb8, 0x90,
	0x88, 0x97, 0x6a, 0xed, 0x79, 0x8f, 0x7f, 0x02, 0x64, 0x02, 0xde, 0x9c, 0x16, 0xf0, 0x07, 0x58,
	0xfd, 0x82, 0x60, 0x8f, 0x9d, 0x9c, 0x55, 0x0a, 0x2a, 0xff, 0x91, 0x49, 0xfb, 0x9b, 0x39, 0xba,
	0x82, 0x03, 0xd0, 0x9a, 0x79, 0x92, 0xba, 0x58, 0x13, 0xb8, 0x18, 0x44, 0x6e, 0x3d, 0x6f, 0xeb,
	0x9c, 0x4c, 0xfc, 0x88, 0x47, 0x38, 0x52, 0xbe, 0xfb, 0xc4, 0xa5, 0xec, 0x64, 0x32, 0x34, 0x46,
	0xc1, 0xd8, 0x14, 0x68, 0x8b, 0x7f, 0x81, 0xb8, 0xc1, 0xbe, 0x4b, 0x7c, 0xc1, 0x62, 0xe6, 0x31,
	0x70, 0x48, 0xe3, 0xac, 0x88, 0x3b, 0xf2, 0xf9, 0xbf, 0xa2, 0xfc, 0xa1, 0xae, 0x1d, 0x1c, 0xde,
	0x7d, 0xf8, 0xed, 0xe0, 0xe8, 0x70, 0xb8, 0x22, 0x5c, 0x3e, 0x7a, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0x8b, 0xe1, 0xbd, 0x92, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentServiceClient interface {
	// Gets the content of specified page(slug)
	GetContentBySlug(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error)
	GetContent(ctx context.Context, in *ContentIdRequest, opts ...grpc.CallOption) (*Content, error)
	// Store the content of a new page(slug)
	StoreContent(ctx context.Context, in *StoreContentRequest, opts ...grpc.CallOption) (*Content, error)
	// Update the content of an existing page
	UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*Content, error)
	// Delete an existing page along with its content
	DeleteContent(ctx context.Context, in *ContentIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Basic health check that always return success
	Healthz(ctx context.Context, in *jsonapi.HealthzIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type contentServiceClient struct {
	cc *grpc.ClientConn
}

func NewContentServiceClient(cc *grpc.ClientConn) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) GetContentBySlug(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/dictybase.content.ContentService/GetContentBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetContent(ctx context.Context, in *ContentIdRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/dictybase.content.ContentService/GetContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) StoreContent(ctx context.Context, in *StoreContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/dictybase.content.ContentService/StoreContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/dictybase.content.ContentService/UpdateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteContent(ctx context.Context, in *ContentIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.content.ContentService/DeleteContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Healthz(ctx context.Context, in *jsonapi.HealthzIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.content.ContentService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
type ContentServiceServer interface {
	// Gets the content of specified page(slug)
	GetContentBySlug(context.Context, *ContentRequest) (*Content, error)
	GetContent(context.Context, *ContentIdRequest) (*Content, error)
	// Store the content of a new page(slug)
	StoreContent(context.Context, *StoreContentRequest) (*Content, error)
	// Update the content of an existing page
	UpdateContent(context.Context, *UpdateContentRequest) (*Content, error)
	// Delete an existing page along with its content
	DeleteContent(context.Context, *ContentIdRequest) (*empty.Empty, error)
	// Basic health check that always return success
	Healthz(context.Context, *jsonapi.HealthzIdRequest) (*empty.Empty, error)
}

// UnimplementedContentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (*UnimplementedContentServiceServer) GetContentBySlug(ctx context.Context, req *ContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentBySlug not implemented")
}
func (*UnimplementedContentServiceServer) GetContent(ctx context.Context, req *ContentIdRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (*UnimplementedContentServiceServer) StoreContent(ctx context.Context, req *StoreContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreContent not implemented")
}
func (*UnimplementedContentServiceServer) UpdateContent(ctx context.Context, req *UpdateContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContent not implemented")
}
func (*UnimplementedContentServiceServer) DeleteContent(ctx context.Context, req *ContentIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (*UnimplementedContentServiceServer) Healthz(ctx context.Context, req *jsonapi.HealthzIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_GetContentBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetContentBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.content.ContentService/GetContentBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetContentBySlug(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.content.ContentService/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetContent(ctx, req.(*ContentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_StoreContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).StoreContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.content.ContentService/StoreContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).StoreContent(ctx, req.(*StoreContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.content.ContentService/UpdateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateContent(ctx, req.(*UpdateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.content.ContentService/DeleteContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteContent(ctx, req.(*ContentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jsonapi.HealthzIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.content.ContentService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Healthz(ctx, req.(*jsonapi.HealthzIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContentBySlug",
			Handler:    _ContentService_GetContentBySlug_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _ContentService_GetContent_Handler,
		},
		{
			MethodName: "StoreContent",
			Handler:    _ContentService_StoreContent_Handler,
		},
		{
			MethodName: "UpdateContent",
			Handler:    _ContentService_UpdateContent_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _ContentService_DeleteContent_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _ContentService_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
