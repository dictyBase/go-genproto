// Code generated by protoc-gen-go. DO NOT EDIT.
// source: request.proto

package jsonapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A `GetRequest` defines various url and query parameters that could be passed
// in a HTTP **GET** request to a singular resource. Majority of the request
// parameters are identical or similar to [jsonapi](http://jsonapi.org).
type GetRequest struct {
	// An unique identifier, for example:
	// "/users/34"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// include query parameter to retrieve any particular or particular
	// combination of relationships. Multiple include values are delimited by
	// comma(,).
	//
	// For example,
	//      /{resource_name}/13?include=baz
	//      /{resource_name}/13?include=baz,bot
	Include string `protobuf:"bytes,2,opt,name=include" json:"include,omitempty"`
	// fields query parameter to retrieve any particular or any particular
	// combination of attributes. Multiple fields values are delimited by comma(,).
	//
	// For example
	//      /{resource_name}/29?fields=foo
	//      /{resource_name}/?fields=foo,bar
	Fields string `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetRequest) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *GetRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

// A `GetEmailRequest` is identical to GetRequest except `email` id used as unique identifier.
type GetEmailRequest struct {
	// Email id
	// "/users/newman@seinfeld.org"
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	// include query parameter to retrieve any particular or particular
	// combination of relationships. Multiple include values are delimited by
	// comma(,).
	//
	// For example,
	//          /{resource_name}/13?include=baz
	//          /{resource_name}/13?include=baz,bot
	Include string `protobuf:"bytes,2,opt,name=include" json:"include,omitempty"`
	// fields query parameter to retrieve any particular or any particular
	// combination of attributes. Multiple fields values are delimited by comma(,).
	//
	// For example,
	//          /{resource_name}/29?fields=foo
	//          /{resource_name}/?fields=foo,bar
	Fields string `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
}

func (m *GetEmailRequest) Reset()                    { *m = GetEmailRequest{} }
func (m *GetEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEmailRequest) ProtoMessage()               {}
func (*GetEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetEmailRequest) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *GetEmailRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

// A `GetRequestWithFields` is a subset of GetRequest which only allow the fields parameter.
type GetRequestWithFields struct {
	// An unique identifier, for example:
	// "/users/34"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// fields query parameter to retrieve any particular or any particular
	// combination of attributes. Multiple fields values are delimited by comma(,).
	//
	// For example
	// /{resource_name}/29?fields=foo
	// /{resource_name}/?fields=foo,bar
	Fields string `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *GetRequestWithFields) Reset()                    { *m = GetRequestWithFields{} }
func (m *GetRequestWithFields) String() string            { return proto.CompactTextString(m) }
func (*GetRequestWithFields) ProtoMessage()               {}
func (*GetRequestWithFields) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetRequestWithFields) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetRequestWithFields) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

// A `RelationshipRequest` defines the url parameter for relationship resources
// that are given in the links field of relationship object
type RelationshipRequest struct {
	// An unique identifier, for example:
	// "/users/45/roles" or "/users/45/relationships/roles"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RelationshipRequest) Reset()                    { *m = RelationshipRequest{} }
func (m *RelationshipRequest) String() string            { return proto.CompactTextString(m) }
func (*RelationshipRequest) ProtoMessage()               {}
func (*RelationshipRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RelationshipRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// A `RelationshipRequestWithPagination` is a `RelationshipRequest` with pagination
type RelationshipRequestWithPagination struct {
	Id       int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pagenum  int64 `protobuf:"varint,4,opt,name=pagenum" json:"pagenum,omitempty"`
	Pagesize int64 `protobuf:"varint,3,opt,name=pagesize" json:"pagesize,omitempty"`
}

func (m *RelationshipRequestWithPagination) Reset()         { *m = RelationshipRequestWithPagination{} }
func (m *RelationshipRequestWithPagination) String() string { return proto.CompactTextString(m) }
func (*RelationshipRequestWithPagination) ProtoMessage()    {}
func (*RelationshipRequestWithPagination) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{4}
}

func (m *RelationshipRequestWithPagination) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RelationshipRequestWithPagination) GetPagenum() int64 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

func (m *RelationshipRequestWithPagination) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

// A `ListRequest` defines various url and query parameters that could be
// passed in a HTTP **GET** request to a collection resource. All collection
// resources are expected to support pagination. Majority of the request
// parameters are identical or similar to [jsonapi](http://jsonapi.org).
type ListRequest struct {
	// include query parameter to retrieve any particular or particular
	// combination of relationships. Multiple include values are delimited by
	// comma(,).
	//
	// For example,
	// /{resource_name}/13?include=baz
	// /{resource_name}/13?include=baz,bot
	Include string `protobuf:"bytes,1,opt,name=include" json:"include,omitempty"`
	// fields query parameter to retrieve any particular or any particular
	// combination of attributes. Multiple fields values are delimited by comma(,).
	//
	// For example
	// /{resource_name}/29?fields=foo
	// /{resource_name}/?fields=foo,bar
	Fields string `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	// The page number to fetch
	Pagenum int64 `protobuf:"varint,4,opt,name=pagenum" json:"pagenum,omitempty"`
	// Number of records per page
	Pagesize int64 `protobuf:"varint,5,opt,name=pagesize" json:"pagesize,omitempty"`
	// The `filter` query parameter restricts the data return by the
	// collection. To use it, supply an attribute to filter, followed by a
	// filter expression. It uses the following syntax...
	//        attribute operator expression
	// attribute - Any one of the valid attribute of the resource.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded.
	//
	//              ==  Equals (URL encoding is %3D%3D)
	//              !=  Not equals
	//              =@  Contains substring
	//              !@  Not contains substring
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded.
	// For example, the following filter returns all users with last name `Gag`.
	//           /users?filter=last_name%3D%3Dgag
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	Filter string `protobuf:"bytes,6,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListRequest) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *ListRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *ListRequest) GetPagenum() int64 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

func (m *ListRequest) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *ListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// A `SimpleListRequest` is identical to `ListRequest` except it does not support
// pagination. The rest of the parameters are identical to `ListRequest` definition.
type SimpleListRequest struct {
	// include query parameter to retrieve any particular or particular
	// combination of relationships. Multiple include values are delimited by
	// comma(,).
	//
	// For example,
	// /{resource_name}/13?include=baz
	// /{resource_name}/13?include=baz,bot
	Include string `protobuf:"bytes,1,opt,name=include" json:"include,omitempty"`
	// fields query parameter to retrieve any particular or any particular
	// combination of attributes. Multiple fields values are delimited by comma(,).
	//
	// For example
	// /{resource_name}/29?fields=foo
	// /{resource_name}/?fields=foo,bar
	Fields string `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
	// The `filter` query parameter restricts the data return by the
	// collection. To use it, supply an attribute to filter, followed by a
	// filter expression. It uses the following syntax...
	//        attribute operator expression
	// attribute - Any one of the valid attribute of the resource.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded.
	//
	//              ==  Equals (URL encoding is %3D%3D)
	//              !=  Not equals
	//              =@  Contains substring
	//              !@  Not contains substring
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded.
	// For example, the following filter returns all users with last name `Gag`.
	//           /users?filter=last_name%3D%3Dgag
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	Filter string `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
}

func (m *SimpleListRequest) Reset()                    { *m = SimpleListRequest{} }
func (m *SimpleListRequest) String() string            { return proto.CompactTextString(m) }
func (*SimpleListRequest) ProtoMessage()               {}
func (*SimpleListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *SimpleListRequest) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *SimpleListRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *SimpleListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// A `DeleteRequest` defines the url parameter that must be passed
// to remove a singular resource.
type DeleteRequest struct {
	// An unique identifier, for example:
	// "/users/34"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *DeleteRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IdRequest struct {
	// An unique identifier
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdRequest) Reset()                    { *m = IdRequest{} }
func (m *IdRequest) String() string            { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()               {}
func (*IdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *IdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HealthzIdRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *HealthzIdRequest) Reset()                    { *m = HealthzIdRequest{} }
func (m *HealthzIdRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthzIdRequest) ProtoMessage()               {}
func (*HealthzIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *HealthzIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "dictybase.api.jsonapi.GetRequest")
	proto.RegisterType((*GetEmailRequest)(nil), "dictybase.api.jsonapi.GetEmailRequest")
	proto.RegisterType((*GetRequestWithFields)(nil), "dictybase.api.jsonapi.GetRequestWithFields")
	proto.RegisterType((*RelationshipRequest)(nil), "dictybase.api.jsonapi.RelationshipRequest")
	proto.RegisterType((*RelationshipRequestWithPagination)(nil), "dictybase.api.jsonapi.RelationshipRequestWithPagination")
	proto.RegisterType((*ListRequest)(nil), "dictybase.api.jsonapi.ListRequest")
	proto.RegisterType((*SimpleListRequest)(nil), "dictybase.api.jsonapi.SimpleListRequest")
	proto.RegisterType((*DeleteRequest)(nil), "dictybase.api.jsonapi.DeleteRequest")
	proto.RegisterType((*IdRequest)(nil), "dictybase.api.jsonapi.IdRequest")
	proto.RegisterType((*HealthzIdRequest)(nil), "dictybase.api.jsonapi.HealthzIdRequest")
}

func init() { proto.RegisterFile("request.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x75, 0x36, 0x6d, 0x4c, 0xae, 0x56, 0xeb, 0x5a, 0x65, 0xac, 0x0f, 0xad, 0x0b, 0x42, 0x1f,
	0xec, 0xee, 0x83, 0xe0, 0x8b, 0x20, 0xb8, 0x56, 0x6b, 0x40, 0x24, 0xac, 0x82, 0x54, 0xf0, 0x61,
	0x92, 0xbd, 0x6e, 0xae, 0xce, 0xee, 0x8c, 0x3b, 0x13, 0x8b, 0x05, 0x3f, 0xc1, 0x9f, 0xf0, 0xc7,
	0x04, 0xbf, 0xc2, 0x47, 0xd9, 0x49, 0xb2, 0x9b, 0xc5, 0x04, 0x6a, 0x9f, 0x66, 0xce, 0xdc, 0x7b,
	0xce, 0xbd, 0x73, 0xe0, 0xc0, 0x56, 0x89, 0x5f, 0xa6, 0x68, 0x6c, 0xa8, 0x4b, 0x65, 0x95, 0x7f,
	0x2b, 0xa5, 0xb1, 0xfd, 0x36, 0x12, 0x06, 0x43, 0xa1, 0x29, 0xfc, 0x64, 0x54, 0x21, 0x34, 0xed,
	0x3e, 0xca, 0xc8, 0x4e, 0xa6, 0xa3, 0x70, 0xac, 0xf2, 0x28, 0x3f, 0x25, 0xfb, 0x59, 0x9d, 0x46,
	0x99, 0x3a, 0x74, 0x9c, 0xc3, 0xaf, 0x42, 0x52, 0x2a, 0xac, 0x2a, 0x4d, 0x54, 0x5f, 0x67, 0x72,
	0xc1, 0x6b, 0x80, 0x63, 0xb4, 0xc9, 0x6c, 0x84, 0x7f, 0x0d, 0x3c, 0x4a, 0x39, 0xdb, 0x67, 0x07,
	0x9d, 0xc4, 0xa3, 0xd4, 0xe7, 0x70, 0x99, 0x8a, 0xb1, 0x9c, 0xa6, 0xc8, 0xbd, 0x7d, 0x76, 0xd0,
	0x4f, 0x16, 0xd0, 0xbf, 0x0d, 0xdd, 0x8f, 0x84, 0x32, 0x35, 0xbc, 0xe3, 0x0a, 0x73, 0x14, 0x9c,
	0xc0, 0xf5, 0x63, 0xb4, 0xcf, 0x73, 0x41, 0x72, 0x21, 0xba, 0x03, 0x9b, 0x58, 0x61, 0xa7, 0xdb,
	0x4f, 0x66, 0xe0, 0x02, 0xd2, 0x4f, 0x60, 0xa7, 0x59, 0xf5, 0x1d, 0xd9, 0xc9, 0x0b, 0xf7, 0xfe,
	0xcf, 0xd2, 0x0d, 0xdf, 0x6b, 0xf1, 0xef, 0xc3, 0xcd, 0x04, 0xa5, 0xb0, 0xa4, 0x0a, 0x33, 0x21,
	0xbd, 0xe6, 0xcf, 0x01, 0xc1, 0xbd, 0x15, 0x6d, 0xd5, 0xbc, 0xa1, 0xc8, 0xa8, 0x70, 0x85, 0x55,
	0x46, 0x69, 0x91, 0x61, 0x31, 0xcd, 0xf9, 0x86, 0x7b, 0x5c, 0x40, 0x7f, 0x17, 0x7a, 0xd5, 0xd5,
	0xd0, 0x19, 0xba, 0xff, 0x74, 0x92, 0x1a, 0x07, 0x3f, 0x18, 0x5c, 0x79, 0x45, 0xa6, 0xb6, 0x7f,
	0xc9, 0x13, 0x76, 0x2e, 0x4f, 0xce, 0x39, 0x77, 0xb3, 0x3d, 0x77, 0xa6, 0x26, 0x2d, 0x96, 0xbc,
	0xbb, 0x50, 0xab, 0x50, 0xf0, 0x01, 0x6e, 0xbc, 0xa1, 0x5c, 0x4b, 0xfc, 0xdf, 0xa5, 0x5a, 0x46,
	0x2f, 0xc9, 0x77, 0x5a, 0xf2, 0x7b, 0xb0, 0x75, 0x84, 0x12, 0x2d, 0xae, 0xb3, 0xfe, 0x2e, 0xf4,
	0x07, 0xe9, 0xba, 0xe2, 0x03, 0xd8, 0x7e, 0x89, 0x42, 0xda, 0xc9, 0x59, 0xd3, 0xc3, 0x9b, 0x9e,
	0xb8, 0xf7, 0xfb, 0xd7, 0xde, 0xc6, 0xf6, 0x25, 0xee, 0x55, 0xdd, 0xf1, 0x77, 0xb8, 0xa3, 0xca,
	0x2c, 0x5c, 0x19, 0x96, 0xf8, 0xea, 0x9c, 0x3f, 0xac, 0x22, 0x30, 0x64, 0xef, 0xe3, 0xa5, 0xf0,
	0x38, 0x46, 0x2c, 0x0c, 0x56, 0xf1, 0xc9, 0xb0, 0x70, 0x31, 0x89, 0x6a, 0x1d, 0xa1, 0xc9, 0x44,
	0x42, 0x53, 0x34, 0xd7, 0x7a, 0x3c, 0x3f, 0xff, 0x30, 0xf6, 0xd3, 0xeb, 0x1d, 0x0d, 0x9e, 0xbd,
	0x3d, 0x79, 0x3a, 0x1c, 0x8c, 0xba, 0x8e, 0xf6, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xed, 0xd8, 0xbe, 0xbd, 0x03, 0x00, 0x00,
}
