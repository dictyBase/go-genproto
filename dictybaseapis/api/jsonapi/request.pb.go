// Code generated by protoc-gen-go. DO NOT EDIT.
// source: request.proto

package jsonapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A `GetRequest` defines various url and query parameters that could be passed
// in a HTTP **GET** request to a singular resource. Majority of the request
// parameters are identical or similar to [jsonapi](http://jsonapi.org).
type GetRequest struct {
	// An unique identifier, for example:
	// "/users/34"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// include query parameter, here only "roles" relationship resource is allowed.
	// For example, "/users/34?include=roles
	Include string `protobuf:"bytes,2,opt,name=include" json:"include,omitempty"`
	// fields query parameter, here all the user attributes in any
	// combination(comma separated) is allowed.
	Fields string `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetRequest) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *GetRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

// A `RelationshipRequest` defines the url parameter for relationship resources
// that are given in the links field of relationship object
type RelationshipRequest struct {
	// An unique identifier, for example:
	// "/users/45/roles" or "/users/45/relationships/roles"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RelationshipRequest) Reset()                    { *m = RelationshipRequest{} }
func (m *RelationshipRequest) String() string            { return proto.CompactTextString(m) }
func (*RelationshipRequest) ProtoMessage()               {}
func (*RelationshipRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RelationshipRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// A `ListRequest` defines various url and query parameters that could be
// passed in a HTTP **GET** request to a collection resource. All collection
// resources are expected to support pagination. Majority of the request
// parameters are identical or similar to [jsonapi](http://jsonapi.org).
type ListRequest struct {
	// Identical as `GetRequest`
	Include string `protobuf:"bytes,1,opt,name=include" json:"include,omitempty"`
	// Identical as `GetRequest`
	Fields string `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	// The page number to fetch
	Pagenum int64 `protobuf:"varint,4,opt,name=pagenum" json:"pagenum,omitempty"`
	// Number of records per page
	Pagesize int64 `protobuf:"varint,5,opt,name=pagesize" json:"pagesize,omitempty"`
	// The `filter` query parameter restricts the data return by the
	// collection. To use it, supply an attribute to filter, followed by a
	// filter expression. It uses the following syntax...
	//        attribute operator expression
	// attribute - Any one of the valid attribute of the resource.
	// operator - Defines the type of filter match to use. It could be any of
	// the following four and all of them should be URL-encoded.
	//
	//              ==  Equals (URL encoding is %3D%3D)
	//              !=  Not equals
	//              =@  Contains substring
	//              !@  Not contains substring
	//
	// expression - The value that will be included or excluded from the
	// result. URL-reserved characters must be URL-encoded.
	// For example, the following filter returns all users with last name `Gag`.
	//           /users?filter=last_name%3D%3Dgag
	//
	// Filter can be combined using OR or AND boolean logic.
	//   * The OR is represented using a comma(,).
	//   * The AND is represented using a semi-colon(;).
	//   * AND and OR operators can be combined and AND takes precedence over OR.
	Filter string `protobuf:"bytes,6,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListRequest) GetInclude() string {
	if m != nil {
		return m.Include
	}
	return ""
}

func (m *ListRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *ListRequest) GetPagenum() int64 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

func (m *ListRequest) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *ListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// A `DelteRequest` defines the url parameter that must be passed
// in a HTTP **DELETE** request to remove a singular resource.
type DeleteRequest struct {
	// An unique identifier, for example:
	// "/users/34"
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DeleteRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "dictybase.api.jsonapi.GetRequest")
	proto.RegisterType((*RelationshipRequest)(nil), "dictybase.api.jsonapi.RelationshipRequest")
	proto.RegisterType((*ListRequest)(nil), "dictybase.api.jsonapi.ListRequest")
	proto.RegisterType((*DeleteRequest)(nil), "dictybase.api.jsonapi.DeleteRequest")
}

func init() { proto.RegisterFile("request.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0xd9, 0x9c, 0xc6, 0x73, 0xf4, 0x2c, 0x22, 0xca, 0x6a, 0xe3, 0x11, 0x10, 0xae, 0x31,
	0x29, 0x2c, 0xad, 0x8c, 0x07, 0x72, 0x20, 0x12, 0x82, 0x8d, 0x76, 0x9b, 0x64, 0xcc, 0x8d, 0xe4,
	0xb2, 0x6b, 0x76, 0x53, 0x28, 0xf8, 0x08, 0xbe, 0x84, 0x4f, 0x69, 0x29, 0xd9, 0x4b, 0x82, 0x85,
	0x07, 0x56, 0xc9, 0xc7, 0xec, 0xff, 0xfd, 0xcb, 0x2c, 0x4c, 0x6a, 0x7c, 0x6d, 0x50, 0x9b, 0x40,
	0xd5, 0xd2, 0x48, 0xef, 0x28, 0xa7, 0xcc, 0xbc, 0xa5, 0x42, 0x63, 0x20, 0x14, 0x05, 0x2f, 0x5a,
	0x56, 0x42, 0x91, 0x7f, 0x0f, 0x70, 0x8b, 0x26, 0x59, 0x1f, 0xf5, 0x0e, 0xc0, 0xa1, 0x9c, 0xb3,
	0x29, 0x9b, 0x8d, 0x12, 0x87, 0x72, 0x8f, 0xc3, 0x0e, 0x55, 0x59, 0xd9, 0xe4, 0xc8, 0x9d, 0x29,
	0x9b, 0xed, 0x26, 0x3d, 0x7a, 0xc7, 0xe0, 0x3e, 0x13, 0x96, 0xb9, 0xe6, 0x23, 0x3b, 0xe8, 0xc8,
	0x3f, 0x87, 0xc3, 0x04, 0x4b, 0x61, 0x48, 0x56, 0x7a, 0x49, 0x6a, 0x83, 0xd8, 0xff, 0x64, 0xb0,
	0x77, 0x47, 0x7a, 0x28, 0xfe, 0x55, 0xc4, 0xfe, 0x55, 0xd4, 0x26, 0x94, 0x28, 0xb0, 0x6a, 0x56,
	0x7c, 0xcb, 0x6a, 0x7b, 0xf4, 0x4e, 0x61, 0xdc, 0xfe, 0x6a, 0x7a, 0x47, 0xbe, 0x6d, 0x47, 0x03,
	0xaf, 0x6d, 0xa5, 0xc1, 0x9a, 0xbb, 0xbd, 0xad, 0x25, 0xff, 0x0c, 0x26, 0x73, 0x2c, 0xd1, 0xe0,
	0x86, 0x0b, 0x47, 0x1f, 0x70, 0x22, 0xeb, 0x22, 0xf8, 0x73, 0x89, 0xd1, 0x7e, 0x97, 0x8a, 0xdb,
	0x4d, 0xc7, 0xec, 0x29, 0x2a, 0xc8, 0x2c, 0x9b, 0x34, 0xc8, 0xe4, 0x2a, 0xb4, 0x89, 0x48, 0x68,
	0x0c, 0x0b, 0x79, 0x51, 0x60, 0x65, 0x5f, 0x23, 0x1c, 0x3c, 0x42, 0x91, 0x0e, 0x85, 0xa2, 0xb0,
	0x73, 0x5d, 0x75, 0xdf, 0x6f, 0xc6, 0xbe, 0x9c, 0xf1, 0x7c, 0x71, 0xf3, 0xf0, 0x78, 0x1d, 0x2f,
	0x52, 0xd7, 0xc6, 0x2e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xa7, 0x52, 0x98, 0xd5, 0x01,
	0x00, 0x00,
}
