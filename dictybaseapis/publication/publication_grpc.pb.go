// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package publication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicationServiceClient is the client API for PublicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicationServiceClient interface {
	// Retrieves publication by ID
	GetPublication(ctx context.Context, in *PublicationId, opts ...grpc.CallOption) (*Publication, error)
	// Create new publication
	CreatePublication(ctx context.Context, in *NewPublication, opts ...grpc.CallOption) (*Publication, error)
	// Update an existing publication
	UpdatePublication(ctx context.Context, in *PublicationUpdate, opts ...grpc.CallOption) (*Publication, error)
	// Delete an existing publication
	DeletePublication(ctx context.Context, in *PublicationId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all publications
	ListPublications(ctx context.Context, in *ListPublicationParameters, opts ...grpc.CallOption) (*PublicationCollection, error)
}

type publicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicationServiceClient(cc grpc.ClientConnInterface) PublicationServiceClient {
	return &publicationServiceClient{cc}
}

func (c *publicationServiceClient) GetPublication(ctx context.Context, in *PublicationId, opts ...grpc.CallOption) (*Publication, error) {
	out := new(Publication)
	err := c.cc.Invoke(ctx, "/dictybase.publication.PublicationService/GetPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicationServiceClient) CreatePublication(ctx context.Context, in *NewPublication, opts ...grpc.CallOption) (*Publication, error) {
	out := new(Publication)
	err := c.cc.Invoke(ctx, "/dictybase.publication.PublicationService/CreatePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicationServiceClient) UpdatePublication(ctx context.Context, in *PublicationUpdate, opts ...grpc.CallOption) (*Publication, error) {
	out := new(Publication)
	err := c.cc.Invoke(ctx, "/dictybase.publication.PublicationService/UpdatePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicationServiceClient) DeletePublication(ctx context.Context, in *PublicationId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dictybase.publication.PublicationService/DeletePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicationServiceClient) ListPublications(ctx context.Context, in *ListPublicationParameters, opts ...grpc.CallOption) (*PublicationCollection, error) {
	out := new(PublicationCollection)
	err := c.cc.Invoke(ctx, "/dictybase.publication.PublicationService/ListPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicationServiceServer is the server API for PublicationService service.
// All implementations must embed UnimplementedPublicationServiceServer
// for forward compatibility
type PublicationServiceServer interface {
	// Retrieves publication by ID
	GetPublication(context.Context, *PublicationId) (*Publication, error)
	// Create new publication
	CreatePublication(context.Context, *NewPublication) (*Publication, error)
	// Update an existing publication
	UpdatePublication(context.Context, *PublicationUpdate) (*Publication, error)
	// Delete an existing publication
	DeletePublication(context.Context, *PublicationId) (*emptypb.Empty, error)
	// List all publications
	ListPublications(context.Context, *ListPublicationParameters) (*PublicationCollection, error)
	mustEmbedUnimplementedPublicationServiceServer()
}

// UnimplementedPublicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicationServiceServer struct {
}

func (UnimplementedPublicationServiceServer) GetPublication(context.Context, *PublicationId) (*Publication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (UnimplementedPublicationServiceServer) CreatePublication(context.Context, *NewPublication) (*Publication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublication not implemented")
}
func (UnimplementedPublicationServiceServer) UpdatePublication(context.Context, *PublicationUpdate) (*Publication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublication not implemented")
}
func (UnimplementedPublicationServiceServer) DeletePublication(context.Context, *PublicationId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublication not implemented")
}
func (UnimplementedPublicationServiceServer) ListPublications(context.Context, *ListPublicationParameters) (*PublicationCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublications not implemented")
}
func (UnimplementedPublicationServiceServer) mustEmbedUnimplementedPublicationServiceServer() {}

// UnsafePublicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicationServiceServer will
// result in compilation errors.
type UnsafePublicationServiceServer interface {
	mustEmbedUnimplementedPublicationServiceServer()
}

func RegisterPublicationServiceServer(s grpc.ServiceRegistrar, srv PublicationServiceServer) {
	s.RegisterService(&PublicationService_ServiceDesc, srv)
}

func _PublicationService_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicationServiceServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.publication.PublicationService/GetPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicationServiceServer).GetPublication(ctx, req.(*PublicationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicationService_CreatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPublication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicationServiceServer).CreatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.publication.PublicationService/CreatePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicationServiceServer).CreatePublication(ctx, req.(*NewPublication))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicationService_UpdatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicationServiceServer).UpdatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.publication.PublicationService/UpdatePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicationServiceServer).UpdatePublication(ctx, req.(*PublicationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicationService_DeletePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicationServiceServer).DeletePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.publication.PublicationService/DeletePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicationServiceServer).DeletePublication(ctx, req.(*PublicationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicationService_ListPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicationServiceServer).ListPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictybase.publication.PublicationService/ListPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicationServiceServer).ListPublications(ctx, req.(*ListPublicationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicationService_ServiceDesc is the grpc.ServiceDesc for PublicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictybase.publication.PublicationService",
	HandlerType: (*PublicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublication",
			Handler:    _PublicationService_GetPublication_Handler,
		},
		{
			MethodName: "CreatePublication",
			Handler:    _PublicationService_CreatePublication_Handler,
		},
		{
			MethodName: "UpdatePublication",
			Handler:    _PublicationService_UpdatePublication_Handler,
		},
		{
			MethodName: "DeletePublication",
			Handler:    _PublicationService_DeletePublication_Handler,
		},
		{
			MethodName: "ListPublications",
			Handler:    _PublicationService_ListPublications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictybase/publication/publication.proto",
}
